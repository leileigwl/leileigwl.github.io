<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>磊磊の小窝</title>
    <link>https://leileigwl.github.io/</link>
    
    <atom:link href="https://leileigwl.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>小白小白·~</description>
    <pubDate>Mon, 17 Apr 2023 07:30:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>test</title>
      <link>https://leileigwl.github.io/post/d87f7e0c.html</link>
      <guid>https://leileigwl.github.io/post/d87f7e0c.html</guid>
      <pubDate>Mon, 17 Apr 2023 07:23:55 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;简单的测试一下&quot;&gt;&lt;a href=&quot;#简单的测试一下&quot; class=&quot;headerlink&quot; title=&quot;简单的测试一下&quot;&gt;&lt;/a&gt;简单的测试一下&lt;/h3&gt;&lt;p&gt;什么都没有哦&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="简单的测试一下"><a href="#简单的测试一下" class="headerlink" title="简单的测试一下"></a>简单的测试一下</h3><p>什么都没有哦</p>]]></content:encoded>
      
      
      
      
      <comments>https://leileigwl.github.io/post/d87f7e0c.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python经典书籍</title>
      <link>https://leileigwl.github.io/post/16fc56f8.html</link>
      <guid>https://leileigwl.github.io/post/16fc56f8.html</guid>
      <pubDate>Wed, 12 Apr 2023 00:17:35 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Python参考书籍&quot;&gt;&lt;a href=&quot;#Python参考书籍&quot; class=&quot;headerlink&quot; title=&quot;Python参考书籍&quot;&gt;&lt;/a&gt;Python参考书籍&lt;/h2&gt;&lt;h3 id=&quot;入门读物&quot;&gt;&lt;a href=&quot;#入门读物&quot; class=&quot;head</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Python参考书籍"><a href="#Python参考书籍" class="headerlink" title="Python参考书籍"></a>Python参考书籍</h2><h3 id="入门读物"><a href="#入门读物" class="headerlink" title="入门读物"></a>入门读物</h3><ol><li>《Python基础教程》（<em>Beginning Python From Novice to Professional</em>）</li><li>《Python学习手册》（<em>Learning Python</em>）</li><li>《Python编程》（<em>Programming Python</em>）</li><li>《Python Cookbook》</li><li>《Python程序设计》（<em>Python Programming: An Introduction to Computer Science</em>）</li><li>《Modern Python Cookbook》</li></ol><h3 id="进阶读物"><a href="#进阶读物" class="headerlink" title="进阶读物"></a>进阶读物</h3><ol><li>《Python核心编程》（<em>Core Python Applications Programming</em>）</li><li>《流畅的Python》（<em>Fluent Python</em>）</li><li>《Effective Python：编写高质量Python代码的59个有效方法》（<em>Effective Python 59 Specific Ways to Write Better Python</em>）</li><li>《Python设计模式》（<em>Learning Python Design Patterns</em>）</li><li>《Python高级编程》（<em>Expert Python Programming</em>）</li><li>《Python性能分析与优化》（<em>Mastering Python High Performance</em>）</li></ol><h3 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h3><ol><li>《Django基础教程》（<em>Tango with Django</em>）</li><li>《轻量级Django》（<em>Lightweight Django</em>）</li><li>《Python Web开发：测试驱动方法》（<em>Test-Driven Development with Python</em>）</li><li>《Web Development with Django Cookbook》</li><li>《Test-Driven Development with Django》</li><li>《Django Project Blueprints 》</li><li>《Flask Web开发：基于Python的Web应用开发实战》（<em>Flask Web Development: Developing Web Applications with Python</em>）</li><li>《深入理解Flask》（<em>Mastering Flask</em>）</li></ol><h3 id="爬虫开发"><a href="#爬虫开发" class="headerlink" title="爬虫开发"></a>爬虫开发</h3><ol><li>《用Python写网络爬虫》（<em>Web Scraping with Python</em>）</li><li>《精通Python爬虫框架Scrapy》（<em>Learning Scrapy</em>）</li><li>《Python网络数据采集》（<em>Web Scraping with Python</em>）</li><li>《Python爬虫开发与项目实战》</li><li>《Python 3网络爬虫开发实战》</li></ol><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ol><li>《利用Python进行数据分析》（<em>Python for Data Analysis</em>）</li><li>《Python数据科学手册》（<em>Python Data Science Handbook</em>）</li><li>《Python金融大数据分析》（<em>Python for Finance</em>）</li><li>《Python数据可视化编程实战》（<em>Python Data Visualization Cookbook</em>）</li><li>《Python数据处理》（<em>Data Wrangling with Python</em>）</li></ol><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><ol><li>《Python机器学习基础教程》（<em>Introduction to Machine Learning with Python</em>）</li><li>《Python机器学习实践指南》（<em>Python Machine Learning Blueprints</em>）</li><li>《Python Machine Learning Case Studies》</li><li>《Python机器学习实践：测试驱动的开发方法》（<em>Thoughtful Machine Learning with Python A Test Driven Approach</em>）</li><li>《Python机器学习经典实例》（<em>Python Machine Learning Cookbook</em>）</li><li>《TensorFlow：实战Google深度学习框架》</li></ol>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/python/">python</category>
      
      <category domain="https://leileigwl.github.io/tags/%E4%B9%A6%E7%B1%8D/">书籍</category>
      
      
      <comments>https://leileigwl.github.io/post/16fc56f8.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>代理ip测速</title>
      <link>https://leileigwl.github.io/post/ae4f18a7.html</link>
      <guid>https://leileigwl.github.io/post/ae4f18a7.html</guid>
      <pubDate>Tue, 11 Apr 2023 11:28:38 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;SPEEDTEST-https-www-speedtest-net&quot;&gt;&lt;a href=&quot;#SPEEDTEST-https-www-speedtest-net&quot; class=&quot;headerlink&quot; title=&quot;SPEEDTEST : https://www.sp</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="SPEEDTEST-https-www-speedtest-net"><a href="#SPEEDTEST-https-www-speedtest-net" class="headerlink" title="SPEEDTEST : https://www.speedtest.net/"></a>SPEEDTEST : <a href="https://www.speedtest.net/">https://www.speedtest.net/</a></h3><ul><li><p>请务必认准 .net 域名，不要使用 .cn 域名的来测试。</p></li><li><p>请确认网页上显示的测试服务器的位置在中国大陆以外。如果仍显示国内地址，请开启全局代理模式。</p></li><li><p>点击网页上的 GO 来进行测试。</p></li><li><p>我自己常用的是无广告版本的站点：</p><p>① <a href="http://mybroadbandspeed.speedtestcustom.com/">http://mybroadbandspeed.speedtestcustom.com/</a></p><p>② <a href="http://aaaaaa.speedtestcustom.com/">http://aaaaaa.speedtestcustom.com/</a></p><p>③ <a href="http://rixcloud.speedtestcustom.com/">http://rixcloud.speedtestcustom.com/</a></p><p>④ <a href="http://cordcloud.speedtestcustom.com/">http://cordcloud.speedtestcustom.com/</a></p></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/speedtest/">speedtest</category>
      
      
      <comments>https://leileigwl.github.io/post/ae4f18a7.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo常用快捷键</title>
      <link>https://leileigwl.github.io/post/9e05c39.html</link>
      <guid>https://leileigwl.github.io/post/9e05c39.html</guid>
      <pubDate>Tue, 11 Apr 2023 11:26:11 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo g (生成)</span><br><span class="line">hexo s/server (开始本地预览服务)</span><br><span class="line">hexo d/deploy (发布上传)</span><br><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo d (组合生成发布命令)</span><br><span class="line">hexo clean &amp;&amp; hexo g&amp;&amp;gulp&amp;&amp; hexo deploy (！最常用的组合命令，生成，压缩并发布)</span><br><span class="line">hexo n/new &quot;postName&quot; (新建文章)</span><br><span class="line">hexo new page &quot;pageName&quot; (新建页面)</span><br><span class="line">hexo g/generate （生成静态页面至public目录）</span><br><span class="line">hexo help (查看帮助)</span><br><span class="line">hexo version (查看Hexo版本)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://leileigwl.github.io/post/9e05c39.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>niaho</title>
      <link>https://leileigwl.github.io/post/9f32bac9.html</link>
      <guid>https://leileigwl.github.io/post/9f32bac9.html</guid>
      <pubDate>Thu, 23 Mar 2023 12:12:20 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;CDN配置原理：&quot;&gt;&lt;a href=&quot;#CDN配置原理：&quot; class=&quot;headerlink&quot; title=&quot;CDN配置原理：&quot;&gt;&lt;/a&gt;&lt;strong&gt;CDN配置原理：&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在第一次使用CDN服务时，往往会遇到一些问题，比如不知道回</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="CDN配置原理："><a href="#CDN配置原理：" class="headerlink" title="CDN配置原理："></a><strong>CDN配置原理：</strong></h2><p>在第一次使用CDN服务时，往往会遇到一些问题，比如不知道回源HOST是干什么的，该不该配置？HOST 在计算机网络是主机、服务机的意思。顾明思议，回源HOST也就是客户访问CDN节点时，如果节点没有缓存这个资源，要在指定的主机寻找客户想要的目标资源。</p><p><img src="https://www.qingyi1220.cn/posts/16918/host.png" alt="CDN入门配置"></p><h2 id="源站和回源HOST的区别："><a href="#源站和回源HOST的区别：" class="headerlink" title="源站和回源HOST的区别："></a><strong>源站和回源HOST的区别：</strong></h2><ul><li>源站：源站决定了回源时请求到的具体IP地址。</li><li>回源HOST：回源HOST决定了回源请求访问到该IP地址上的具体站点。</li></ul><p><strong>举个例子</strong>：您要去某单位找张三办事，如果告诉您某单位在 XX路XX号，这就相当于源站。到单位后您需要找张三，就还需要知道张三的房间号，XX楼XX层XX号办公室，这就相当于回源HOST。</p><h2 id="不需要设置回源HOST的应用场景"><a href="#不需要设置回源HOST的应用场景" class="headerlink" title="不需要设置回源HOST的应用场景"></a><strong>不需要设置回源HOST的应用场景</strong></h2><p>以下两种应用场景下，可以不设置回源HOST，或者设置回源HOST为加速域名。</p><ul><li>在您源站地址是加速域名服务器IP的情况下，您的回源HOST类型应为加速域名。</li><li>在您源站地址是OSS域名的情况下，您的回源HOST类型应为源站域名。</li></ul><h2 id="需要设置回源HOST的应用场景"><a href="#需要设置回源HOST的应用场景" class="headerlink" title="需要设置回源HOST的应用场景"></a><strong>需要设置回源HOST的应用场景</strong></h2><p>当您的服务器有多个站点，需要回源的站点不是加速域名对应的站点时，设置回源HOST。设置回源HOST要明白以下两点：</p><p>1、在您的源站选择了域名源站 <a href="http://www.a.c瞐缦o柺m弨,h瀏os酳嬮牪蟊麿t攁濯w嫷ꍞww櫉.b.com,/">www.a.com的情况下，如果您选择将回源HOST设置为www.b.com，</a> 则实际回源的是<a href="http://www.a.com解析到的服务器上的站点www.b.com./">www.a.com解析到的服务器上的站点www.b.com。</a></p><p><strong>举例说明：</strong>您添加的加速域名是<a href="http://www.test.c獼o豂畡m稝硓畦,螀뜽/">www.test.com，该域名指向服务器</a> 1.1.1.1，添加源站域名填写的域名是 <a href="http://www.a.co攧嬯m,hostw耻ꄳ鍙ww.b.com.如果www.a.com/">www.a.com，回源HOST设置为www.b.com。如果www.a.com</a> 指向服务器1.1.1.1。则实际回源到的是1.1.1.1 服务器上的 <a href="http://www.b.com/">www.b.com</a> 站点；如果<a href="http://www.a.com/">www.a.com</a> 指向服务器 2.2.2.2。则实际回源到的是2.2.2.2 服务器上的 <a href="http://www.b.com/">www.b.com</a> 站点。</p><p>2、在您的源站是IP源站 1.1.1.1的情况下，您选择将回源HOST设置为<a href="http://www.b.祟獯뻉浍遗虉c馽om,1.1.1.1对应的主机上的站点www.b.com./">www.b.com，则实际回源的是1.1.1.1对应的主机上的站点www.b.com。</a></p><p><strong>举例说明：</strong>您添加的加速域名是<a href="http://www.test.c獼o豂畡m稝硓畦,螀뜽/">www.test.com，该域名指向服务器</a> 1.1.1.1，添加源站域名填写的服务器IP，IP是2.2.2.2 ，回源HOST设置为 <a href="http://www.a.com/">www.a.com</a> 。则实际回源到的是2.2.2.2 服务器上的 <a href="http://www.a.com/">www.a.com</a> 站点。</p>]]></content:encoded>
      
      
      
      
      <comments>https://leileigwl.github.io/post/9f32bac9.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>java8函数式编程</title>
      <link>https://leileigwl.github.io/post/bbb56e1a.html</link>
      <guid>https://leileigwl.github.io/post/bbb56e1a.html</guid>
      <pubDate>Thu, 23 Mar 2023 11:56:39 GMT</pubDate>
      
        
        
      <description>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
**什么是函数式编程?**

&lt;p&gt;百度百科： 函数式编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，λ演算为该语言最重要的基础。而且，λ演算的函数</description>
        
      
      
      
      <content:encoded><![CDATA[<meta name="referrer" content="no-referrer"/>**什么是函数式编程?**<p>百度百科： 函数式编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，λ演算为该语言最重要的基础。而且，λ演算的函数可以接受函数作为输入参数和输出返回值。</p><p>讲人话： 函数式编程一种编程范式,允许使用一种表达式（lambda表达式）来表示一个函数</p><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><blockquote><p>Java语言中函数式编程，通过Java8版本提供的<code>函数式接口规范</code>来实现,它指的是有且只有一个未实现的方法的接口，一般通过<code>FunctionalInterface</code>这个注解来表明某个接口是一个函数式接口(非必须，如果标注了该注解，编译器检查接口是否符合函数式接口规范，如出现两个及以上数量的普通方法，编译器会报错)。函数式接口是Java支持函数式编程的基础。java8及以上版本才支持。</p></blockquote><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>使用Consumer作为示例，它是一个函数式接口，包含一个抽象方法accept，这个方法只有输入而无输出。<br>现在我们要定义一个Consumer对象，传统的方式是这样定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Consumer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而在Java8中，针对函数式编程接口，可以这样定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Consumer</span> <span class="variable">c</span> <span class="operator">=</span> (o) -&gt; &#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><p>上面已说明，函数式编程接口都只有一个抽象方法，因此在采用这种写法时，编译器会将这段函数编译后当作该抽象方法的实现。<br>如果接口有多个抽象方法，编译器就不知道这段函数应该是实现哪个方法的了。<br>因此，&#x3D;后面的函数体我们就可以看成是accept函数的实现。</p><ul><li>输入：-&gt;前面的部分，即被()包围的部分。此处只有一个输入参数，实际上输入是可以有多个的，如两个参数时写法：(a, b);当然也可以没有输入，此时直接就可以是()</li><li>函数体：-&gt;后面的部分，即被{}包围的部分；可以是一段代码。</li><li>输出：函数式编程可以没有返回值，也可以有返回值。如果有返回值时，需要代码段的最后一句通过return的方式返回对应的值</li></ul><p>当函数体中只有一个语句时，可以去掉{}进一步简化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Consumer</span> <span class="variable">c</span> <span class="operator">=</span> (o) -&gt; System.out.println(o);</span><br></pre></td></tr></table></figure><p>然而这还不是最简的，由于此处只是进行打印，调用了System.out中的println静态方法对输入参数直接进行打印，因此可以简化成以下写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Consumer</span> <span class="variable">c</span> <span class="operator">=</span> System.out::println;</span><br></pre></td></tr></table></figure><p>它表示的意思就是针对输入的参数将其调用System.out中的静态方法println进行打印。<br>到这一步就可以感受到函数式编程的强大能力。<br>通过最后一段代码，我们可以简单的理解函数式编程，Consumer接口直接就可以当成一个函数了，这个函数接收一个输入参数，然后针对这个输入进行处理；当然其本质上仍旧是一个对象，但我们已经省去了诸如老方式中的对象定义过程，直接使用一段代码来给函数式接口对象赋值。<br>而且最为关键的是，这个函数式对象因为本质上仍旧是一个对象，因此可以做为其它方法的参数或者返回值，可以与原有的代码实现无缝集成！</p><h2 id="Java预设函数式接口"><a href="#Java预设函数式接口" class="headerlink" title="Java预设函数式接口"></a>Java预设函数式接口</h2><blockquote><p>下面对Java中的几个预先定义的函数式接口及其经常使用的类进行分析学习。在<code>java.util.function</code>包下提供了很多函数式接口，这里挑几个常用的进行讲解。</p></blockquote><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>Consumer是一个函数式编程接口； 顾名思义，Consumer的意思就是消费，即针对某个东西我们来使用它，因此它包含有一个有输入而无输出的accept接口方法；<br>除accept方法，它还包含有andThen这个方法；<br>其定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title function_">andThen</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; after)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(after);</span><br><span class="line">    <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见这个方法就是指定在调用当前Consumer后是否还要调用其它的Consumer；<br>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">consumerTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">f</span> <span class="operator">=</span> System.out::println;</span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">f2</span> <span class="operator">=</span> n -&gt; System.out.println(n + <span class="string">&quot;-F2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行完F后再执行F2的Accept方法</span></span><br><span class="line">    f.andThen(f2).accept(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连续执行F的Accept方法</span></span><br><span class="line">    f.andThen(f).andThen(f).andThen(f).accept(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>Function也是一个函数式编程接口；它代表的含义是“函数”，而函数经常是有输入输出的，因此它含有一个apply方法，包含一个输入与一个输出；<br>除apply方法外，它还有compose与andThen及indentity三个方法，其使用见下述示例；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Function测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">functionTest</span><span class="params">()</span> &#123;</span><br><span class="line">    Function&lt;Integer, Integer&gt; f = s -&gt; s++;</span><br><span class="line">    Function&lt;Integer, Integer&gt; g = s -&gt; s * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面表示在执行F时，先执行G，并且执行F时使用G的输出当作输入。</span></span><br><span class="line"><span class="comment">     * 相当于以下代码：</span></span><br><span class="line"><span class="comment">     * Integer a = g.apply(1);</span></span><br><span class="line"><span class="comment">     * System.out.println(f.apply(a));</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(f.compose(g).apply(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示执行F的Apply后使用其返回的值当作输入再执行G的Apply；</span></span><br><span class="line"><span class="comment">     * 相当于以下代码</span></span><br><span class="line"><span class="comment">     * Integer a = f.apply(1);</span></span><br><span class="line"><span class="comment">     * System.out.println(g.apply(a));</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(f.andThen(g).apply(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * identity方法会返回一个不进行任何处理的Function，即输出与输入值相等； </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(Function.identity().apply(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>Predicate为函数式接口，predicate的中文意思是“断定”，即判断的意思，判断某个东西是否满足某种条件； 因此它包含test方法，根据输入值来做逻辑判断，其结果为True或者False。<br>它的使用方法示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Predicate测试</span><br><span class="line"> */</span><br><span class="line">private static void predicateTest() &#123;</span><br><span class="line">    Predicate&lt;String&gt; p = o -&gt; o.equals(&quot;test&quot;);</span><br><span class="line">    Predicate&lt;String&gt; g = o -&gt; o.startsWith(&quot;t&quot;);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * negate: 用于对原来的Predicate做取反处理；</span><br><span class="line">     * 如当调用p.test(&quot;test&quot;)为True时，调用p.negate().test(&quot;test&quot;)就会是False；</span><br><span class="line">     */</span><br><span class="line">    Assert.assertFalse(p.negate().test(&quot;test&quot;));</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * and: 针对同一输入值，多个Predicate均返回True时返回True，否则返回False；</span><br><span class="line">     */</span><br><span class="line">    Assert.assertTrue(p.and(g).test(&quot;test&quot;));</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * or: 针对同一输入值，多个Predicate只要有一个返回True则返回True，否则返回False</span><br><span class="line">     */</span><br><span class="line">    Assert.assertTrue(p.or(g).test(&quot;ta&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><blockquote><p>Stream可以对多个元素进行一系列的操作，也可以支持对某些操作进行并发处理。Java8中对集合、数组进行了stream的实现，方便开发人员通过stream对集合或数组进行数据操作。</p></blockquote><h2 id="Stream对象的创建"><a href="#Stream对象的创建" class="headerlink" title="Stream对象的创建"></a>Stream对象的创建</h2><p>Stream对象的创建途径有以下几种</p><p>a. 创建空的Stream对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> Stream.empty();</span><br></pre></td></tr></table></figure><p>b. 通过集合类中的stream或者parallelStream方法创建；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Arrays.stream(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>&#125;);</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">listStream</span> <span class="operator">=</span> list.stream();                   <span class="comment">//获取串行的Stream对象</span></span><br><span class="line"><span class="type">Stream</span> <span class="variable">parallelListStream</span> <span class="operator">=</span> list.parallelStream();   <span class="comment">//获取并行的Stream对象  </span></span><br></pre></td></tr></table></figure><p>c. 通过Stream中的of方法创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream s = Stream.of(&quot;test&quot;);</span><br><span class="line">Stream s1 = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;);</span><br></pre></td></tr></table></figure><p>d. 通过Stream中的iterate方法创建：<br>iterate方法有两个不同参数的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">iterate</span><span class="params">(<span class="keyword">final</span> T seed, <span class="keyword">final</span> UnaryOperator&lt;T&gt; f)</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">iterate</span><span class="params">(T seed, Predicate&lt;? <span class="built_in">super</span> T&gt; hasNext, UnaryOperator&lt;T&gt; next)</span></span><br></pre></td></tr></table></figure><p>其中第一个方法将会返回一个无限有序值的Stream对象：它的第一个元素是seed，第二个元素是f.apply(seed); 第N个元素是f.apply(n-1个元素的值)；生成无限值的方法实际上与Stream的中间方法类似，在遇到中止方法前一般是不真正的执行的。因此无限值的这个方法一般与limit等方法一起使用，来获取前多少个元素。<br>当然获取前多少个元素也可以使用第二个方法。<br>第二个方法与第一个方法生成元素的方式类似，不同的是它返回的是一个有限值的Stream；中止条件是由hasNext来断定的。</p><p>第二种方法的使用示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 本示例表示从1开始组装一个序列，第一个是1，第二个是1+1即2，第三个是2+1即3..，直接10时中止；</span><br><span class="line"> * 也可简化成以下形式：</span><br><span class="line"> *        Stream.iterate(1,</span><br><span class="line"> *        n -&gt; n &lt;= 10,</span><br><span class="line"> *        n -&gt; n+1).forEach(System.out::println);</span><br><span class="line"> * 写成以下方式是为简化理解</span><br><span class="line"> */</span><br><span class="line">Stream.iterate(1,</span><br><span class="line">        new Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean test(Integer integer) &#123;</span><br><span class="line">                return integer &lt;= 10;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    new UnaryOperator&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Integer apply(Integer integer) &#123;</span><br><span class="line">            return integer+1;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>e. 通过Stream中的generate方法创建<br>与iterate中创建无限元素的Stream类似，不过它的每个元素与前一元素无关，且生成的是一个无序的队列。也就是说每一个元素都可以随机生成。因此一般用来创建常量的Stream以及随机的Stream等。<br>示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 随机生成10个Double元素的Stream并将其打印</span><br><span class="line"> */</span><br><span class="line">Stream.generate(new Supplier&lt;Double&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Double get() &#123;</span><br><span class="line">        return Math.random();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).limit(10).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">//上述写法可以简化成以下写法：</span><br><span class="line">Stream.generate(() -&gt; Math.random()).limit(10).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="Stream对象的使用"><a href="#Stream对象的使用" class="headerlink" title="Stream对象的使用"></a>Stream对象的使用</h2><p>Stream对象提供多个非常有用的方法，这些方法可以分成两类：<br>中间操作：将原始的Stream转换成另外一个Stream；如filter返回的是过滤后的Stream。<br>终端操作：产生的是一个结果或者其它的复合操作；如count或者forEach操作。</p><p>下面就几个比较常用的方法举例说明其用法：</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>用于对Stream中的元素进行过滤，返回一个过滤后的Stream<br>其方法定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span>;</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; s = Stream.of(&quot;test&quot;, &quot;t1&quot;, &quot;t2&quot;, &quot;teeeee&quot;, &quot;aaaa&quot;);</span><br><span class="line">//查找所有包含t的元素并进行打印</span><br><span class="line">s.filter(n -&gt; n.contains(&quot;t&quot;)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>元素一对一转换。<br>它接收一个Funcation参数，用其对Stream中的所有元素进行处理，返回的Stream对象中的元素为Function对原元素处理后的结果<br>其方法定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</span><br></pre></td></tr></table></figure><p>示例，假设我们要将一个String类型的Stream对象中的每个元素添加相同的后缀.txt，如a变成a.txt，其写法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; s = Stream.of(&quot;test&quot;, &quot;t1&quot;, &quot;t2&quot;, &quot;teeeee&quot;, &quot;aaaa&quot;);</span><br><span class="line">s.map(n -&gt; n.concat(&quot;.txt&quot;)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>元素一对多转换：对原Stream中的所有元素使用传入的Function进行处理，每个元素经过处理后生成一个多个元素的Stream对象，然后将返回的所有Stream对象中的所有元素组合成一个统一的Stream并返回；<br>方法定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper);</span><br></pre></td></tr></table></figure><p>示例，假设要对一个String类型的Stream进行处理，将每一个元素的拆分成单个字母，并打印：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; s = Stream.of(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;t1&quot;</span>, <span class="string">&quot;t2&quot;</span>, <span class="string">&quot;teeeee&quot;</span>, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">s.flatMap(n -&gt; Stream.of(n.split(<span class="string">&quot;&quot;</span>))).forEach(System.out::println);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://leileigwl.github.io/categories/java/">java</category>
      
      
      <category domain="https://leileigwl.github.io/tags/java/">java</category>
      
      <category domain="https://leileigwl.github.io/tags/java8/">java8</category>
      
      <category domain="https://leileigwl.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/">函数式编程</category>
      
      
      <comments>https://leileigwl.github.io/post/bbb56e1a.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://leileigwl.github.io/post/4a17b156.html</link>
      <guid>https://leileigwl.github.io/post/4a17b156.html</guid>
      <pubDate>Thu, 23 Mar 2023 11:48:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://leileigwl.github.io/post/4a17b156.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
