<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>磊磊の小窝</title>
    <link>https://leileigwl.github.io/</link>
    
    <atom:link href="https://leileigwl.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>小白小白·~</description>
    <pubDate>Mon, 04 Dec 2023 12:34:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>2023.12.4</title>
      <link>https://leileigwl.github.io/post/e52bac39.html</link>
      <guid>https://leileigwl.github.io/post/e52bac39.html</guid>
      <pubDate>Mon, 04 Dec 2023 12:10:50 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;2023-12-4&quot;&gt;&lt;a href=&quot;#2023-12-4&quot; class=&quot;headerlink&quot; title=&quot;2023.12.4&quot;&gt;&lt;/a&gt;2023.12.4&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;今天是日记第一篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="2023-12-4"><a href="#2023-12-4" class="headerlink" title="2023.12.4"></a>2023.12.4</h3><blockquote><p>今天是日记第一篇</p></blockquote><p>从今天起，把自己的小博客重新搭建完成，并进行每天的日记记录，以此鞭策同时监督自己·</p><p>博客内容以每日的生活，所做的事为主，主打一个记录生活</p><hr><p>完成的事：</p><ul><li><p>重新整理了一下博客内容</p></li><li><p>七牛云正常使用·顺便上传张图测试一下·</p><p><img src="http://img.210214.xyz/blog/wallhaven-rrjvyq.png" alt="wallhaven-rrjvyq"></p></li><li><p>开始顺利慢慢进入六级状态</p></li><li><p>最后今天还需要把代码完成一下</p></li><li><p>然后去跑一跑2km</p></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://leileigwl.github.io/post/e52bac39.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python解码</title>
      <link>https://leileigwl.github.io/post/ef700de4.html</link>
      <guid>https://leileigwl.github.io/post/ef700de4.html</guid>
      <pubDate>Sun, 14 May 2023 08:21:25 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;python-解码&quot;&gt;&lt;a href=&quot;#python-解码&quot; class=&quot;headerlink&quot; title=&quot;python 解码&quot;&gt;&lt;/a&gt;python 解码&lt;/h2&gt;&lt;h3 id=&quot;request-请求&quot;&gt;&lt;a href=&quot;#request-请求&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="python-解码"><a href="#python-解码" class="headerlink" title="python 解码"></a>python 解码</h2><h3 id="request-请求"><a href="#request-请求" class="headerlink" title="request 请求"></a>request 请求</h3><p>原理：</p><ul><li><p>字符串在Python内部的表示是<strong>unicode</strong>编码，需要unicode编码作为中间件</p><ul><li>eg、response 请求后得到的结果的编码，运行到python程序中首先是<code>unicode</code>编码，先用response.text.encode去加载原本再网页中的编码，然后再将这个网页里使用的编码进行decode(‘utf8’)就可以正常的显示了</li></ul></li><li><p>encode 用于在python程序中，unicode 对其他编码的处理，将python程序中的unicode编码encode得到常见的编码，想要输出的话还是要转成utf8 ，这就要用到decode函数了</p></li><li><p>decode函数是用于 常见编码转换成unicode编码的一种方式</p></li></ul><p>通用解码： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response.text.encode(response.encoding).decode(<span class="string">&#x27;utf-8&#x27;</span>) </span><br><span class="line"><span class="comment">#response.encoding为原来的编码格式，encode后编码为原来的格式，decode后解码为‘utf-8’</span></span><br><span class="line">response.encoding= <span class="string">&#x27;utf8&#x27;</span> <span class="comment">#将encoding直接转换成utf8</span></span><br><span class="line">response.content.decode(<span class="string">&#x27;utf8&#x27;</span>) <span class="comment">#二进制内容转换成utf8</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.210214.xyz//random/image-20230514160231034.png" alt="image-20230514160231034"></p><h3 id="文件读写操作codecs-open"><a href="#文件读写操作codecs-open" class="headerlink" title="文件读写操作codecs.open"></a>文件读写操作codecs.open</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">     <span class="keyword">with</span> codecs.<span class="built_in">open</span>(‘....txt’,’w’,’utf-<span class="number">8</span>’) <span class="keyword">as</span> f:</span><br><span class="line">     f.write(...)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/python/">python</category>
      
      <category domain="https://leileigwl.github.io/tags/%E7%BC%96%E7%A0%81/">编码</category>
      
      
      <comments>https://leileigwl.github.io/post/ef700de4.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js逆向关键词</title>
      <link>https://leileigwl.github.io/post/7f0ece4d.html</link>
      <guid>https://leileigwl.github.io/post/7f0ece4d.html</guid>
      <pubDate>Sun, 14 May 2023 06:20:11 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;特殊的关键词检索&quot;&gt;&lt;a href=&quot;#特殊的关键词检索&quot; class=&quot;headerlink&quot; title=&quot;特殊的关键词检索&quot;&gt;&lt;/a&gt;特殊的关键词检索&lt;/h2&gt;&lt;h3 id=&quot;webpack打包&quot;&gt;&lt;a href=&quot;#webpack打包&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="特殊的关键词检索"><a href="#特殊的关键词检索" class="headerlink" title="特殊的关键词检索"></a>特殊的关键词检索</h2><h3 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a><code>webpack</code>打包</h3><ul><li><p><code>interceptors.request.use</code></p></li><li><p><code>apply/call</code> 用来找导出函数，找到加密函数后，自执行，用来</p><ul><li><p>示例地址 <code>https://developer.aliyun.com/article/1103664</code></p></li><li><p>主要结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _e;</span><br><span class="line">!(<span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = &#123;&#125;;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">s</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t[s].<span class="title function_">call</span>(n.<span class="property">exports</span>, n, n.<span class="property">exports</span>, e), n.<span class="property">loaded</span> = !<span class="number">0</span>, n.<span class="property">exports</span></span><br><span class="line">    &#125;</span><br><span class="line">    _e = e;</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    <span class="attr">encrypt</span>: <span class="keyword">function</span>(<span class="params">t, e, i</span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">diaoyong</span>: <span class="keyword">function</span>(<span class="params">t, e, i</span>) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getkey</span>(<span class="params">pass, time</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> diaoyong= <span class="title function_">_e</span>(<span class="string">&quot;diaoyong&quot;</span>);</span><br><span class="line">    <span class="comment">//这儿需要new一下调用方法，不然获取不到方法属性</span></span><br><span class="line">    <span class="keyword">var</span> new_diaoyong = <span class="keyword">new</span> <span class="title function_">diaoyong</span>();</span><br><span class="line">    <span class="keyword">return</span> new_diaoyong.<span class="title function_">encode</span>(pass, time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="非对称加密-RSA"><a href="#非对称加密-RSA" class="headerlink" title="非对称加密 RSA"></a>非对称加密 <code>RSA</code></h3><ul><li><code>JSEncrypt</code><br>new JSEncrypt(),JSEncrypt等，一般会便用JSEncrypt库，会有new一个实例对象的操作；</li><li>搜索关键词setPublicKey、setKey、setPrivateKey、getPublicKey等，一般实现的代码里都含有设置密钥的过程。</li></ul><h3 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h3><ul><li><p>返回结果无法看懂，但页面显示正常</p></li><li><p><code>JSON.parse/JSON.stringify</code></p></li><li><p><code>btoa</code> <code>base64</code>加密， <code>atob</code>解密</p></li><li><p><code>new Date().getTime()</code> 获取13位时间戳</p></li><li><p><code>jsencrypt</code>(忘记了)</p></li><li><p><strong>indexof</strong> 通过window的可以查找</p></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/js/">js</category>
      
      <category domain="https://leileigwl.github.io/tags/%E9%80%86%E5%90%91/">逆向</category>
      
      
      <comments>https://leileigwl.github.io/post/7f0ece4d.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js加密模块</title>
      <link>https://leileigwl.github.io/post/fc757312.html</link>
      <guid>https://leileigwl.github.io/post/fc757312.html</guid>
      <pubDate>Sun, 14 May 2023 06:19:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;常看见的加密算法&quot;&gt;&lt;a href=&quot;#常看见的加密算法&quot; class=&quot;headerlink&quot; title=&quot;常看见的加密算法&quot;&gt;&lt;/a&gt;常看见的加密算法&lt;/h2&gt;&lt;h3 id=&quot;一、HASH系列&quot;&gt;&lt;a href=&quot;#一、HASH系列&quot; class=&quot;head</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="常看见的加密算法"><a href="#常看见的加密算法" class="headerlink" title="常看见的加密算法"></a>常看见的加密算法</h2><h3 id="一、HASH系列"><a href="#一、HASH系列" class="headerlink" title="一、HASH系列"></a>一、<em>HASH</em>系列</h3><p>特征：数字字母组成，全部大写&#x2F;小写</p><h4 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h4><ul><li>不可逆，32位</li></ul><h5 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5_test1():</span><br><span class="line">    md5 = hashlib.new(&#x27;md5&#x27;, &#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5_test2():</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(&#x27;I love &#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    md5.update(&#x27;python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    md5_test1()  # 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br><span class="line">    md5_test2()  # 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br></pre></td></tr></table></figure><h4 id="sha1-x2F-256"><a href="#sha1-x2F-256" class="headerlink" title="sha1&#x2F;256"></a>sha1&#x2F;256</h4><ul><li>不可逆，40位</li></ul><h5 id="Python-实现-1"><a href="#Python-实现-1" class="headerlink" title="Python 实现"></a>Python 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sha1_test1():</span><br><span class="line">    sha1 = hashlib.new(&#x27;sha1&#x27;, &#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sha1_test2():</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(&#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    sha1_test1()  # 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br><span class="line">    sha1_test2()  # 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br></pre></td></tr></table></figure><h4 id="hmac"><a href="#hmac" class="headerlink" title="hmac"></a>hmac</h4><ul><li>给定一个密钥，对明文加密，做两次“散列”，得到的结果还是32为字符串</li></ul><h5 id="python-实现"><a href="#python-实现" class="headerlink" title="python 实现"></a>python 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import hmac</span><br><span class="line"></span><br><span class="line">def hmac_test1():</span><br><span class="line">    message = b&#x27;I love python!&#x27;</span><br><span class="line">    key = b&#x27;secret&#x27;</span><br><span class="line">    md5 = hmac.new(key, message, digestmod=&#x27;MD5&#x27;)</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hmac_test2():</span><br><span class="line">    key = &#x27;secret&#x27;.encode(&#x27;utf8&#x27;)</span><br><span class="line">    sha1 = hmac.new(key, digestmod=&#x27;sha1&#x27;)</span><br><span class="line">    sha1.update(&#x27;I love &#x27;.encode(&#x27;utf8&#x27;))</span><br><span class="line">    sha1.update(&#x27;Python!&#x27;.encode(&#x27;utf8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    hmac_test1()  # 9c503a1f852edcc3526ea56976c38edf</span><br><span class="line">    hmac_test2()  # 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span><br></pre></td></tr></table></figure><h3 id="二、加密基本参数"><a href="#二、加密基本参数" class="headerlink" title="二、加密基本参数"></a>二、加密基本参数</h3><ul><li>在一些对称和非对称加密算法中，经常会用到以下三个参数：初始向量 iv、加密模式 mode、填充方式 padding</li></ul><h4 id="iv"><a href="#iv" class="headerlink" title="iv"></a>iv</h4><p>在密码学中，初始向量，与密钥结合使用，作为加密数据的手段，</p><h4 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h4><p>目前流行的加密和数字认证算法，都是采用块加密方式，就是将需要加密的明文分成固定大小的数据块，然后对其执行密码算法，得到密文。</p><ul><li><strong>ECB：电子码本模式</strong>，是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。</li><li><strong>CBC：密码块链接模式</strong>，是一种循环模式，前一个分组的密文和当前分组的明文异或操作后再加密，这样做的目的是增强破解难度。</li><li><strong>PCBC：填充密码块链接模式</strong>，也称为明文密码块链接模式（Plaintext Cipher Block Chaining），是一种可以使密文中的微小更改在解密时导致明文大部分错误的模式，并在加密的时候也具有同样的特性。</li><li><strong>CFB：密码反馈模式</strong>，可以将块密码变为自同步的流密码，类似于 CBC，CFB 的解密过程几乎就是颠倒的 CBC 的加密过程。</li><li><strong>OFB：输出反馈模式</strong>，可以将块密码变成同步的流密码，它产生密钥流的块，然后将其与明文块进行异或，得到密文。与其它流密码一样，密文中一个位的翻转会使明文中同样位置的位也产生翻转。</li><li><strong>CTR：计数器模式</strong>，也被称为 ICM 模式（Integer Counter Mode，整数计数模式）和 SIC 模式（Segmented Integer Counter），在 CTR 模式中，有一个自增的算子，这个算子用密钥加密之后的输出和明文异或的结果得到密文，相当于一次一密。这种加密方式简单快速，安全可靠，而且可以并行加密，但是在计算器不能维持很长的情况下，密钥只能使用一次。</li></ul><h4 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h4><p>块密码只能对确定长度的数据块进行处理，而消息的长度通常是可变的。因此部分模式最后一块数据在加密前需要进行填充。</p><ul><li><strong>PKCS7</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为需要填充的字节长度值。</li><li><strong>PKCS5</strong>：PKCS5 作为 PKCS7 的子集算法，概念上没有什么区别，只是在 blockSize 上固定为 8 bytes，即块大小固定为 8 字节。</li><li><strong>ZeroPadding</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为 0 。</li><li><strong>ISO10126</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充随机数值。</li><li><strong>ANSIX923</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充数字零。</li></ul><h3 id="三、对称加密（传统加密）"><a href="#三、对称加密（传统加密）" class="headerlink" title="三、对称加密（传统加密）"></a>三、<em>对称加密（传统加密）</em></h3><ul><li><p>特征：加密和解密使用同一个密钥。</p></li><li><p>加密解密过程：明文-&gt;密钥加密-&gt;密文，密文-&gt;密钥解密-&gt;明文。</p></li><li><p>解密条件：<strong>key</strong>,<strong>iv</strong>,<strong>mode</strong>,<strong>padding</strong></p></li></ul><h4 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h4><ul><li>8位密钥</li><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><h5 id="JavaScript-实现"><a href="#JavaScript-实现" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function desEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // CBC 加密模式，Pkcs7 填充方式</span><br><span class="line">        encrypted = CryptoJS.DES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function desDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // CBC 加密模式，Pkcs7 填充方式</span><br><span class="line">        decrypted = CryptoJS.DES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var desKey = &quot;6f726c64f2c2057&quot;    // 密钥</span><br><span class="line">var desIv = &quot;0123456789ABCDEF&quot;    // 初始向量</span><br><span class="line"></span><br><span class="line">var encryptedData = desEncrypt()</span><br><span class="line">var decryptedData = desDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  +ndbEkWNw2QAfIYQtwC14w==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h4 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h4><ul><li><p>特征：原理和DES几乎是一样的，只是使用3个密钥，对相同的数据执行三次加密，增强加密强度。</p></li><li><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</p></li><li><p>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p></li></ul><h5 id="JavaScript-实现-1"><a href="#JavaScript-实现-1" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function tripleDesEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // ECB 加密方式，Iso10126 填充方式</span><br><span class="line">        encrypted = CryptoJS.TripleDES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.ECB,</span><br><span class="line">            padding: CryptoJS.pad.Iso10126</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tripleDesDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // ECB 加密方式，Iso10126 填充方式</span><br><span class="line">        decrypted = CryptoJS.TripleDES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.ECB,</span><br><span class="line">            padding: CryptoJS.pad.Iso10126</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var desKey = &quot;6f726c64f2c2057c&quot;    // 密钥</span><br><span class="line">var desIv = &quot;0123456789ABCDEF&quot;    // 偏移量</span><br><span class="line"></span><br><span class="line">var encryptedData = tripleDesEncrypt()</span><br><span class="line">var decryptedData = tripleDesDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  3J0NX7x6GbewjjhoW2HKqg==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h4 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h4><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><h5 id="JavaScript-实现-2"><a href="#JavaScript-实现-2" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function tripleAesEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(aesKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(aesIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // CBC 加密方式，Pkcs7 填充方式</span><br><span class="line">        encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tripleAesDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(aesKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(aesIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // CBC 加密方式，Pkcs7 填充方式</span><br><span class="line">        decrypted = CryptoJS.AES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var aesKey = &quot;6f726c64f2c2057c&quot;   // 密钥，16 倍数</span><br><span class="line">var aesIv = &quot;0123456789ABCDEF&quot;    // 偏移量，16 倍数</span><br><span class="line"></span><br><span class="line">var encryptedData = tripleAesEncrypt()</span><br><span class="line">var decryptedData = tripleAesDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  dZL7TLJR786VGvuUvqYGoQ==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="四、非对称加密RSA"><a href="#四、非对称加密RSA" class="headerlink" title="四、非对称加密RSA"></a><em>四、非对称加密RSA</em></h3><p>特征：</p><ul><li>非对称加密算法需要两个密钥：公开密钥(publickey) 和私有密(privatekey)</li><li>有字符 <code>+ / =</code>、而且比较长</li><li>如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密。</li><li>如果用私有密钥对数据进行加密，只有用对应的公开密钥才能解密。</li></ul><p>解密条件：</p><ul><li>公钥 publickey</li><li>存在位置： 后端api，js里、网页源码里</li></ul><h3 id="JavaScript-实现-3"><a href="#JavaScript-实现-3" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 引用 node-rsa 加密模块</span><br><span class="line">var NodeRSA = require(&#x27;node-rsa&#x27;);</span><br><span class="line"></span><br><span class="line">function rsaEncrypt() &#123;</span><br><span class="line">    pubKey = new NodeRSA(publicKey,&#x27;pkcs8-public&#x27;);</span><br><span class="line">    var encryptedData = pubKey.encrypt(text, &#x27;base64&#x27;);</span><br><span class="line">    return encryptedData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rsaDecrypt() &#123;</span><br><span class="line">    priKey = new NodeRSA(privatekey,&#x27;pkcs8-private&#x27;);</span><br><span class="line">    var decryptedData = priKey.decrypt(encryptedData, &#x27;utf8&#x27;);</span><br><span class="line">    return decryptedData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var key = new NodeRSA(&#123;b: 512&#125;);                    //生成512位秘钥</span><br><span class="line">var publicKey = key.exportKey(&#x27;pkcs8-public&#x27;);    //导出公钥</span><br><span class="line">var privatekey = key.exportKey(&#x27;pkcs8-private&#x27;);  //导出私钥</span><br><span class="line">var text = &quot;I love Python!&quot;</span><br><span class="line"></span><br><span class="line">var encryptedData = rsaEncrypt()</span><br><span class="line">var decryptedData = rsaDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;公钥:\n&quot;, publicKey)</span><br><span class="line">console.log(&quot;私钥:\n&quot;, privatekey)</span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">公钥:</span><br><span class="line"> -----BEGIN PUBLIC KEY-----</span><br><span class="line">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAOV1BwTJSVce/QjJAro5fXG9WzOpal09</span><br><span class="line">Qtv1yuXKE81vZSNTHxW6dICwPT/kjCfC3bA5Qs6wnYBANuwD6wlAS0UCAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">私钥:</span><br><span class="line"> -----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA5XUHBMlJVx79CMkC</span><br><span class="line">ujl9cb1bM6lqXT1C2/XK5coTzW9lI1MfFbp0gLA9P+SMJ8LdsDlCzrCdgEA27APr</span><br><span class="line">CUBLRQIDAQABAkAiXwJbJC+5PioXG80tyhjRZdT4iyMkrl2Kh2oKO9f1iLaBXLya</span><br><span class="line">D0HW82wFh+cUy8GcMl9jse8DE8wd1TdORmHhAiEA/rwmWjXHVgDqcH/fqk8Ufku0</span><br><span class="line">fXvs56h5QDoh1so5vokCIQDmmL3JDW6Y7RuK2qwFbHBZtYPRFRVdn5X1oqU2FOSX</span><br><span class="line">3QIhAOVTjVN5RtNuT6Cn/jvcpZ5tmTe+8TA8w6vGqeAsfn/BAiBvKKIUEQ2HWoU0</span><br><span class="line">YkUaODPQiteIKomqIAvB5S2O7HNlYQIgWMuLUxGZbbcAmIX+YmRXuET97S7OWv+z</span><br><span class="line">WHVfb/rbXtI=</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line">加密字符串:  hHXTF1K3w55Wd6OSjVYtqxceJ5VhlySNUahel9pwKD92Ef7wIT7DYPuJRKiqz5tuHtUqujbmbZBSL0qDE/EA+A==</span><br><span class="line">解密字符串:  I love Python!</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h4 id="常用的浏览器解密模式"><a href="#常用的浏览器解密模式" class="headerlink" title="常用的浏览器解密模式"></a>常用的浏览器解密模式</h4><p>找到rsa文件，去创建同样的rsa对象。</p><p>找到加密的参数modulus，exponent直接构建</p>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%80%86%E5%90%91/">逆向</category>
      
      <category domain="https://leileigwl.github.io/tags/js%E5%8A%A0%E5%AF%86/">js加密</category>
      
      
      <comments>https://leileigwl.github.io/post/fc757312.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js环境</title>
      <link>https://leileigwl.github.io/post/aebf9b8c.html</link>
      <guid>https://leileigwl.github.io/post/aebf9b8c.html</guid>
      <pubDate>Sun, 14 May 2023 06:16:41 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;补环境&quot;&gt;&lt;a href=&quot;#补环境&quot; class=&quot;headerlink&quot; title=&quot;补环境&quot;&gt;&lt;/a&gt;补环境&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsdom = <span class="built_in">require</span>(<span class="string">&quot;jsdom&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">JSDOM</span> &#125; = jsdom;</span><br><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> <span class="title function_">JSDOM</span>(<span class="string">`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`</span>);</span><br><span class="line"><span class="variable language_">window</span> = dom.<span class="property">window</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">document</span> = dom.<span class="property">window</span>.<span class="property">document</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">document</span> = <span class="variable language_">document</span>;</span><br></pre></td></tr></table></figure><h3 id="安装jsdom和canvas"><a href="#安装jsdom和canvas" class="headerlink" title="安装jsdom和canvas"></a>安装jsdom和canvas</h3><h4 id="jsdom"><a href="#jsdom" class="headerlink" title="jsdom"></a>jsdom</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g jsdom</span><br></pre></td></tr></table></figure><h4 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g canvas</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/js/">js</category>
      
      <category domain="https://leileigwl.github.io/tags/v8/">v8</category>
      
      <category domain="https://leileigwl.github.io/tags/%E9%80%86%E5%90%91/">逆向</category>
      
      
      <comments>https://leileigwl.github.io/post/aebf9b8c.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>node 环境配置</title>
      <link>https://leileigwl.github.io/post/c4efcc40.html</link>
      <guid>https://leileigwl.github.io/post/c4efcc40.html</guid>
      <pubDate>Mon, 08 May 2023 08:35:56 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#环境</span></span><br><span class="line">D:\configuration\Node</span><br><span class="line">D:\configuration\Node\node_global\node_modules</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 还原默认源：npm config set registry https://registry.npmjs.org/</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#目录</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\configuration\Node\node_cache&quot;</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\configuration\Node\node_cache&quot;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/node/">node</category>
      
      <category domain="https://leileigwl.github.io/tags/npm/">npm</category>
      
      
      <comments>https://leileigwl.github.io/post/c4efcc40.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>linux 登录配置</title>
      <link>https://leileigwl.github.io/post/3b1fdc09.html</link>
      <guid>https://leileigwl.github.io/post/3b1fdc09.html</guid>
      <pubDate>Mon, 08 May 2023 08:35:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;linux登录配置&quot;&gt;&lt;a href=&quot;#linux登录配置&quot; class=&quot;headerlink&quot; title=&quot;linux登录配置&quot;&gt;&lt;/a&gt;linux登录配置&lt;/h2&gt;&lt;h3 id=&quot;登录服务器-ssh&quot;&gt;&lt;a href=&quot;#登录服务器-ssh&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="linux登录配置"><a href="#linux登录配置" class="headerlink" title="linux登录配置"></a>linux登录配置</h2><h3 id="登录服务器-ssh"><a href="#登录服务器-ssh" class="headerlink" title="登录服务器: ssh"></a>登录服务器: ssh</h3><p>ssh，<code>secure shell protocol</code>，以更加安全的方式连接远程服务器。</p><p>把以下 IP 地址替换为你云服务器的公网地址，并提供密码即可登录。</p><p>但记住一个 IP 地址，这是一个反人性的操作，如果你有多个服务器需要管理呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root: 用户名</span></span><br><span class="line"><span class="comment"># 172.16.3.2: 云服务器 IP 地址，需要把 IP 地址换成个人 IP 地址</span></span><br><span class="line">$ ssh root@172.16.3.2</span><br></pre></td></tr></table></figure><h3 id="配置别名快速登录：ssh-config"><a href="#配置别名快速登录：ssh-config" class="headerlink" title="配置别名快速登录：ssh-config"></a>配置别名快速登录：ssh-config</h3><p>在<strong>本地客户端环境 (个人电脑) 上配置 ssh-config</strong>，<strong>没有该文件则新建文件</strong>。对自己管理的服务器起别名，可以更方便地登录多台云服务器，以下是关于 ssh-config 的配置文件</p><blockquote><p>如果 windows 用户需要配置 ssh config，请先安装 <a href="http://www.cygwin.com/install.html">cygwin (opens new window)</a>或者 mingw（git 自带）作为终端。</p></blockquote><ul><li><code>/etc/ssh/ssh_config</code></li><li><code>~/.ssh/config</code></li></ul><p>以下是快速登录山月两个服务器 <code>shanyue</code> 和 <code>training</code> 的配置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 修改 ssh 配置文件 ~/.ssh/config</span><br><span class="line"></span><br><span class="line"># 172.16.3.2 是内网环境，此处仅做示例</span><br><span class="line">Host shanyue</span><br><span class="line">    HostName 172.16.3.2</span><br><span class="line">    User root</span><br><span class="line"></span><br><span class="line"># 请用真实 IP 地址替换以下的 PUBLIC_IP</span><br><span class="line"># 并记得替换 User</span><br><span class="line">Host training</span><br><span class="line">    HostName &lt;PUBLIC_IP&gt;</span><br><span class="line">    User root</span><br></pre></td></tr></table></figure><p>配置成功之后直接 ssh 就可以直接登录，是不很方便？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh shanyue</span><br><span class="line">Last login: Wed Jun 15 20:09:14 2022 from 172.16.3.4</span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">[root@shanyue ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="免密登录：public-key-与-ssh-copy-id"><a href="#免密登录：public-key-与-ssh-copy-id" class="headerlink" title="免密登录：public-key 与 ssh-copy-id"></a>免密登录：public-key 与 ssh-copy-id</h3><p>如何实现远程服务器的免密登录需要两个条件:</p><ol><li>两个文件: 本地环境的 <code>~/.ssh/id_rsa.pub</code> 与 远程服务器的 <code>~/.ssh/authorized_keys</code></li><li>一个动作: 把本地文件 <code>~/.ssh/id_rsa.pub</code> 中内容复制粘贴到远程服务器 <code>~/.ssh/authorized_keys</code></li></ol><blockquote><p>如果本地没有 <code>~/.ssh/id_rsa.pub</code> 文件，则使用命令 <code>ssh-keygen</code> 进行生成。</p></blockquote><blockquote><p><code>~/.ssh/authorized_keys</code> 不能拥有其它用户（group、other）的写权限</p></blockquote><p><strong>总结成一句话，把自己的公钥放在远程服务器的 <code>authorized_keys</code> 中</strong></p><p>简单来说，就是 <code>Ctrl-C</code> 与 <code>Ctrl-V</code> 操作，不过还有一个更加有效率的工具: <code>ssh-copy-id</code>。</p><p>此时一个解决生产力的命令行工具应运而生: <code>ssh-copy-id</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在本地环境进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示你输入密码，成功之后可以直接 ssh 登录，无需密码</span></span><br><span class="line">$ ssh-copy-id shanyue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆成功，无需密码</span></span><br><span class="line">$ ssh shanyue</span><br></pre></td></tr></table></figure><h3 id="安全性-禁用密码登录"><a href="#安全性-禁用密码登录" class="headerlink" title="安全性: 禁用密码登录"></a>安全性: 禁用密码登录</h3><p>为了更大保障服务器的安全性，这里禁止密码登录。修改云服务器的 <code>sshd</code> 配置文件：<code>/etc/ssh/sshd_config</code>。其中 <code>PasswordAuthentication</code> 设置为 <code>no</code>，以此来禁用密码登录。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 编辑服务器端的 /etc/ssh/sshd_config</span><br><span class="line"># 禁用密码登录</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">  PasswordAuthentication no</span><br></pre></td></tr></table></figure><h3 id="保持连接，防止断掉"><a href="#保持连接，防止断掉" class="headerlink" title="保持连接，防止断掉"></a>保持连接，防止断掉</h3><p>除此之外，还可以通过一些配置来更好地优化我们连接服务器时的体验。</p><p>我们可以通过 <code>man ssh_config</code>，找到每一项的详细释义。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 编辑 ~/.ssh/config</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">  ServerAliveInterval 30</span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line">  ServerAliveCountMax 6</span><br><span class="line">  Compression yes</span><br></pre></td></tr></table></figure><p><code>ServerAliveInterval</code> 将能够保持较长时间 <code>ssh</code> 连接，不会使得程序在运行，结果因 ssh 超时而连接断开。</p><ul><li><code>ServerAliveInterval</code>：如果服务器 n 秒没有响应，则 ssh 客户端将发送数据包至 ssh 服务器</li><li><code>ServerAliveCountMax</code>：直到发送了 n 次，服务器还没有响应，则断掉 ssh 连接</li></ul><p>以上配置代表，如果服务器不响应后，服务器在 <code>30 * 6</code> 秒后将断开连接。</p><p>另外也可以通过 <code>ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=6 $HOST</code> 命令传递 ssh_config 配置。</p><hr><h3 id="linux用docker设置代理"><a href="#linux用docker设置代理" class="headerlink" title="linux用docker设置代理"></a>linux用docker设置代理</h3><p>将v2的端口设置好，并在<code> /etc/v2ray/config.json</code>这个文件中配置好导出的客户端模块，最后一键运行这个代码</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d --name v2ray -v /etc/v2ray:/etc/v2ray -p 10890:10890 v2ray/official  v2ray -config=/etc/v2ray/config.json</span></span><br></pre></td></tr></table></figure><hr><h3 id="docker-查看自己是否启动代理"><a href="#docker-查看自己是否启动代理" class="headerlink" title="docker 查看自己是否启动代理"></a>docker 查看自己是否启动代理</h3><ul><li><p>如果是http代理</p><ul><li><pre><code class="shell">curl --proxy http://127.0.0.1:10890 www.google.com<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果是socks代理</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    curl --socks5 http://127.0.0.1:10890 www.google.com</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="修改登录端口"><a href="#修改登录端口" class="headerlink" title="修改登录端口"></a>修改登录端口</h3><ul><li><pre><code class="bash">sudo vim /etc/ssh/sshd_config#用&quot;/&quot;命令找到Port，并进行修改sudo /etc/init.d/ssh restart# 重启 ssh 连接服务！# 修改完一定要记得打开修改过的端口sudo ufw allow Port<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 关闭防火墙</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">sudo ufw allow Port #指定端口进行开启</span><br><span class="line">sudo ufw disable #先关闭防火墙 开启的话是enable</span><br><span class="line">sudo ufw reset #重新设置</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="ubuntu-一键安装"><a href="#ubuntu-一键安装" class="headerlink" title="ubuntu 一键安装"></a>ubuntu 一键安装</h2><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></table></figure><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt intsall npm</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install  docker-compose -y</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/linux/">linux</category>
      
      
      <comments>https://leileigwl.github.io/post/3b1fdc09.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>git 配置</title>
      <link>https://leileigwl.github.io/post/5c006507.html</link>
      <guid>https://leileigwl.github.io/post/5c006507.html</guid>
      <pubDate>Mon, 08 May 2023 08:33:53 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;git-常用命令补充&quot;&gt;&lt;a href=&quot;#git-常用命令补充&quot; class=&quot;headerlink&quot; title=&quot;git 常用命令补充&quot;&gt;&lt;/a&gt;git 常用命令补充&lt;/h2&gt;&lt;h3 id=&quot;1-初始化配置&quot;&gt;&lt;a href=&quot;#1-初始化配置&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="git-常用命令补充"><a href="#git-常用命令补充" class="headerlink" title="git 常用命令补充"></a>git 常用命令补充</h2><h3 id="1-初始化配置"><a href="#1-初始化配置" class="headerlink" title="1.初始化配置"></a>1.初始化配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;***&quot;</span></span><br><span class="line"><span class="comment">#配置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----下面的根据情况配置-----</span></span><br><span class="line"><span class="comment">#不配置下载代码可能会出现SSL安全验证问题，可以关闭SSL安全验证</span></span><br><span class="line">git config --global http.sslVerift <span class="literal">false</span></span><br><span class="line"><span class="comment">#查看当前配置</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="comment">#提交时转换为LF，拉去时转换为CRLF</span></span><br><span class="line">onfig --global core.autocrlf <span class="literal">true</span></span><br><span class="line"><span class="comment">#提交时转换为linux的结尾符，拉取得时候不转换</span></span><br><span class="line">git config --global core.autocrlf input</span><br><span class="line"><span class="comment">#添加远程仓库(ssh地址)</span></span><br><span class="line">git remote add origin</span><br></pre></td></tr></table></figure><h3 id="2-拉取代码"><a href="#2-拉取代码" class="headerlink" title="2.拉取代码"></a>2.拉取代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可能存在子模块，递归拉取</span></span><br><span class="line">git <span class="built_in">clone</span> --recursive <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="comment">#更新代码</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="3-分支操作"><a href="#3-分支操作" class="headerlink" title="3.分支操作"></a>3.分支操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建本地分支（他会根据基于你当前的分支创建新的分支，</span></span><br><span class="line">也就是说当前的你的分支如果有代码的话你创建的新分支是不干净的）</span><br><span class="line">git checkout -b <span class="string">&#x27;目录&#x27;</span>/<span class="string">&#x27;分支名&#x27;</span> </span><br><span class="line"><span class="comment">#查看当前目录下的所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="comment">#切换分支</span></span><br><span class="line">git checkout <span class="string">&#x27;需要切换的峰值名称&#x27;</span></span><br><span class="line"><span class="comment">#删除分支 如果需要删除拥有未提交代码的分支需要把-d改成-D</span></span><br><span class="line">git branch -d <span class="string">&#x27;删除分支名称&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4代码提交"><a href="#4代码提交" class="headerlink" title="4代码提交"></a>4代码提交</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提交代码到本地分支</span></span><br><span class="line"><span class="comment">#需要先进行git add . 才能进行下面的操作</span></span><br><span class="line">git add.</span><br><span class="line">git commit -m <span class="string">&#x27;分支名称&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示提交内容</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="comment">#推送代码到远程git仓库，再推送的时候会在远程仓库创建一个git分支，然后在远程仓库发起合并请求.</span></span><br><span class="line"><span class="comment">#后续的每次推送都会远程仓库创建的那个对应分支上面</span></span><br><span class="line">git push </span><br><span class="line"><span class="comment">#强制推送，会覆盖之前的对应分支提交的代码</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure><h3 id="5-配置代理"><a href="#5-配置代理" class="headerlink" title="5.配置代理"></a>5.配置代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = xxxx</span><br><span class="line">email = xxxxx@xxxx</span><br><span class="line">[http <span class="string">&quot;https://github.com&quot;</span>]</span><br><span class="line">proxy = http://127.0.0.1:7890</span><br><span class="line">[http <span class="string">&quot;http://github.com&quot;</span>]</span><br><span class="line">proxy = http://127.0.0.1:7890</span><br><span class="line">[credential <span class="string">&quot;https://gitee.com&quot;</span>]</span><br><span class="line">provider = generic</span><br><span class="line">[http]</span><br><span class="line">sslverify = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="6-gitignore规则"><a href="#6-gitignore规则" class="headerlink" title="6. gitignore规则"></a>6. <code>gitignore</code>规则</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;#&#x27;</span>作为注释</span><br><span class="line"><span class="string">&#x27;/&#x27;</span>开头表示目录</span><br><span class="line"><span class="string">&#x27;*&#x27;</span>通配符</span><br><span class="line"><span class="string">&#x27;?&#x27;</span>匹配单个字符</span><br><span class="line"><span class="string">&#x27;[]&#x27;</span>包含单个字符的匹配规则</span><br><span class="line"><span class="string">&#x27;!&#x27;</span>忽略目录</span><br></pre></td></tr></table></figure><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*.txt  ，*.xls  表示过滤某种类型的文件</span><br><span class="line">target/ ：表示过滤这个文件夹下的所有文件</span><br><span class="line">/test/a.txt ，/test/b.xls  表示指定过滤某个文件下具体文件</span><br><span class="line">!*.java , !/dir/test/     !开头表示不过滤</span><br><span class="line">*.[ab]    支持通配符：过滤所有以.a或者.b为扩展名的文件</span><br><span class="line">/test  仅仅忽略项目根目录下的 <span class="built_in">test</span> 文件，不包括 child/test等非根目录的<span class="built_in">test</span>目录</span><br></pre></td></tr></table></figure><h4 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h4><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号 （[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不 忽略。</li><li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件 （默认文件或目录都忽略）。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">.txt      <span class="comment">#忽略所有 .txt结尾的文件</span></span><br><span class="line">!lib.txt   <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp      <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/     <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt  <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/git/">git</category>
      
      
      <comments>https://leileigwl.github.io/post/5c006507.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>docker 配置</title>
      <link>https://leileigwl.github.io/post/d723e266.html</link>
      <guid>https://leileigwl.github.io/post/d723e266.html</guid>
      <pubDate>Mon, 08 May 2023 08:32:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h2&gt;&lt;h3 id=&quot;docker设置开机自动重启并重新运行容器&quot;&gt;&lt;a href=&quot;#docker设置开机自动重启并重</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="docker设置开机自动重启并重新运行容器"><a href="#docker设置开机自动重启并重新运行容器" class="headerlink" title="docker设置开机自动重启并重新运行容器"></a>docker设置开机自动重启并重新运行容器</h3><ul><li><p>设置docker服务自动重启：</p><ul><li><pre><code class="shell">systemctl enable docker.service<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    docker run --restart=always</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>如果已经启动了</p><ul><li><pre><code class="shell">docker update --restart=always<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 重要的restart参数</span><br><span class="line"></span><br><span class="line">  - no - 容器退出时，不重启容器；</span><br><span class="line">  - on-failure - 只有在非0状态退出时才从新启动容器；如果容器由于错误而退出，则将其重新启动，非零退出代码表示错误</span><br><span class="line">  - unless-stopped - 重新启动容器，除非明确停止容器或者 Docker 被停止或重新启动</span><br><span class="line">  - always -只要容器停止了，就重新启动</span><br><span class="line"></span><br><span class="line">### docker-compose 启动</span><br><span class="line"></span><br><span class="line">#### 启动命令</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">sudo docker-compose up -d #前提需要有docker-compose.yml 文件</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="docker镜像源设置"><a href="#docker镜像源设置" class="headerlink" title="docker镜像源设置"></a>docker镜像源设置</h3><h4 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h4><ul><li>创建或修改 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件，修改为如下形式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-加载重启docker"><a href="#2-加载重启docker" class="headerlink" title="2.加载重启docker"></a>2.加载重启docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/docker/">docker</category>
      
      
      <comments>https://leileigwl.github.io/post/d723e266.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>charles 配置</title>
      <link>https://leileigwl.github.io/post/cbd51dd8.html</link>
      <guid>https://leileigwl.github.io/post/cbd51dd8.html</guid>
      <pubDate>Wed, 12 Apr 2023 08:28:01 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;charles-配置&quot;&gt;&lt;a href=&quot;#charles-配置&quot; class=&quot;headerlink&quot; title=&quot;charles 配置&quot;&gt;&lt;/a&gt;charles 配置&lt;/h2&gt;&lt;p&gt;之前文章讲的数据包主要是http协议，大家可以看到数据包并直接显示具体详细的</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="charles-配置"><a href="#charles-配置" class="headerlink" title="charles 配置"></a>charles 配置</h2><p>之前文章讲的数据包主要是http协议，大家可以看到数据包并直接显示具体详细的内容：</p><p><img src="https://pic2.zhimg.com/80/v2-ef77bf2e12263382c3dfc119b419d01d_720w.webp" alt="img"></p><p>但是如果抓到的是https的报文，是没有办法直接显示的，你将看到的是乱码：</p><p><img src="https://pic3.zhimg.com/80/v2-3fdb7d3a46112fb29b5600ed460b1792_720w.webp" alt="img"></p><p>那怎么抓取https的数据报文并正常显示报文内容信息呢？</p><p><strong>第一步：安装证书</strong></p><p>如果需要抓取并分析 Https 协议的数据报文，需要先安装 Charles 的 CA 证书。具体步骤如下：</p><p>1、点击 Charles 的顶部菜单，选择 “Help” –&gt; “SSL Proxying” –&gt; “Install Charles Root Certificate”</p><p>然后输入系统的帐号密码，即可在 KeyChain 看到添加好的证书。如下图所示：</p><p><img src="https://pic2.zhimg.com/80/v2-906257dfd73f56f1c2b9576e75a07b69_720w.webp" alt="img"></p><p><strong>第二步：安装浏览器证书</strong></p><p><img src="https://pic4.zhimg.com/80/v2-0a9a7441348ae30d537445664c1200d7_720w.webp" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-0698aa91cd16909e2781f93cccae66a7_720w.webp" alt="img"></p><p>根据提示信息，需要先下载证书，再安装到浏览器中。</p><p>所以，在浏览器地址栏输入“chls.pro&#x2F;ssl”地址去下载证书，得到的证书如下：</p><p><img src="https://pic2.zhimg.com/80/v2-5d19e72791dd888621cb99887ba753b5_720w.webp" alt="img"></p><p>然后在浏览器中安装这个下载好的证书，此处以chrome为例：</p><p><img src="https://pic3.zhimg.com/80/v2-a8dc0df465574ca8043966019008cf92_720w.webp" alt="img"></p><h3 id="第三步：开启SSL-代理"><a href="#第三步：开启SSL-代理" class="headerlink" title="第三步：开启SSL 代理"></a><strong>第三步：开启SSL 代理</strong></h3><p>点击【Proxy】—&gt; 【SSL proxying Settings】可以打开如下对话框：</p><p><img src="https://pic3.zhimg.com/80/v2-713a3eb5e597304d87d5d719b5eb9986_720w.webp" alt="img"></p><p>勾选“Enable SSL Proxying”，并在Include区域点击“Add”新建地址，在Host和Port区域填上“*”，表示匹配所有，那么就可以抓取所有的https数据报文。</p>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/%E7%88%AC%E8%99%AB/">爬虫</category>
      
      
      <comments>https://leileigwl.github.io/post/cbd51dd8.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
