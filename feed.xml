<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>磊磊の小窝</title>
    <link>https://leileigwl.github.io/</link>
    
    <atom:link href="https://leileigwl.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>小白小白·~</description>
    <pubDate>Mon, 08 May 2023 09:32:28 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>node 环境配置</title>
      <link>https://leileigwl.github.io/post/c4efcc40.html</link>
      <guid>https://leileigwl.github.io/post/c4efcc40.html</guid>
      <pubDate>Mon, 08 May 2023 08:35:56 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#环境</span></span><br><span class="line">D:\configuration\Node</span><br><span class="line">D:\configuration\Node\node_global\node_modules</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 还原默认源：npm config set registry https://registry.npmjs.org/</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#目录</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\configuration\Node\node_cache&quot;</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\configuration\Node\node_cache&quot;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/node/">node</category>
      
      <category domain="https://leileigwl.github.io/tags/npm/">npm</category>
      
      
      <comments>https://leileigwl.github.io/post/c4efcc40.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>linux 登录配置</title>
      <link>https://leileigwl.github.io/post/3b1fdc09.html</link>
      <guid>https://leileigwl.github.io/post/3b1fdc09.html</guid>
      <pubDate>Mon, 08 May 2023 08:35:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;linux登录配置&quot;&gt;&lt;a href=&quot;#linux登录配置&quot; class=&quot;headerlink&quot; title=&quot;linux登录配置&quot;&gt;&lt;/a&gt;linux登录配置&lt;/h2&gt;&lt;h3 id=&quot;登录服务器-ssh&quot;&gt;&lt;a href=&quot;#登录服务器-ssh&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="linux登录配置"><a href="#linux登录配置" class="headerlink" title="linux登录配置"></a>linux登录配置</h2><h3 id="登录服务器-ssh"><a href="#登录服务器-ssh" class="headerlink" title="登录服务器: ssh"></a>登录服务器: ssh</h3><p>ssh，<code>secure shell protocol</code>，以更加安全的方式连接远程服务器。</p><p>把以下 IP 地址替换为你云服务器的公网地址，并提供密码即可登录。</p><p>但记住一个 IP 地址，这是一个反人性的操作，如果你有多个服务器需要管理呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root: 用户名</span></span><br><span class="line"><span class="comment"># 172.16.3.2: 云服务器 IP 地址，需要把 IP 地址换成个人 IP 地址</span></span><br><span class="line">$ ssh root@172.16.3.2</span><br></pre></td></tr></table></figure><h3 id="配置别名快速登录：ssh-config"><a href="#配置别名快速登录：ssh-config" class="headerlink" title="配置别名快速登录：ssh-config"></a>配置别名快速登录：ssh-config</h3><p>在<strong>本地客户端环境 (个人电脑) 上配置 ssh-config</strong>，<strong>没有该文件则新建文件</strong>。对自己管理的服务器起别名，可以更方便地登录多台云服务器，以下是关于 ssh-config 的配置文件</p><blockquote><p>如果 windows 用户需要配置 ssh config，请先安装 <a href="http://www.cygwin.com/install.html">cygwin (opens new window)</a>或者 mingw（git 自带）作为终端。</p></blockquote><ul><li><code>/etc/ssh/ssh_config</code></li><li><code>~/.ssh/config</code></li></ul><p>以下是快速登录山月两个服务器 <code>shanyue</code> 和 <code>training</code> 的配置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 修改 ssh 配置文件 ~/.ssh/config</span><br><span class="line"></span><br><span class="line"># 172.16.3.2 是内网环境，此处仅做示例</span><br><span class="line">Host shanyue</span><br><span class="line">    HostName 172.16.3.2</span><br><span class="line">    User root</span><br><span class="line"></span><br><span class="line"># 请用真实 IP 地址替换以下的 PUBLIC_IP</span><br><span class="line"># 并记得替换 User</span><br><span class="line">Host training</span><br><span class="line">    HostName &lt;PUBLIC_IP&gt;</span><br><span class="line">    User root</span><br></pre></td></tr></table></figure><p>配置成功之后直接 ssh 就可以直接登录，是不很方便？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh shanyue</span><br><span class="line">Last login: Wed Jun 15 20:09:14 2022 from 172.16.3.4</span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">[root@shanyue ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="免密登录：public-key-与-ssh-copy-id"><a href="#免密登录：public-key-与-ssh-copy-id" class="headerlink" title="免密登录：public-key 与 ssh-copy-id"></a>免密登录：public-key 与 ssh-copy-id</h3><p>如何实现远程服务器的免密登录需要两个条件:</p><ol><li>两个文件: 本地环境的 <code>~/.ssh/id_rsa.pub</code> 与 远程服务器的 <code>~/.ssh/authorized_keys</code></li><li>一个动作: 把本地文件 <code>~/.ssh/id_rsa.pub</code> 中内容复制粘贴到远程服务器 <code>~/.ssh/authorized_keys</code></li></ol><blockquote><p>如果本地没有 <code>~/.ssh/id_rsa.pub</code> 文件，则使用命令 <code>ssh-keygen</code> 进行生成。</p></blockquote><blockquote><p><code>~/.ssh/authorized_keys</code> 不能拥有其它用户（group、other）的写权限</p></blockquote><p><strong>总结成一句话，把自己的公钥放在远程服务器的 <code>authorized_keys</code> 中</strong></p><p>简单来说，就是 <code>Ctrl-C</code> 与 <code>Ctrl-V</code> 操作，不过还有一个更加有效率的工具: <code>ssh-copy-id</code>。</p><p>此时一个解决生产力的命令行工具应运而生: <code>ssh-copy-id</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在本地环境进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示你输入密码，成功之后可以直接 ssh 登录，无需密码</span></span><br><span class="line">$ ssh-copy-id shanyue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆成功，无需密码</span></span><br><span class="line">$ ssh shanyue</span><br></pre></td></tr></table></figure><h3 id="安全性-禁用密码登录"><a href="#安全性-禁用密码登录" class="headerlink" title="安全性: 禁用密码登录"></a>安全性: 禁用密码登录</h3><p>为了更大保障服务器的安全性，这里禁止密码登录。修改云服务器的 <code>sshd</code> 配置文件：<code>/etc/ssh/sshd_config</code>。其中 <code>PasswordAuthentication</code> 设置为 <code>no</code>，以此来禁用密码登录。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 编辑服务器端的 /etc/ssh/sshd_config</span><br><span class="line"># 禁用密码登录</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">  PasswordAuthentication no</span><br></pre></td></tr></table></figure><h3 id="保持连接，防止断掉"><a href="#保持连接，防止断掉" class="headerlink" title="保持连接，防止断掉"></a>保持连接，防止断掉</h3><p>除此之外，还可以通过一些配置来更好地优化我们连接服务器时的体验。</p><p>我们可以通过 <code>man ssh_config</code>，找到每一项的详细释义。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 编辑 ~/.ssh/config</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">  ServerAliveInterval 30</span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line">  ServerAliveCountMax 6</span><br><span class="line">  Compression yes</span><br></pre></td></tr></table></figure><p><code>ServerAliveInterval</code> 将能够保持较长时间 <code>ssh</code> 连接，不会使得程序在运行，结果因 ssh 超时而连接断开。</p><ul><li><code>ServerAliveInterval</code>：如果服务器 n 秒没有响应，则 ssh 客户端将发送数据包至 ssh 服务器</li><li><code>ServerAliveCountMax</code>：直到发送了 n 次，服务器还没有响应，则断掉 ssh 连接</li></ul><p>以上配置代表，如果服务器不响应后，服务器在 <code>30 * 6</code> 秒后将断开连接。</p><p>另外也可以通过 <code>ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=6 $HOST</code> 命令传递 ssh_config 配置。</p><hr><h3 id="linux用docker设置代理"><a href="#linux用docker设置代理" class="headerlink" title="linux用docker设置代理"></a>linux用docker设置代理</h3><p>将v2的端口设置好，并在<code> /etc/v2ray/config.json</code>这个文件中配置好导出的客户端模块，最后一键运行这个代码</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d --name v2ray -v /etc/v2ray:/etc/v2ray -p 10890:10890 v2ray/official  v2ray -config=/etc/v2ray/config.json</span></span><br></pre></td></tr></table></figure><hr><h3 id="docker-查看自己是否启动代理"><a href="#docker-查看自己是否启动代理" class="headerlink" title="docker 查看自己是否启动代理"></a>docker 查看自己是否启动代理</h3><ul><li><p>如果是http代理</p><ul><li><pre><code class="shell">curl --proxy http://127.0.0.1:10890 www.google.com<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果是socks代理</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    curl --socks5 http://127.0.0.1:10890 www.google.com</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="修改登录端口"><a href="#修改登录端口" class="headerlink" title="修改登录端口"></a>修改登录端口</h3><ul><li><pre><code class="bash">sudo vim /etc/ssh/sshd_config#用&quot;/&quot;命令找到Port，并进行修改sudo /etc/init.d/ssh restart# 重启 ssh 连接服务！# 修改完一定要记得打开修改过的端口sudo ufw allow Port<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 关闭防火墙</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">sudo ufw allow Port #指定端口进行开启</span><br><span class="line">sudo ufw disable #先关闭防火墙 开启的话是enable</span><br><span class="line">sudo ufw reset #重新设置</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="ubuntu-一键安装"><a href="#ubuntu-一键安装" class="headerlink" title="ubuntu 一键安装"></a>ubuntu 一键安装</h2><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></table></figure><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt intsall npm</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install  docker-compose -y</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/linux/">linux</category>
      
      
      <comments>https://leileigwl.github.io/post/3b1fdc09.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>git 配置</title>
      <link>https://leileigwl.github.io/post/5c006507.html</link>
      <guid>https://leileigwl.github.io/post/5c006507.html</guid>
      <pubDate>Mon, 08 May 2023 08:33:53 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;git-常用命令补充&quot;&gt;&lt;a href=&quot;#git-常用命令补充&quot; class=&quot;headerlink&quot; title=&quot;git 常用命令补充&quot;&gt;&lt;/a&gt;git 常用命令补充&lt;/h2&gt;&lt;h3 id=&quot;1-初始化配置&quot;&gt;&lt;a href=&quot;#1-初始化配置&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="git-常用命令补充"><a href="#git-常用命令补充" class="headerlink" title="git 常用命令补充"></a>git 常用命令补充</h2><h3 id="1-初始化配置"><a href="#1-初始化配置" class="headerlink" title="1.初始化配置"></a>1.初始化配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;***&quot;</span></span><br><span class="line"><span class="comment">#配置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----下面的根据情况配置-----</span></span><br><span class="line"><span class="comment">#不配置下载代码可能会出现SSL安全验证问题，可以关闭SSL安全验证</span></span><br><span class="line">git config --global http.sslVerift <span class="literal">false</span></span><br><span class="line"><span class="comment">#查看当前配置</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="comment">#提交时转换为LF，拉去时转换为CRLF</span></span><br><span class="line">onfig --global core.autocrlf <span class="literal">true</span></span><br><span class="line"><span class="comment">#提交时转换为linux的结尾符，拉取得时候不转换</span></span><br><span class="line">git config --global core.autocrlf input</span><br><span class="line"><span class="comment">#添加远程仓库(ssh地址)</span></span><br><span class="line">git remote add origin</span><br></pre></td></tr></table></figure><h3 id="2-拉取代码"><a href="#2-拉取代码" class="headerlink" title="2.拉取代码"></a>2.拉取代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可能存在子模块，递归拉取</span></span><br><span class="line">git <span class="built_in">clone</span> --recursive <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="comment">#更新代码</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="3-分支操作"><a href="#3-分支操作" class="headerlink" title="3.分支操作"></a>3.分支操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建本地分支（他会根据基于你当前的分支创建新的分支，</span></span><br><span class="line">也就是说当前的你的分支如果有代码的话你创建的新分支是不干净的）</span><br><span class="line">git checkout -b <span class="string">&#x27;目录&#x27;</span>/<span class="string">&#x27;分支名&#x27;</span> </span><br><span class="line"><span class="comment">#查看当前目录下的所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="comment">#切换分支</span></span><br><span class="line">git checkout <span class="string">&#x27;需要切换的峰值名称&#x27;</span></span><br><span class="line"><span class="comment">#删除分支 如果需要删除拥有未提交代码的分支需要把-d改成-D</span></span><br><span class="line">git branch -d <span class="string">&#x27;删除分支名称&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4代码提交"><a href="#4代码提交" class="headerlink" title="4代码提交"></a>4代码提交</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提交代码到本地分支</span></span><br><span class="line"><span class="comment">#需要先进行git add . 才能进行下面的操作</span></span><br><span class="line">git add.</span><br><span class="line">git commit -m <span class="string">&#x27;分支名称&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示提交内容</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="comment">#推送代码到远程git仓库，再推送的时候会在远程仓库创建一个git分支，然后在远程仓库发起合并请求.</span></span><br><span class="line"><span class="comment">#后续的每次推送都会远程仓库创建的那个对应分支上面</span></span><br><span class="line">git push </span><br><span class="line"><span class="comment">#强制推送，会覆盖之前的对应分支提交的代码</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure><h3 id="5-配置代理"><a href="#5-配置代理" class="headerlink" title="5.配置代理"></a>5.配置代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = xxxx</span><br><span class="line">email = xxxxx@xxxx</span><br><span class="line">[http <span class="string">&quot;https://github.com&quot;</span>]</span><br><span class="line">proxy = http://127.0.0.1:7890</span><br><span class="line">[http <span class="string">&quot;http://github.com&quot;</span>]</span><br><span class="line">proxy = http://127.0.0.1:7890</span><br><span class="line">[credential <span class="string">&quot;https://gitee.com&quot;</span>]</span><br><span class="line">provider = generic</span><br><span class="line">[http]</span><br><span class="line">sslverify = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="6-gitignore规则"><a href="#6-gitignore规则" class="headerlink" title="6. gitignore规则"></a>6. <code>gitignore</code>规则</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;#&#x27;</span>作为注释</span><br><span class="line"><span class="string">&#x27;/&#x27;</span>开头表示目录</span><br><span class="line"><span class="string">&#x27;*&#x27;</span>通配符</span><br><span class="line"><span class="string">&#x27;?&#x27;</span>匹配单个字符</span><br><span class="line"><span class="string">&#x27;[]&#x27;</span>包含单个字符的匹配规则</span><br><span class="line"><span class="string">&#x27;!&#x27;</span>忽略目录</span><br></pre></td></tr></table></figure><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*.txt  ，*.xls  表示过滤某种类型的文件</span><br><span class="line">target/ ：表示过滤这个文件夹下的所有文件</span><br><span class="line">/test/a.txt ，/test/b.xls  表示指定过滤某个文件下具体文件</span><br><span class="line">!*.java , !/dir/test/     !开头表示不过滤</span><br><span class="line">*.[ab]    支持通配符：过滤所有以.a或者.b为扩展名的文件</span><br><span class="line">/test  仅仅忽略项目根目录下的 <span class="built_in">test</span> 文件，不包括 child/test等非根目录的<span class="built_in">test</span>目录</span><br></pre></td></tr></table></figure><h4 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h4><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号 （[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不 忽略。</li><li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件 （默认文件或目录都忽略）。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">.txt      <span class="comment">#忽略所有 .txt结尾的文件</span></span><br><span class="line">!lib.txt   <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp      <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/     <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt  <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/git/">git</category>
      
      
      <comments>https://leileigwl.github.io/post/5c006507.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>docker 配置</title>
      <link>https://leileigwl.github.io/post/d723e266.html</link>
      <guid>https://leileigwl.github.io/post/d723e266.html</guid>
      <pubDate>Mon, 08 May 2023 08:32:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h2&gt;&lt;h3 id=&quot;docker设置开机自动重启并重新运行容器&quot;&gt;&lt;a href=&quot;#docker设置开机自动重启并重</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="docker设置开机自动重启并重新运行容器"><a href="#docker设置开机自动重启并重新运行容器" class="headerlink" title="docker设置开机自动重启并重新运行容器"></a>docker设置开机自动重启并重新运行容器</h3><ul><li><p>设置docker服务自动重启：</p><ul><li><pre><code class="shell">systemctl enable docker.service<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    docker run --restart=always</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>如果已经启动了</p><ul><li><pre><code class="shell">docker update --restart=always<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 重要的restart参数</span><br><span class="line"></span><br><span class="line">  - no - 容器退出时，不重启容器；</span><br><span class="line">  - on-failure - 只有在非0状态退出时才从新启动容器；如果容器由于错误而退出，则将其重新启动，非零退出代码表示错误</span><br><span class="line">  - unless-stopped - 重新启动容器，除非明确停止容器或者 Docker 被停止或重新启动</span><br><span class="line">  - always -只要容器停止了，就重新启动</span><br><span class="line"></span><br><span class="line">### docker-compose 启动</span><br><span class="line"></span><br><span class="line">#### 启动命令</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">sudo docker-compose up -d #前提需要有docker-compose.yml 文件</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="docker镜像源设置"><a href="#docker镜像源设置" class="headerlink" title="docker镜像源设置"></a>docker镜像源设置</h3><h4 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h4><ul><li>创建或修改 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件，修改为如下形式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-加载重启docker"><a href="#2-加载重启docker" class="headerlink" title="2.加载重启docker"></a>2.加载重启docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/docker/">docker</category>
      
      
      <comments>https://leileigwl.github.io/post/d723e266.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>charles 配置</title>
      <link>https://leileigwl.github.io/post/cbd51dd8.html</link>
      <guid>https://leileigwl.github.io/post/cbd51dd8.html</guid>
      <pubDate>Wed, 12 Apr 2023 08:28:01 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;charles-配置&quot;&gt;&lt;a href=&quot;#charles-配置&quot; class=&quot;headerlink&quot; title=&quot;charles 配置&quot;&gt;&lt;/a&gt;charles 配置&lt;/h2&gt;&lt;p&gt;之前文章讲的数据包主要是http协议，大家可以看到数据包并直接显示具体详细的</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="charles-配置"><a href="#charles-配置" class="headerlink" title="charles 配置"></a>charles 配置</h2><p>之前文章讲的数据包主要是http协议，大家可以看到数据包并直接显示具体详细的内容：</p><p><img src="https://pic2.zhimg.com/80/v2-ef77bf2e12263382c3dfc119b419d01d_720w.webp" alt="img"></p><p>但是如果抓到的是https的报文，是没有办法直接显示的，你将看到的是乱码：</p><p><img src="https://pic3.zhimg.com/80/v2-3fdb7d3a46112fb29b5600ed460b1792_720w.webp" alt="img"></p><p>那怎么抓取https的数据报文并正常显示报文内容信息呢？</p><p><strong>第一步：安装证书</strong></p><p>如果需要抓取并分析 Https 协议的数据报文，需要先安装 Charles 的 CA 证书。具体步骤如下：</p><p>1、点击 Charles 的顶部菜单，选择 “Help” –&gt; “SSL Proxying” –&gt; “Install Charles Root Certificate”</p><p>然后输入系统的帐号密码，即可在 KeyChain 看到添加好的证书。如下图所示：</p><p><img src="https://pic2.zhimg.com/80/v2-906257dfd73f56f1c2b9576e75a07b69_720w.webp" alt="img"></p><p><strong>第二步：安装浏览器证书</strong></p><p><img src="https://pic4.zhimg.com/80/v2-0a9a7441348ae30d537445664c1200d7_720w.webp" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-0698aa91cd16909e2781f93cccae66a7_720w.webp" alt="img"></p><p>根据提示信息，需要先下载证书，再安装到浏览器中。</p><p>所以，在浏览器地址栏输入“chls.pro&#x2F;ssl”地址去下载证书，得到的证书如下：</p><p><img src="https://pic2.zhimg.com/80/v2-5d19e72791dd888621cb99887ba753b5_720w.webp" alt="img"></p><p>然后在浏览器中安装这个下载好的证书，此处以chrome为例：</p><p><img src="https://pic3.zhimg.com/80/v2-a8dc0df465574ca8043966019008cf92_720w.webp" alt="img"></p><h3 id="第三步：开启SSL-代理"><a href="#第三步：开启SSL-代理" class="headerlink" title="第三步：开启SSL 代理"></a><strong>第三步：开启SSL 代理</strong></h3><p>点击【Proxy】—&gt; 【SSL proxying Settings】可以打开如下对话框：</p><p><img src="https://pic3.zhimg.com/80/v2-713a3eb5e597304d87d5d719b5eb9986_720w.webp" alt="img"></p><p>勾选“Enable SSL Proxying”，并在Include区域点击“Add”新建地址，在Host和Port区域填上“*”，表示匹配所有，那么就可以抓取所有的https数据报文。</p>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/%E7%88%AC%E8%99%AB/">爬虫</category>
      
      
      <comments>https://leileigwl.github.io/post/cbd51dd8.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python经典书籍</title>
      <link>https://leileigwl.github.io/post/16fc56f8.html</link>
      <guid>https://leileigwl.github.io/post/16fc56f8.html</guid>
      <pubDate>Wed, 12 Apr 2023 00:17:35 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Python参考书籍&quot;&gt;&lt;a href=&quot;#Python参考书籍&quot; class=&quot;headerlink&quot; title=&quot;Python参考书籍&quot;&gt;&lt;/a&gt;Python参考书籍&lt;/h2&gt;&lt;h3 id=&quot;入门读物&quot;&gt;&lt;a href=&quot;#入门读物&quot; class=&quot;head</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Python参考书籍"><a href="#Python参考书籍" class="headerlink" title="Python参考书籍"></a>Python参考书籍</h2><h3 id="入门读物"><a href="#入门读物" class="headerlink" title="入门读物"></a>入门读物</h3><ol><li>《Python基础教程》（<em>Beginning Python From Novice to Professional</em>）</li><li>《Python学习手册》（<em>Learning Python</em>）</li><li>《Python编程》（<em>Programming Python</em>）</li><li>《Python Cookbook》</li><li>《Python程序设计》（<em>Python Programming: An Introduction to Computer Science</em>）</li><li>《Modern Python Cookbook》</li></ol><h3 id="进阶读物"><a href="#进阶读物" class="headerlink" title="进阶读物"></a>进阶读物</h3><ol><li>《Python核心编程》（<em>Core Python Applications Programming</em>）</li><li>《流畅的Python》（<em>Fluent Python</em>）</li><li>《Effective Python：编写高质量Python代码的59个有效方法》（<em>Effective Python 59 Specific Ways to Write Better Python</em>）</li><li>《Python设计模式》（<em>Learning Python Design Patterns</em>）</li><li>《Python高级编程》（<em>Expert Python Programming</em>）</li><li>《Python性能分析与优化》（<em>Mastering Python High Performance</em>）</li></ol><h3 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h3><ol><li>《Django基础教程》（<em>Tango with Django</em>）</li><li>《轻量级Django》（<em>Lightweight Django</em>）</li><li>《Python Web开发：测试驱动方法》（<em>Test-Driven Development with Python</em>）</li><li>《Web Development with Django Cookbook》</li><li>《Test-Driven Development with Django》</li><li>《Django Project Blueprints 》</li><li>《Flask Web开发：基于Python的Web应用开发实战》（<em>Flask Web Development: Developing Web Applications with Python</em>）</li><li>《深入理解Flask》（<em>Mastering Flask</em>）</li></ol><h3 id="爬虫开发"><a href="#爬虫开发" class="headerlink" title="爬虫开发"></a>爬虫开发</h3><ol><li>《用Python写网络爬虫》（<em>Web Scraping with Python</em>）</li><li>《精通Python爬虫框架Scrapy》（<em>Learning Scrapy</em>）</li><li>《Python网络数据采集》（<em>Web Scraping with Python</em>）</li><li>《Python爬虫开发与项目实战》</li><li>《Python 3网络爬虫开发实战》</li></ol><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ol><li>《利用Python进行数据分析》（<em>Python for Data Analysis</em>）</li><li>《Python数据科学手册》（<em>Python Data Science Handbook</em>）</li><li>《Python金融大数据分析》（<em>Python for Finance</em>）</li><li>《Python数据可视化编程实战》（<em>Python Data Visualization Cookbook</em>）</li><li>《Python数据处理》（<em>Data Wrangling with Python</em>）</li></ol><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><ol><li>《Python机器学习基础教程》（<em>Introduction to Machine Learning with Python</em>）</li><li>《Python机器学习实践指南》（<em>Python Machine Learning Blueprints</em>）</li><li>《Python Machine Learning Case Studies》</li><li>《Python机器学习实践：测试驱动的开发方法》（<em>Thoughtful Machine Learning with Python A Test Driven Approach</em>）</li><li>《Python机器学习经典实例》（<em>Python Machine Learning Cookbook</em>）</li><li>《TensorFlow：实战Google深度学习框架》</li></ol>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/python/">python</category>
      
      <category domain="https://leileigwl.github.io/tags/%E4%B9%A6%E7%B1%8D/">书籍</category>
      
      
      <comments>https://leileigwl.github.io/post/16fc56f8.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>代理ip测速</title>
      <link>https://leileigwl.github.io/post/ae4f18a7.html</link>
      <guid>https://leileigwl.github.io/post/ae4f18a7.html</guid>
      <pubDate>Tue, 11 Apr 2023 11:28:38 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;SPEEDTEST-https-www-speedtest-net&quot;&gt;&lt;a href=&quot;#SPEEDTEST-https-www-speedtest-net&quot; class=&quot;headerlink&quot; title=&quot;SPEEDTEST : https://www.sp</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="SPEEDTEST-https-www-speedtest-net"><a href="#SPEEDTEST-https-www-speedtest-net" class="headerlink" title="SPEEDTEST : https://www.speedtest.net/"></a>SPEEDTEST : <a href="https://www.speedtest.net/">https://www.speedtest.net/</a></h3><ul><li><p>请务必认准 .net 域名，不要使用 .cn 域名的来测试。</p></li><li><p>请确认网页上显示的测试服务器的位置在中国大陆以外。如果仍显示国内地址，请开启全局代理模式。</p></li><li><p>点击网页上的 GO 来进行测试。</p></li><li><p>我自己常用的是无广告版本的站点：</p><p>① <a href="http://mybroadbandspeed.speedtestcustom.com/">http://mybroadbandspeed.speedtestcustom.com/</a></p><p>② <a href="http://aaaaaa.speedtestcustom.com/">http://aaaaaa.speedtestcustom.com/</a></p><p>③ <a href="http://rixcloud.speedtestcustom.com/">http://rixcloud.speedtestcustom.com/</a></p><p>④ <a href="http://cordcloud.speedtestcustom.com/">http://cordcloud.speedtestcustom.com/</a></p></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/speedtest/">speedtest</category>
      
      
      <comments>https://leileigwl.github.io/post/ae4f18a7.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo常用快捷键</title>
      <link>https://leileigwl.github.io/post/9e05c39.html</link>
      <guid>https://leileigwl.github.io/post/9e05c39.html</guid>
      <pubDate>Tue, 11 Apr 2023 11:26:11 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo g (生成)</span><br><span class="line">hexo s/server (开始本地预览服务)</span><br><span class="line">hexo d/deploy (发布上传)</span><br><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo d (组合生成发布命令)</span><br><span class="line">hexo clean &amp;&amp; hexo g&amp;&amp;gulp&amp;&amp; hexo deploy (！最常用的组合命令，生成，压缩并发布)</span><br><span class="line">hexo n/new &quot;postName&quot; (新建文章)</span><br><span class="line">hexo new page &quot;pageName&quot; (新建页面)</span><br><span class="line">hexo g/generate （生成静态页面至public目录）</span><br><span class="line">hexo help (查看帮助)</span><br><span class="line">hexo version (查看Hexo版本)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://leileigwl.github.io/post/9e05c39.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://leileigwl.github.io/post/4a17b156.html</link>
      <guid>https://leileigwl.github.io/post/4a17b156.html</guid>
      <pubDate>Thu, 23 Mar 2023 11:48:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://leileigwl.github.io/post/4a17b156.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript 加密解密模块</title>
      <link>https://leileigwl.github.io/post/c4626f5f.html</link>
      <guid>https://leileigwl.github.io/post/c4626f5f.html</guid>
      <pubDate>Tue, 21 Mar 2023 08:49:10 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;常见加密算法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对称加密（加密解密密钥相同）：DES、3DES、AES、RC4、Rabbit&lt;/li&gt;
&lt;li&gt;非对称加密（区分公钥和私钥）：RSA、DSA、ECC&lt;/li&gt;
&lt;li&gt;消息摘要算法&amp;#x2F;签名算法：MD5、SHA、HMAC、PB</description>
        
      
      
      
      <content:encoded><![CDATA[<p>常见加密算法：</p><ol><li>对称加密（加密解密密钥相同）：DES、3DES、AES、RC4、Rabbit</li><li>非对称加密（区分公钥和私钥）：RSA、DSA、ECC</li><li>消息摘要算法&#x2F;签名算法：MD5、SHA、HMAC、PBKDF2</li></ol><p>常见编码算法：Base64</p><h3 id="JavaScript-加密解密模块"><a href="#JavaScript-加密解密模块" class="headerlink" title="JavaScript 加密解密模块"></a>JavaScript 加密解密模块</h3><h4 id="Crypto-JS"><a href="#Crypto-JS" class="headerlink" title="Crypto-JS"></a>Crypto-JS</h4><p>Crypto-JS 支持 MD5、SHA、RIPEMD-160、HMAC、PBKDF2、AES、DES、3DES（Triple DES）、Rabbit、RC4 等，<strong>不支持 RSA、ECC</strong>，是应用比较广的加密模块，使用命令 <code>npm install crypto-js</code> 安装。</p><p>参考资料：</p><ul><li>Crypto-JS 文档：<a href="https://cryptojs.gitbook.io/docs/">https://cryptojs.gitbook.io/docs/</a></li><li>Crypto-JS Github：<a href="https://github.com/brix/crypto-js">https://github.com/brix/crypto-js</a></li></ul><h4 id="Node-RSA"><a href="#Node-RSA" class="headerlink" title="Node-RSA"></a>Node-RSA</h4><p>Node-RSA 对  RSA 算法提供了支持，使用命令 <code>npm install node-rsa</code> 安装。</p><p>参考资料：Node-RSA Github：<a href="https://github.com/rzcoder/node-rsa">https://github.com/rzcoder/node-rsa</a></p><h4 id="JSEncrypt"><a href="#JSEncrypt" class="headerlink" title="JSEncrypt"></a>JSEncrypt</h4><p>参考资料：JSEncrypt 对  RSA 算法提供了更加全面的支持，使用命令 <code>npm install jsencrypt</code> 安装。</p><ul><li>JSEncrypt 文档：<a href="http://travistidwell.com/jsencrypt/">http://travistidwell.com/jsencrypt/</a></li><li>JSEncrypt Github：<a href="https://github.com/travist/jsencrypt">https://github.com/travist/jsencrypt</a></li></ul><h3 id="Python-加密解密库"><a href="#Python-加密解密库" class="headerlink" title="Python 加密解密库"></a>Python 加密解密库</h3><h4 id="Cryptodome-amp-Crypto"><a href="#Cryptodome-amp-Crypto" class="headerlink" title="Cryptodome &amp; Crypto"></a>Cryptodome &amp; Crypto</h4><p>在 Python 中有很多算法是通过第三方库 Cryptodome 或者 Crypto 来实现的，Cryptodome 几乎是 Crypto 的替代品，Crypto 已经停止更新好多年了，有很多未知错误，所以<strong>不建议安装 Crypto ！</strong></p><p>Cryptodome 支持几乎所有主流加密算法，包括 MD5、SHA、BLAKE2b、BLAKE2s、HMAC、PBKDF2、AES、DES、3DES（Triple DES）、ECC、RSA、RC4 等。</p><p>Cryptodome 使用命令 <code>pip install pycryptodome</code> 进行安装，Crypto 使用命令 <code>pip install pycrypto</code> 进行安装。</p><p>参考资料：</p><ul><li>Crypto 库：<a href="https://www.dlitz.net/software/pycrypto/">https://www.dlitz.net/software/pycrypto/</a></li><li>Cryptodome 库：<a href="https://www.pycryptodome.org/en/latest/">https://www.pycryptodome.org/en/latest/</a></li></ul><h4 id="Hashlib"><a href="#Hashlib" class="headerlink" title="Hashlib"></a>Hashlib</h4><p>Python 的标准库 hashlib 提供了常见的摘要算法，如 MD5，SHA、BLAKE2b、BLAKE2s 等。</p><p>参考资料：</p><ul><li>hashlib 库：<a href="https://docs.python.org/3/library/hashlib.html">https://docs.python.org/3/library/hashlib.html</a></li><li>廖雪峰 hashlib：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017686752491744">https://www.liaoxuefeng.com/wiki/1016959663602400/1017686752491744</a></li></ul><h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p>Python 的标准库 hmac 对 HMAC 算法提供了支持。</p><p>参考资料：</p><ul><li>hmac 库：<a href="https://docs.python.org/3/library/hmac.html">https://docs.python.org/3/library/hmac.html</a></li><li>廖雪峰 hmac：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1183198304823296">https://www.liaoxuefeng.com/wiki/1016959663602400/1183198304823296</a></li></ul><h4 id="pyDes"><a href="#pyDes" class="headerlink" title="pyDes"></a>pyDes</h4><p>Python 的第三方库 pyDes 对 DES 算法提供了支持。使用命令 <code>pip install pydes</code> 进行安装。</p><p>参考资料：pyDes 库：<a href="https://github.com/twhiteman/pyDes">https://github.com/twhiteman/pyDes</a></p><h4 id="ESA"><a href="#ESA" class="headerlink" title="ESA"></a>ESA</h4><p>Python 的第三方库 rsa 对 RSA 算法提供了支持。使用命令 <code>pip install rsa</code> 进行安装。</p><p>参考资料：rsa 库：<a href="https://stuvel.eu/python-rsa-doc/">https://stuvel.eu/python-rsa-doc/</a></p><h2 id="加密解密基本参数"><a href="#加密解密基本参数" class="headerlink" title="加密解密基本参数"></a>加密解密基本参数</h2><p>在一些对称和非对称加密算法中，经常会用到以下三个参数：初始向量 iv、加密模式 mode、填充方式 padding，先介绍一下这三个参数的含义和作用：</p><h3 id="初始向量-iv"><a href="#初始向量-iv" class="headerlink" title="初始向量 iv"></a>初始向量 iv</h3><p>在密码学中，初始向量（initialization vector，缩写为 iv），又称初始变数（starting variable，缩写为 sv），与密钥结合使用，作为加密数据的手段，它是一个固定长度的值，iv 的长度取决于加密方法，通常与使用的加密密钥或密码块的长度相当，一般在使用过程中会要求它是随机数或拟随机数，使用随机数产生的初始向量才能达到语义安全，让攻击者难以对原文一致且使用同一把密钥生成的密文进行破解。</p><p>参考资料：维基百科：<a href="https://en.wikipedia.org/wiki/Initialization_vector">https://en.wikipedia.org/wiki/Initialization_vector</a></p><h3 id="加密模式-mode"><a href="#加密模式-mode" class="headerlink" title="加密模式 mode"></a>加密模式 mode</h3><p>目前流行的加密和数字认证算法，都是采用块加密方式，就是将需要加密的明文分成固定大小的数据块，然后对其执行密码算法，得到密文。数据块的大小通常采用跟密钥一样的长度。加密模式在加密算法的基础上发展出来，同时也可以独立于加密算法而存在，加密模式定义了怎样通过重复利用加密算法将大于一个数据块大小的明文转化为密文，描述了加密每一数据块的过程。目前利用较多的加密模式有以下几种：</p><ul><li><strong>ECB：Electronic Code Book（电子码本模式）</strong>，是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。</li><li><strong>CBC：Cipher Block Chaining（密码块链接模式）</strong>，是一种循环模式，前一个分组的密文和当前分组的明文异或操作后再加密，这样做的目的是增强破解难度。</li><li><strong>PCBC：Propagating Cipher Block Chaining（填充密码块链接模式）</strong>，也称为明文密码块链接模式（Plaintext Cipher Block Chaining），是一种可以使密文中的微小更改在解密时导致明文大部分错误的模式，并在加密的时候也具有同样的特性。</li><li><strong>CFB：Cipher Feedback（密码反馈模式）</strong>，可以将块密码变为自同步的流密码，类似于 CBC，CFB 的解密过程几乎就是颠倒的 CBC 的加密过程。</li><li><strong>OFB：Output Feedback（输出反馈模式）</strong>，可以将块密码变成同步的流密码，它产生密钥流的块，然后将其与明文块进行异或，得到密文。与其它流密码一样，密文中一个位的翻转会使明文中同样位置的位也产生翻转。</li><li><strong>CTR：Counter mode（计数器模式）</strong>，也被称为 ICM 模式（Integer Counter Mode，整数计数模式）和 SIC 模式（Segmented Integer Counter），在 CTR 模式中，有一个自增的算子，这个算子用密钥加密之后的输出和明文异或的结果得到密文，相当于一次一密。这种加密方式简单快速，安全可靠，而且可以并行加密，但是在计算器不能维持很长的情况下，密钥只能使用一次。</li></ul><p>参考资料：维基百科：<a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation</a></p><h3 id="填充方式-padding"><a href="#填充方式-padding" class="headerlink" title="填充方式 padding"></a>填充方式 padding</h3><p>块密码只能对确定长度的数据块进行处理，而消息的长度通常是可变的。因此部分模式最后一块数据在加密前需要进行填充。有数种填充方法，其中最简单的一种是在明文的最后填充空字符以使其长度为块长度的整数倍。常见填充方式有以下几种：</p><ul><li><strong>PKCS7</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为需要填充的字节长度值。</li><li><strong>PKCS5</strong>：PKCS5 作为 PKCS7 的子集算法，概念上没有什么区别，只是在 blockSize 上固定为 8 bytes，即块大小固定为 8 字节。</li><li><strong>ZeroPadding</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为 0 。</li><li><strong>ISO10126</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充随机数值。</li><li><strong>ANSIX923</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充数字零。</li></ul><p>参考资料：</p><ul><li>维基百科：<a href="https://en.wikipedia.org/wiki/Padding_(cryptography)">https://en.wikipedia.org/wiki/Padding_(cryptography)</a></li><li>PKCS7&#x2F;PKCS5 填充算法：<a href="https://segmentfault.com/a/1190000019793040">https://segmentfault.com/a/1190000019793040</a></li></ul><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>简介：Base64 是一种用 64 个字符来表示任意二进制数据的方法。</p><p>参考资料：</p><ul><li>Base64 百度百科：<a href="https://baike.baidu.com/item/base64/8545775">https://baike.baidu.com/item/base64/8545775</a></li><li>Base64 维基百科：<a href="https://en.wikipedia.org/wiki/Base64">https://en.wikipedia.org/wiki/Base64</a></li></ul><h3 id="JavaScript-实现"><a href="#JavaScript-实现" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function base64Encode() &#123;</span><br><span class="line">    var srcs = CryptoJS.enc.Utf8.parse(text);</span><br><span class="line">    var encodeData = CryptoJS.enc.Base64.stringify(srcs);</span><br><span class="line">    return encodeData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function base64Decode() &#123;</span><br><span class="line">    var srcs = CryptoJS.enc.Base64.parse(encodeData);</span><br><span class="line">    var decodeData = srcs.toString(CryptoJS.enc.Utf8);</span><br><span class="line">    return decodeData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;</span><br><span class="line"></span><br><span class="line">var encodeData = base64Encode()</span><br><span class="line">var decodeData = base64Decode()</span><br><span class="line"></span><br><span class="line">console.log(&quot;Base64 编码: &quot;, encodeData)</span><br><span class="line">console.log(&quot;Base64 解码: &quot;, decodeData)</span><br><span class="line"></span><br><span class="line">// Base64 编码:  SSBsb3ZlIFB5dGhvbiE=</span><br><span class="line">// Base64 解码:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def base64_encode(text):</span><br><span class="line">    encode_data = base64.b64encode(text.encode())</span><br><span class="line">    return encode_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def base64_decode(encode_data):</span><br><span class="line">    decode_data = base64.b64decode(encode_data)</span><br><span class="line">    return decode_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    text = &#x27;I love Python!&#x27;</span><br><span class="line">    encode_data = base64_encode(text)</span><br><span class="line">    decode_data = base64_decode(encode_data)</span><br><span class="line">    print(&#x27;Base64 编码：&#x27;, encode_data)</span><br><span class="line">    print(&#x27;Base64 解码：&#x27;, decode_data)</span><br><span class="line"></span><br><span class="line"># Base64 编码：b&#x27;SSBsb3ZlIFB5dGhvbiE=&#x27;</span><br><span class="line"># Base64 解码：b&#x27;I love Python!&#x27;</span><br></pre></td></tr></table></figure><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>简介：全称 MD5 消息摘要算法（英文名称：MD5 Message-Digest Algorithm），又称哈希算法、散列算法，由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于 1992 年作为 RFC 1321 被公布，用以取代 MD4 算法。摘要算法是单向加密的，也就是说明文通过摘要算法加密之后，是不能解密的。摘要算法的第二个特点密文是固定长度的，它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。之所以叫摘要算法，它的算法就是提取明文重要的特征。所以，两个不同的明文，使用了摘要算法之后，有可能他们的密文是一样的，不过这个概率非常的低。</p><p>参考资料：</p><ul><li>RFC 1321：<a href="https://datatracker.ietf.org/doc/rfc1321/">https://datatracker.ietf.org/doc/rfc1321/</a></li><li>MD5 维基百科：<a href="https://en.wikipedia.org/wiki/MD5">https://en.wikipedia.org/wiki/MD5</a></li></ul><h3 id="JavaScript-实现-1"><a href="#JavaScript-实现-1" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function MD5Test() &#123;</span><br><span class="line">    var text = &quot;I love python!&quot;</span><br><span class="line">    return CryptoJS.MD5(text).toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(MD5Test())  // 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br></pre></td></tr></table></figure><h3 id="Python-实现-1"><a href="#Python-实现-1" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5_test1():</span><br><span class="line">    md5 = hashlib.new(&#x27;md5&#x27;, &#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5_test2():</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(&#x27;I love &#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    md5.update(&#x27;python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    md5_test1()  # 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br><span class="line">    md5_test2()  # 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br></pre></td></tr></table></figure><h2 id="PBKDF2"><a href="#PBKDF2" class="headerlink" title="PBKDF2"></a>PBKDF2</h2><p>简介：英文名称：Password-Based Key Derivation Function 2，PBKDF2 是 RSA 实验室的公钥加密标准（PKCS）系列的一部分，2017 年发布的 RFC 8018 （PKCS #5 v2.1）推荐使用 PBKDF2 进行密码散列。PBKDF2 将伪随机函数（例如 HMAC），把明文和一个盐值（salt）作为输入参数，然后进行重复运算，并最终产生密钥，如果重复的次数足够大，破解的成本就会变得很高。</p><p>参考资料：</p><ul><li>RFC 8018：<a href="https://datatracker.ietf.org/doc/rfc8018/">https://datatracker.ietf.org/doc/rfc8018/</a></li><li>PBKDF2 维基百科：<a href="https://en.wikipedia.org/wiki/PBKDF2">https://en.wikipedia.org/wiki/PBKDF2</a></li></ul><h3 id="JavaScript-实现-2"><a href="#JavaScript-实现-2" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function pbkdf2Encrypt() &#123;</span><br><span class="line">    var text = &quot;I love Python!&quot;</span><br><span class="line">    var salt = &quot;43215678&quot;</span><br><span class="line">    // key 长度 128，10 次重复运算</span><br><span class="line">    var encryptedData = CryptoJS.PBKDF2(text, salt, &#123;keySize: 128/32,iterations: 10&#125;);</span><br><span class="line">    return encryptedData.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(pbkdf2Encrypt())  // 7fee6e8350cfe96314c76aaa6e853a50</span><br></pre></td></tr></table></figure><h3 id="Python-实现-2"><a href="#Python-实现-2" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">from Cryptodome.Hash import SHA1</span><br><span class="line">from Cryptodome.Protocol.KDF import PBKDF2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = &#x27;I love Python!&#x27;</span><br><span class="line">salt = b&#x27;43215678&#x27;</span><br><span class="line">result = PBKDF2(text,  salt, count=10, hmac_hash_module=SHA1)</span><br><span class="line">result = binascii.hexlify(result)</span><br><span class="line">print(result)</span><br><span class="line"># b&#x27;7fee6e8350cfe96314c76aaa6e853a50&#x27;</span><br></pre></td></tr></table></figure><h2 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h2><p>简介：全称安全哈希算法（英文名称：Secure Hash Algorithm），由美国国家安全局（NSA）所设计，主要适用于数字签名标准（Digital Signature Standard DSS）里面定义的数字签名算法（Digital Signature Algorithm DSA），SHA 通常指 SHA 家族的五个算法，分别是 SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，后四者有时并称为 SHA-2，SHA 是比 MD5 更安全一点的摘要算法，MD5 的密文是 32 位，而 SHA-1 是 40 位，版本越强，密文越长，代价是速度越慢。</p><p>参考资料：</p><ul><li>RFC 3174：<a href="https://datatracker.ietf.org/doc/rfc3174/">https://datatracker.ietf.org/doc/rfc3174/</a></li><li>SHA 维基百科：<a href="https://en.wikipedia.org/wiki/Secure_Hash_Algorithms">https://en.wikipedia.org/wiki/Secure_Hash_Algorithms</a></li></ul><h3 id="JavaScript-实现-3"><a href="#JavaScript-实现-3" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function SHA1Encrypt() &#123;</span><br><span class="line">    var text = &quot;I love python!&quot;</span><br><span class="line">    return CryptoJS.SHA1(text).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(SHA1Encrypt())  // 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br></pre></td></tr></table></figure><h3 id="Python-实现-3"><a href="#Python-实现-3" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sha1_test1():</span><br><span class="line">    sha1 = hashlib.new(&#x27;sha1&#x27;, &#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sha1_test2():</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(&#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    sha1_test1()  # 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br><span class="line">    sha1_test2()  # 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br></pre></td></tr></table></figure><h2 id="HMAC-1"><a href="#HMAC-1" class="headerlink" title="HMAC"></a>HMAC</h2><p>简介：全称散列消息认证码、密钥相关的哈希运算消息认证码（英文名称：Hash-based Message Authentication Code 或者 Keyed-hash Message Authentication Code），于 1996 年提出，1997 年作为 RFC 2104 被公布，HMAC 加密算法是一种安全的基于加密 Hash 函数和共享密钥的消息认证协议，它要求通信双方共享密钥 key、约定算法、对报文进行 Hash 运算，形成固定长度的认证码。通信双方通过认证码的校验来确定报文的合法性。</p><p>参考资料：</p><ul><li>RFC 2104：<a href="https://datatracker.ietf.org/doc/rfc2104/">https://datatracker.ietf.org/doc/rfc2104/</a></li><li>HMAC 维基百科：<a href="https://en.wikipedia.org/wiki/HMAC">https://en.wikipedia.org/wiki/HMAC</a></li></ul><h3 id="JavaScript-实现-4"><a href="#JavaScript-实现-4" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function HMACEncrypt() &#123;</span><br><span class="line">    var text = &quot;I love python!&quot;</span><br><span class="line">    var key = &quot;secret&quot;</span><br><span class="line">    return CryptoJS.HmacMD5(text, key).toString();</span><br><span class="line">    // return CryptoJS.HmacSHA1(text, key).toString();</span><br><span class="line">    // return CryptoJS.HmacSHA256(text, key).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(HMACEncrypt())</span><br></pre></td></tr></table></figure><h3 id="Python-实现-4"><a href="#Python-实现-4" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import hmac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hmac_test1():</span><br><span class="line">    message = b&#x27;I love python!&#x27;</span><br><span class="line">    key = b&#x27;secret&#x27;</span><br><span class="line">    md5 = hmac.new(key, message, digestmod=&#x27;MD5&#x27;)</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hmac_test2():</span><br><span class="line">    key = &#x27;secret&#x27;.encode(&#x27;utf8&#x27;)</span><br><span class="line">    sha1 = hmac.new(key, digestmod=&#x27;sha1&#x27;)</span><br><span class="line">    sha1.update(&#x27;I love &#x27;.encode(&#x27;utf8&#x27;))</span><br><span class="line">    sha1.update(&#x27;Python!&#x27;.encode(&#x27;utf8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    hmac_test1()  # 9c503a1f852edcc3526ea56976c38edf</span><br><span class="line">    hmac_test2()  # 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span><br></pre></td></tr></table></figure><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><p>简介：全称数据加密标准（英文名称：Data Encryption Standard），加密与解密使用同一密钥，属于对称加密算法，1977 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），DES 是一个分组加密算法，使用 56 位的密钥（一般认为密钥是 64 位，但是密钥的每个第 8 位设置为奇偶校验位，所以实际上有效位只有 56 位），由于 56 位密钥长度相对较短，所以 DES 是不安全的，现在基本上已被更高级的加密标准 AES 取代。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 4772：<a href="https://datatracker.ietf.org/doc/rfc4772/">https://datatracker.ietf.org/doc/rfc4772/</a></li><li>DES 维基百科：<a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard">https://en.wikipedia.org/wiki/Data_Encryption_Standard</a></li></ul><h3 id="JavaScript-实现-5"><a href="#JavaScript-实现-5" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function desEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // CBC 加密模式，Pkcs7 填充方式</span><br><span class="line">        encrypted = CryptoJS.DES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function desDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // CBC 加密模式，Pkcs7 填充方式</span><br><span class="line">        decrypted = CryptoJS.DES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var desKey = &quot;6f726c64f2c2057&quot;    // 密钥</span><br><span class="line">var desIv = &quot;0123456789ABCDEF&quot;    // 初始向量</span><br><span class="line"></span><br><span class="line">var encryptedData = desEncrypt()</span><br><span class="line">var decryptedData = desDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  +ndbEkWNw2QAfIYQtwC14w==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现-5"><a href="#Python-实现-5" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line"># 加密模式 CBC，填充方式 PAD_PKCS5</span><br><span class="line">from pyDes import des, CBC, PAD_PKCS5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_encrypt(key, text, iv):</span><br><span class="line">    k = des(key, CBC, iv, pad=None, padmode=PAD_PKCS5)</span><br><span class="line">    en = k.encrypt(text, padmode=PAD_PKCS5)</span><br><span class="line">    return binascii.b2a_hex(en)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_decrypt(key, text, iv):</span><br><span class="line">    k = des(key, CBC, iv, pad=None, padmode=PAD_PKCS5)</span><br><span class="line">    de = k.decrypt(binascii.a2b_hex(text), padmode=PAD_PKCS5)</span><br><span class="line">    return de</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    secret_key = &#x27;12345678&#x27;   # 密钥</span><br><span class="line">    text = &#x27;I love Python!&#x27;   # 加密对象</span><br><span class="line">    iv = secret_key           # 偏移量</span><br><span class="line">    secret_str = des_encrypt(secret_key, text, iv)</span><br><span class="line">    print(&#x27;加密字符串：&#x27;, secret_str)</span><br><span class="line">    clear_str = des_decrypt(secret_key, secret_str, iv)</span><br><span class="line">    print(&#x27;解密字符串：&#x27;, clear_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密字符串：b&#x27;302d3abf2421169239f829b38a9545f1&#x27;</span><br><span class="line"># 解密字符串：b&#x27;I love Python!&#x27;</span><br></pre></td></tr></table></figure><h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h2><p>简介：全称三重数据加密算法（英文名称：Triple Data Encryption Standard、 Triple Data Encryption Algorithm、TDES、TDEA），是对称加密算法中的一种。70 年代初由 IBM 研发，后 1977 年被美国国家标准局采纳为数据加密标准，它相当于是对每个数据块应用三次 DES 加密算法。由于计算机运算能力的增强，原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，即通过增加 DES 的密钥长度来避免破解，所以严格来说 3DES 不是设计一种全新的块密码算法。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 1851：<a href="https://datatracker.ietf.org/doc/rfc1851/">https://datatracker.ietf.org/doc/rfc1851/</a></li><li>3DES 维基百科：<a href="https://en.wikipedia.org/wiki/Triple_DES">https://en.wikipedia.org/wiki/Triple_DES</a></li></ul><h3 id="JavaScript-实现-6"><a href="#JavaScript-实现-6" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function tripleDesEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // ECB 加密方式，Iso10126 填充方式</span><br><span class="line">        encrypted = CryptoJS.TripleDES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.ECB,</span><br><span class="line">            padding: CryptoJS.pad.Iso10126</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tripleDesDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // ECB 加密方式，Iso10126 填充方式</span><br><span class="line">        decrypted = CryptoJS.TripleDES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.ECB,</span><br><span class="line">            padding: CryptoJS.pad.Iso10126</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var desKey = &quot;6f726c64f2c2057c&quot;    // 密钥</span><br><span class="line">var desIv = &quot;0123456789ABCDEF&quot;    // 偏移量</span><br><span class="line"></span><br><span class="line">var encryptedData = tripleDesEncrypt()</span><br><span class="line">var decryptedData = tripleDesDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  3J0NX7x6GbewjjhoW2HKqg==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现-6"><a href="#Python-实现-6" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from Cryptodome.Cipher import DES3</span><br><span class="line">from Cryptodome import Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 需要补位，str不是16的倍数那就补足为16的倍数</span><br><span class="line">def add_to_16(value):</span><br><span class="line">    while len(value) % 16 != 0:</span><br><span class="line">        value += &#x27;\0&#x27;</span><br><span class="line">    return str.encode(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_encrypt(key, text, iv):</span><br><span class="line">    # 加密模式 OFB</span><br><span class="line">    cipher_encrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)</span><br><span class="line">    encrypted_text = cipher_encrypt.encrypt(text.encode(&quot;utf-8&quot;))</span><br><span class="line">    return encrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_decrypt(key, text, iv):</span><br><span class="line">    # 加密模式 OFB</span><br><span class="line">    cipher_decrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)</span><br><span class="line">    decrypted_text = cipher_decrypt.decrypt(text)</span><br><span class="line">    return decrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    key = &#x27;12345678&#x27;            # 密钥，16 位</span><br><span class="line">    text = &#x27;I love Python!&#x27;     # 加密对象</span><br><span class="line">    iv = Random.new().read(DES3.block_size)  # DES3.block_size == 8</span><br><span class="line">    secret_str = des_encrypt(key, text, iv)</span><br><span class="line">    print(&#x27;加密字符串：&#x27;, secret_str)</span><br><span class="line">    clear_str = des_decrypt(key, secret_str, iv)</span><br><span class="line">    print(&#x27;解密字符串：&#x27;, clear_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密字符串：b&#x27;\xa5\x8a\xd4R\x99\x16j\xba?vg\xf2\xb6\xa9&#x27;</span><br><span class="line"># 解密字符串：b&#x27;I love Python!&#x27;</span><br></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p>简介：全称高级加密标准（英文名称：Advanced Encryption Standard），在密码学中又称 Rijndael 加密法，由美国国家标准与技术研究院 （NIST）于 2001 年发布，并在 2002 年成为有效的标准，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用，它本身只有一个密钥，即用来实现加密，也用于解密。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 3268：<a href="https://datatracker.ietf.org/doc/rfc3268/">https://datatracker.ietf.org/doc/rfc3268/</a></li><li>AES 维基百科：<a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a></li></ul><h3 id="JavaScript-实现-7"><a href="#JavaScript-实现-7" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function tripleAesEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(aesKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(aesIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // CBC 加密方式，Pkcs7 填充方式</span><br><span class="line">        encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tripleAesDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(aesKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(aesIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // CBC 加密方式，Pkcs7 填充方式</span><br><span class="line">        decrypted = CryptoJS.AES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var aesKey = &quot;6f726c64f2c2057c&quot;   // 密钥，16 倍数</span><br><span class="line">var aesIv = &quot;0123456789ABCDEF&quot;    // 偏移量，16 倍数</span><br><span class="line"></span><br><span class="line">var encryptedData = tripleAesEncrypt()</span><br><span class="line">var decryptedData = tripleAesDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  dZL7TLJR786VGvuUvqYGoQ==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现-7"><a href="#Python-实现-7" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">from Cryptodome.Cipher import AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 需要补位，str不是16的倍数那就补足为16的倍数</span><br><span class="line">def add_to_16(value):</span><br><span class="line">    while len(value) % 16 != 0:</span><br><span class="line">        value += &#x27;\0&#x27;</span><br><span class="line">    return str.encode(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密方法</span><br><span class="line">def aes_encrypt(key, t, iv):</span><br><span class="line">    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))  # 初始化加密器</span><br><span class="line">    encrypt_aes = aes.encrypt(add_to_16(t))                    # 先进行 aes 加密</span><br><span class="line">    encrypted_text = str(base64.encodebytes(encrypt_aes), encoding=&#x27;utf-8&#x27;)  # 执行加密并转码返回 bytes</span><br><span class="line">    return encrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 解密方法</span><br><span class="line">def aes_decrypt(key, t, iv):</span><br><span class="line">    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))         # 初始化加密器</span><br><span class="line">    base64_decrypted = base64.decodebytes(t.encode(encoding=&#x27;utf-8&#x27;))  # 优先逆向解密 base64 成 bytes</span><br><span class="line">    decrypted_text = str(aes.decrypt(base64_decrypted), encoding=&#x27;utf-8&#x27;).replace(&#x27;\0&#x27;, &#x27;&#x27;)  # 执行解密密并转码返回str</span><br><span class="line">    return decrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    secret_key = &#x27;12345678&#x27;   # 密钥</span><br><span class="line">    text = &#x27;I love Python!&#x27;   # 加密对象</span><br><span class="line">    iv = secret_key           # 初始向量</span><br><span class="line">    encrypted_str = aes_encrypt(secret_key, text, iv)</span><br><span class="line">    print(&#x27;加密字符串：&#x27;, encrypted_str)</span><br><span class="line">    decrypted_str = aes_decrypt(secret_key, encrypted_str, iv)</span><br><span class="line">    print(&#x27;解密字符串：&#x27;, decrypted_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密字符串：lAVKvkQh+GtdNpoKf4/mHA==</span><br><span class="line"># 解密字符串：I love Python!</span><br></pre></td></tr></table></figure><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><p>简介：英文名称：Rivest Cipher 4，也称为 ARC4 或 ARCFOUR，是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4 是有线等效加密（WEP）中采用的加密算法，也曾经是 TLS 可采用的算法之一，该算法的速度可以达到 DES 加密的 10 倍左右，且具有很高级别的非线性，虽然它在软件方面的简单性和速度非常出色，但在 RC4 中发现了多个漏洞，它特别容易受到攻击，RC4 作为一种老旧的验证和加密算法易于受到黑客攻击，现在逐渐不推荐使用了。</p><p>参考资料：</p><ul><li>RFC 7465：<a href="https://datatracker.ietf.org/doc/rfc7465/">https://datatracker.ietf.org/doc/rfc7465/</a></li><li>RC4 维基百科：<a href="https://en.wikipedia.org/wiki/RC4">https://en.wikipedia.org/wiki/RC4</a></li></ul><h3 id="JavaScript-实现-8"><a href="#JavaScript-实现-8" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function RC4Encrypt() &#123;</span><br><span class="line">    return CryptoJS.RC4.encrypt(text, key).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function RC4Decrypt()&#123;</span><br><span class="line">    return CryptoJS.RC4.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;</span><br><span class="line">var key = &quot;6f726c64f2c2057c&quot;</span><br><span class="line"></span><br><span class="line">var encryptedData = RC4Encrypt()</span><br><span class="line">var decryptedData = RC4Decrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  U2FsdGVkX18hMm9WWdoEQGPolnXzlg9ryArdGNwv</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现-8"><a href="#Python-实现-8" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">from Cryptodome.Cipher import ARC4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rc4_encrypt(key, t):</span><br><span class="line">    enc = ARC4.new(key.encode(&#x27;utf8&#x27;))</span><br><span class="line">    res = enc.encrypt(t.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    res = base64.b64encode(res)</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rc4_decrypt(key, t):</span><br><span class="line">    data = base64.b64decode(t)</span><br><span class="line">    enc = ARC4.new(key.encode(&#x27;utf8&#x27;))</span><br><span class="line">    res = enc.decrypt(data)</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    secret_key = &#x27;12345678&#x27;   # 密钥</span><br><span class="line">    text = &#x27;I love Python!&#x27;   # 加密对象</span><br><span class="line">    encrypted_str = rc4_encrypt(secret_key, text)</span><br><span class="line">    print(&#x27;加密字符串：&#x27;, encrypted_str)</span><br><span class="line">    decrypted_str = rc4_decrypt(secret_key, encrypted_str)</span><br><span class="line">    print(&#x27;解密字符串：&#x27;, decrypted_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密字符串：b&#x27;8tNVu3/U/veJR2KgyBw=&#x27;</span><br><span class="line"># 解密字符串：b&#x27;I love Python!&#x27;</span><br></pre></td></tr></table></figure><h2 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h2><p>简介：Rabbit 加密算法是一个高性能的流密码加密方式，2003 年首次被提出，它从 128 位密钥和 64 位初始向量（iv）创建一个密钥流。</p><p>参考资料：</p><ul><li>RFC 4503：<a href="https://datatracker.ietf.org/doc/rfc4503/">https://datatracker.ietf.org/doc/rfc4503/</a></li><li>Rabbit 维基百科：<a href="https://en.wikipedia.org/wiki/Rabbit_(cipher)">https://en.wikipedia.org/wiki/Rabbit_(cipher)</a></li></ul><h3 id="JavaScript-实现-9"><a href="#JavaScript-实现-9" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function rabbitEncrypt() &#123;</span><br><span class="line">    return CryptoJS.Rabbit.encrypt(text, key).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rabbitDecrypt() &#123;</span><br><span class="line">    return CryptoJS.Rabbit.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;</span><br><span class="line">var key = &quot;6f726c64f2c2057&quot;</span><br><span class="line"></span><br><span class="line">var encryptedData = rabbitEncrypt()</span><br><span class="line">var decryptedData = rabbitDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  U2FsdGVkX1+ZVCHRXlhmG5Xw87YPWMNIBlbukuh8</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现-9"><a href="#Python-实现-9" class="headerlink" title="Python 实现"></a>Python 实现</h3><p>目前没有找到有第三方库可以直接实现 Rabbit 算法，在 Python 中实现可以参考：<a href="https://asecuritysite.com/encryption/rabbit2">https://asecuritysite.com/encryption/rabbit2</a></p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>简介：英文名称：Rivest-Shamir-Adleman，是 1977 年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的，RSA 就是他们三人姓氏开头字母拼在一起组成的，RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。它被普遍认为是目前比较优秀的公钥方案之一。RSA是第一个能同时用于加密和数字签名的算法，它能够抵抗到目前为止已知的所有密码攻击。</p><p>参考资料：</p><ul><li>RSA 维基百科：<a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">https://en.wikipedia.org/wiki/RSA_(cryptosystem)</a></li></ul><h3 id="JavaScript-实现-10"><a href="#JavaScript-实现-10" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 引用 node-rsa 加密模块</span><br><span class="line">var NodeRSA = require(&#x27;node-rsa&#x27;);</span><br><span class="line"></span><br><span class="line">function rsaEncrypt() &#123;</span><br><span class="line">    pubKey = new NodeRSA(publicKey,&#x27;pkcs8-public&#x27;);</span><br><span class="line">    var encryptedData = pubKey.encrypt(text, &#x27;base64&#x27;);</span><br><span class="line">    return encryptedData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rsaDecrypt() &#123;</span><br><span class="line">    priKey = new NodeRSA(privatekey,&#x27;pkcs8-private&#x27;);</span><br><span class="line">    var decryptedData = priKey.decrypt(encryptedData, &#x27;utf8&#x27;);</span><br><span class="line">    return decryptedData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var key = new NodeRSA(&#123;b: 512&#125;);                    //生成512位秘钥</span><br><span class="line">var publicKey = key.exportKey(&#x27;pkcs8-public&#x27;);    //导出公钥</span><br><span class="line">var privatekey = key.exportKey(&#x27;pkcs8-private&#x27;);  //导出私钥</span><br><span class="line">var text = &quot;I love Python!&quot;</span><br><span class="line"></span><br><span class="line">var encryptedData = rsaEncrypt()</span><br><span class="line">var decryptedData = rsaDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;公钥:\n&quot;, publicKey)</span><br><span class="line">console.log(&quot;私钥:\n&quot;, privatekey)</span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">公钥:</span><br><span class="line"> -----BEGIN PUBLIC KEY-----</span><br><span class="line">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAOV1BwTJSVce/QjJAro5fXG9WzOpal09</span><br><span class="line">Qtv1yuXKE81vZSNTHxW6dICwPT/kjCfC3bA5Qs6wnYBANuwD6wlAS0UCAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">私钥:</span><br><span class="line"> -----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA5XUHBMlJVx79CMkC</span><br><span class="line">ujl9cb1bM6lqXT1C2/XK5coTzW9lI1MfFbp0gLA9P+SMJ8LdsDlCzrCdgEA27APr</span><br><span class="line">CUBLRQIDAQABAkAiXwJbJC+5PioXG80tyhjRZdT4iyMkrl2Kh2oKO9f1iLaBXLya</span><br><span class="line">D0HW82wFh+cUy8GcMl9jse8DE8wd1TdORmHhAiEA/rwmWjXHVgDqcH/fqk8Ufku0</span><br><span class="line">fXvs56h5QDoh1so5vokCIQDmmL3JDW6Y7RuK2qwFbHBZtYPRFRVdn5X1oqU2FOSX</span><br><span class="line">3QIhAOVTjVN5RtNuT6Cn/jvcpZ5tmTe+8TA8w6vGqeAsfn/BAiBvKKIUEQ2HWoU0</span><br><span class="line">YkUaODPQiteIKomqIAvB5S2O7HNlYQIgWMuLUxGZbbcAmIX+YmRXuET97S7OWv+z</span><br><span class="line">WHVfb/rbXtI=</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line">加密字符串:  hHXTF1K3w55Wd6OSjVYtqxceJ5VhlySNUahel9pwKD92Ef7wIT7DYPuJRKiqz5tuHtUqujbmbZBSL0qDE/EA+A==</span><br><span class="line">解密字符串:  I love Python!</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="Python-实现-10"><a href="#Python-实现-10" class="headerlink" title="Python 实现"></a>Python 实现</h3><p>模块：rsa：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rsa_encrypt(pu_key, t):</span><br><span class="line">    # 公钥加密</span><br><span class="line">    rsa = rsa.encrypt(t.encode(&quot;utf-8&quot;), pu_key)</span><br><span class="line">    return rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rsa_decrypt(pr_key, t):</span><br><span class="line">    # 私钥解密</span><br><span class="line">    rsa = rsa.decrypt(t, pr_key).decode(&quot;utf-8&quot;)</span><br><span class="line">    return rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    public_key, private_key = rsa.newkeys(512)   # 生成公钥、私钥</span><br><span class="line">    print(&#x27;公钥：&#x27;, public_key)</span><br><span class="line">    print(&#x27;私钥：&#x27;, private_key)</span><br><span class="line">    text = &#x27;I love Python!&#x27;  # 加密对象</span><br><span class="line">    encrypted_str = rsa_encrypt(public_key, text)</span><br><span class="line">    print(&#x27;加密字符串：&#x27;, encrypted_str)</span><br><span class="line">    decrypted_str = rsa_decrypt(private_key, encrypted_str)</span><br><span class="line">    print(&#x27;解密字符串：&#x27;, decrypted_str)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">公钥：PublicKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537)</span><br><span class="line">私钥：PrivateKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537, 3850457767980968449796700480128630632818465005441846698224554128042451115530564586537997896922067523638756079019054611200173122138274839877369624069360253, 4713180694194659323798858305046043997526301456820208338158979730140812744181638767, 1620238976946735819854194349514460863335347861649166352709029254680140139)</span><br><span class="line">加密字符串：b&quot;\x1aaeps\xa0c&#125;\xb6\xcf\xa3\xb0\xbb\xedA\x7f&#125;\x03\xdc\xd5\x1c\x9b\xdb\xda\xf9q\x80[=\xf5\x91\r\xd0&#x27;f\xce\x1f\x01\xef\xa5\xdb3\x96\t0qIxF\xbd\x11\xd6\xb25\xc5\xe1pM\xb4M\xc2\xd4\x03\xa6&quot;</span><br><span class="line">解密字符串：I love Python!</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>模块 Cryptodome：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">from Cryptodome.PublicKey import RSA</span><br><span class="line">from Cryptodome.Cipher import PKCS1_v1_5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &quot;cKK8B2rWwfwWeXhz&quot;</span><br><span class="line">public_key = &quot;MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAM1xhOWaThSMpfxFsjV5YaWOFHt+6RvS+zH2Pa47VVr8PkZYnRaaKKy2MYBuEh7mZfM/R1dUXTgu0gp6VTNeNQkCAwEAAQ==&quot;</span><br><span class="line">rsa_key = RSA.import_key(base64.b64decode(public_key))  # 导入读取到的公钥</span><br><span class="line">cipher = PKCS1_v1_5.new(rsa_key)                        # 生成对象</span><br><span class="line">cipher_text = base64.b64encode(cipher.encrypt(data.encode(encoding=&quot;utf-8&quot;)))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/javascript%E9%80%86%E5%90%91/">javascript逆向</category>
      
      <category domain="https://leileigwl.github.io/tags/%E5%8A%A0%E5%AF%86/">加密</category>
      
      
      <comments>https://leileigwl.github.io/post/c4626f5f.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
