<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>磊磊の小窝</title>
    <link>https://leileigwl.github.io/</link>
    
    <atom:link href="https://leileigwl.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>小白小白·~</description>
    <pubDate>Mon, 08 May 2023 09:27:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>springmvc框架入门</title>
      <link>https://leileigwl.github.io/post/6ebdac3b.html</link>
      <guid>https://leileigwl.github.io/post/6ebdac3b.html</guid>
      <pubDate>Mon, 08 May 2023 09:25:38 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;[toc]&lt;/p&gt;
&lt;h3 id=&quot;SpringMvc&quot;&gt;&lt;a href=&quot;#SpringMvc&quot; class=&quot;headerlink&quot; title=&quot;SpringMvc&quot;&gt;&lt;/a&gt;SpringMvc&lt;/h3&gt;&lt;p&gt;Spring MVC 是目前主流的实现 MVC 设计模式的</description>
        
      
      
      
      <content:encoded><![CDATA[<p>[toc]</p><h3 id="SpringMvc"><a href="#SpringMvc" class="headerlink" title="SpringMvc"></a>SpringMvc</h3><p>Spring MVC 是目前主流的实现 MVC 设计模式的企业级开发框架，Spring 框架的一个子模块，无需整合，开发起来更加便捷。</p><h3 id="1-SpringMvc核心思想"><a href="#1-SpringMvc核心思想" class="headerlink" title="1.SpringMvc核心思想"></a>1.SpringMvc核心思想</h3><h4 id="1-1-Spring-MVC-的核心组件"><a href="#1-1-Spring-MVC-的核心组件" class="headerlink" title="1.1 Spring MVC 的核心组件"></a>1.1 Spring MVC 的核心组件</h4><ul><li>DispatcherServlet：前置控制器，是整个流程控制的核心，控制其他组件的执行，进行统一调度，降低组件之间的耦合性，相当于总指挥。</li><li>Handler：处理器，完成具体的业务逻辑，相当于 Servlet 或 Action。</li><li>HandlerMapping：DispatcherServlet 接收到请求之后，通过 HandlerMapping 将不同的请求映射到不同的 Handler。</li><li>HandlerInterceptor：处理器拦截器，是一个接口，如果需要完成一些拦截处理，可以实现该接口。</li><li>HandlerExecutionChain：处理器执行链，包括两部分内容：Handler 和 HandlerInterceptor（系统会有一个默认的 HandlerInterceptor，如果需要额外设置拦截，可以添加拦截器）。</li><li>HandlerAdapter：处理器适配器，Handler 执行业务方法之前，需要进行一系列的操作，包括表单数据的验证、数据类型的转换、将表单数据封装到 JavaBean 等，这些操作都是由 HandlerApater 来完成，开发者只需将注意力集中业务逻辑的处理上，DispatcherServlet 通过 HandlerAdapter 执行不同的 Handler。</li><li>ModelAndView：装载了模型数据和视图信息，作为 Handler 的处理结果，返回给 DispatcherServlet。</li><li>ViewResolver：视图解析器，DispatcheServlet 通过它将逻辑视图解析为物理视图，最终将渲染结果响应给客户端。</li></ul><h4 id="1-2Spring-MVC-的工作流程"><a href="#1-2Spring-MVC-的工作流程" class="headerlink" title="1.2Spring MVC 的工作流程"></a>1.2Spring MVC 的工作流程</h4><ul><li>客户端请求被 DisptacherServlet 接收。</li><li>根据 HandlerMapping 映射到 Handler。</li><li>生成 Handler 和 HandlerInterceptor。</li><li>Handler 和 HandlerInterceptor 以 HandlerExecutionChain 的形式一并返回给 DisptacherServlet。</li><li>DispatcherServlet 通过 HandlerAdapter 调用 Handler 的方法完成业务逻辑处理。</li><li>Handler 返回一个 ModelAndView 给 DispatcherServlet。</li><li>DispatcherServlet 将获取的 ModelAndView 对象传给 ViewResolver 视图解析器，将逻辑视图解析为物理视图 View。</li><li>ViewResovler 返回一个 View 给 DispatcherServlet。</li><li>DispatcherServlet 根据 View 进行视图渲染（将模型数据 Model 填充到视图 View 中）。</li><li>DispatcherServlet 将渲染后的结果响应给客户端。</li></ul><h3 id="2-创建一个SpringMvc工程"><a href="#2-创建一个SpringMvc工程" class="headerlink" title="2.创建一个SpringMvc工程"></a>2.创建一个SpringMvc工程</h3><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置springmvc的xml文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面还是声明头，黏贴即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.Lei&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自动扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加自动扫描器</li><li>添加视图解析器<code>InternalResourceViewResolver</code>将物理视图转换，property添加的是解析后得到的prefix是前缀，suffix是后缀</li></ul><ol start="3"><li>编写web.xml注册springmvc的servlet</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明头--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--选择DispatcherServlet核心--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>init-param表示初始化，主要是为servlet初始化时，进行一些配置时候用的<ul><li>用classpath:springmvc.xml指向springmvc的配置文件</li></ul></li></ul><ol start="4"><li>编写测试主程序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span><span class="comment">//自动扫描的时候可以被扫描到，并具有控制的作用</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span><span class="comment">//映射的地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloHandler</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;index&quot;,params = &#123;&quot;name&quot;,&quot;id&quot;&#125;)</span><span class="comment">//params是指必要的参数，不用像以前getParameter获取</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(String name,<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Spring-MVC-注解"><a href="#3-Spring-MVC-注解" class="headerlink" title="3.Spring MVC 注解"></a>3.Spring MVC 注解</h3><ul><li><p>@RequestMapping </p><ul><li><p>Spring MVC 通过 @RequestMapping 注解将 URL 请求与业务方法进行映射，在 Handler 的类定义处以及方法定义处都可以添加 @RequestMapping ，在类定义处添加，相当于客户端多了一层访问路径。</p></li><li><p>value：指定 URL 请求的实际地址，是 @RequestMapping 的默认值。</p><ul><li><pre><code class="java">@RequestMapping(&quot;/index&quot;)//等价于@RequestMapping(value=&quot;/index&quot;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- method：指定请求的 method 类型，GET、POST、PUT、DELET。</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    @RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET)</span><br><span class="line">    //上述代码表示 index 方法只能接收 GET 请求。</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>params：指定请求中必须包含某些参数，否则无法调用该方法。</p><ul><li><pre><code class="java">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET,params = &#123;&quot;name&quot;,&quot;id=10&quot;&#125;)//上述代码表示请求中必须包含 name 和 id 两个参数，同时 id 的值必须是 10。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- @Controller</span><br><span class="line"></span><br><span class="line">  - @Controller 在类定义处添加，将该类交个 IoC 容器来管理（结合 springmvc.xml 的自动扫描配置使用），同时使其成为一个控制器，可以接</span><br><span class="line"></span><br><span class="line">- 映射 Cookie</span><br><span class="line"></span><br><span class="line">  - Spring MVC 通过映射可以直接在业务方法中获取 Cookie 的值。收客户端请求。</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      @RequestMapping(&quot;/cookie&quot;)</span><br><span class="line">      public String cookie(@CookieValue(value = &quot;JSESSIONID&quot;) String sessionId)&#123;</span><br><span class="line">          System.out.println(sessionId);</span><br><span class="line">          return &quot;index&quot;;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>使用 JavaBean 绑定参数</p><ul><li>Spring MVC 会根据请求参数名和 JavaBean 属性名进行自动匹配，自动为对象填充属性值，同时支持及联属性。</li></ul><ol><li><p>无级联</p><ul><li><pre><code class="java">//实体类public class User &#123;private long id;private String name;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```jsp</span><br><span class="line">  &lt;%--</span><br><span class="line">    Created by IntelliJ IDEA.</span><br><span class="line">    User: Leilei</span><br><span class="line">    Date: 2022/7/16</span><br><span class="line">    Time: 15:40</span><br><span class="line">    To change this template use File | Settings | File Templates.</span><br><span class="line">  --%&gt;</span><br><span class="line">  &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;form action=&quot;/save&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    用户id:&lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;&lt;br&gt;</span><br><span class="line">    用户名:&lt;input type=&quot;text&quot;name=&quot;name&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;%--提交表单--%&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="java">//hanlder的操作@Controllerpublic class HelloHandler &#123;    @RequestMapping(&quot;/save&quot;)    public String save(User user)&#123;        System.out.println(user);        return &quot;index&quot;;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - 注：action要与@RequestMapping(&quot;/save&quot;)对应</span><br><span class="line"></span><br><span class="line">2. 级联一个Address类</span><br><span class="line"></span><br><span class="line">   - ```java</span><br><span class="line">     //级联类</span><br><span class="line">     public class Address &#123;</span><br><span class="line">         private String value;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="java">//新增address字段public class User &#123;private long id;private String name;private Address address;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```jsp</span><br><span class="line">  &lt;%--</span><br><span class="line">      Created by IntelliJ IDEA.</span><br><span class="line">      User: Leilei</span><br><span class="line">          Date: 2022/7/16</span><br><span class="line">              Time: 15:40</span><br><span class="line">                  To change this template use File | Settings | File Templates.</span><br><span class="line">                  --%&gt;</span><br><span class="line">  &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">      &lt;head&gt;</span><br><span class="line">          &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">      &lt;/head&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">          &lt;%--提交表单--%&gt;</span><br><span class="line">          &lt;form action=&quot;/save&quot; method=&quot;post&quot;&gt;</span><br><span class="line">              用户id:&lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;&lt;br&gt;</span><br><span class="line">              用户名:&lt;input type=&quot;text&quot;name=&quot;name&quot;&gt;&lt;br&gt;</span><br><span class="line">              地址: &lt;input type=&quot;text&quot; name=&quot;address.value&quot;&gt;&lt;br&gt;</span><br><span class="line">              &lt;%--新增地址栏--%&gt;</span><br><span class="line">              &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">          &lt;/form&gt;</span><br><span class="line">      &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>注：这里的提交是用字段名加上对应的类中的属性值来覆盖，springmvc会自动匹配覆盖</p></li></ul></li></ol></li><li><p>JSP 页面的转发和重定向：</p><ul><li><p>Spring MVC 默认是以转发的形式响应 JSP。</p></li><li><p>转发</p><ul><li><pre><code class="java">@RequestMapping(&quot;/forward&quot;)public String forward()&#123;    return &quot;forward:/index.jsp&quot;;    //        return &quot;index&quot;;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 重定向</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    @RequestMapping(&quot;/redirect&quot;)</span><br><span class="line">    public String redirect()&#123;</span><br><span class="line">        return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h3 id="4-Spring-MVC-数据绑定"><a href="#4-Spring-MVC-数据绑定" class="headerlink" title="4.Spring MVC 数据绑定"></a>4.Spring MVC 数据绑定</h3><p>数据绑定：在后端的业务方法中直接获取客户端 HTTP 请求中的参数，将请求参数映射到业务方法的形参中，Spring MVC 中数据绑定的工作是由 HandlerAdapter 来完成的。</p><h4 id="4-1基本数据类型"><a href="#4-1基本数据类型" class="headerlink" title="4.1基本数据类型"></a>4.1基本数据类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/baseType&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">baseType</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id+<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ResponseBody 表示 Spring MVC 会直接将业务方法的返回值响应给客户端，如果不加 @ResponseBody 注解，Spring MVC 会将业务方法的放回值传递给 DispatcherServlet，再由 DisptacherServlet 调用 ViewResolver 对返回值进行解析，映射到一个 JSP 资源。</p><h4 id="4-2包装类"><a href="#4-2包装类" class="headerlink" title="4.2包装类"></a>4.2包装类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/packageType&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">packageType</span><span class="params">(<span class="meta">@RequestParam(value = &quot;num&quot;,required = false,defaultValue = &quot;0&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id+<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包装类可以接收 null，当 HTTP 请求没有参数时，使用包装类定义形参的数据类型，程序不会抛出异常。</p><p>@RequestParam</p><p>value &#x3D; “num”：将 HTTP 请求中名为 num 的参数赋给形参 id。</p><p>requried：设置 num 是否为必填项，true 表示必填，false 表示非必填，可省略。</p><p>defaultValue &#x3D; “0”：如果 HTTP 请求中没有 num 参数，默认值为0.</p><h4 id="4-3数组"><a href="#4-3数组" class="headerlink" title="4.3数组"></a>4.3数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/data&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataBindHandler</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/array&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">array</span><span class="params">(String[] name)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestController 表示该控制器会直接将业务方法的返回值响应给客户端，不进行视图解析。</p><p>@Controller 表示该控制器的每一个业务方法的返回值都会交给视图解析器进行解析，如果只需要将数据响应给客户端，而不需要进行视图解析，则需要在对应的业务方法定义处添加 @ResponseBody。</p><h4 id="4-4List"><a href="#4-4List" class="headerlink" title="4.4List"></a>4.4List</h4><p>Spring MVC 不支持 List 类型的直接转换，需要对 List 集合进行包装。</p><p>集合封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/list&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户<span class="number">1</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[0].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">1</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[0].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[1].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[1].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[2].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[2].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(UserList userList)</span>&#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="keyword">for</span>(User user:userList.getUsers())&#123;</span><br><span class="line">        str.append(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5Map"><a href="#4-5Map" class="headerlink" title="4.5Map"></a>4.5Map</h4><p>自定义封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMap</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/map&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">map</span><span class="params">(UserMap userMap)</span>&#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="keyword">for</span>(String key:userMap.getUsers().keySet())&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMap.getUsers().get(key);</span><br><span class="line">        str.append(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/data/map&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户<span class="number">1</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;a&#x27;].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">1</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;a&#x27;].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;b&#x27;].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;b&#x27;].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;c&#x27;].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;c&#x27;].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="4-6JSON"><a href="#4-6JSON" class="headerlink" title="4.6JSON"></a>4.6JSON</h4><p>客户端发生 JSON 格式的数据，直接通过 Spring MVC 绑定到业务方法的形参中。</p><p>处理 Spring MVC 无法加载静态资源，在 web.xml 中添加配置即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">           <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">               <span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">           &#125;;</span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">               url:<span class="string">&quot;/json&quot;</span>,</span><br><span class="line">               data:JSON.stringify(user),</span><br><span class="line">               type:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">               contentType:<span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">               dataType:<span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">               success:function(data)&#123;</span><br><span class="line">                   alert(data.id+<span class="string">&quot;---&quot;</span>+data.name);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">json</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    user.setId(<span class="number">6</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;老六&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring MVC 中的 JSON 和 JavaBean 的转换需要借助于 fastjson，pom.xml 引入相关依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springmvc.xml 添加 fastjson 配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-Spring-MVC-模型数据解析"><a href="#5-Spring-MVC-模型数据解析" class="headerlink" title="5.Spring MVC 模型数据解析"></a>5.Spring MVC 模型数据解析</h3><p>JSP 四大作用域对应的内置对象：pageContext、request、session、application。</p><p>模型数据的绑定是由 ViewResolver 来完成的，实际开发中，我们需要先添加模型数据，再交给 ViewResolver 来绑定。</p><p>Spring MVC 提供了以下几种方式添加模型数据：</p><ul><li><p>Map</p></li><li><p>Model</p></li><li><p>ModelAndView</p></li><li><p>@SessionAttribute</p></li><li><p>@ModelAttribute</p></li></ul><blockquote><p>上面的都是request层的，通过jsp页面就能发现</p></blockquote><h4 id="5-1Map"><a href="#5-1Map" class="headerlink" title="5.1Map"></a>5.1Map</h4><p>Jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        $&#123;requestScope.user&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Controller.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;view&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/map&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">map</span><span class="params">(Map&lt;String, User&gt; map)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">6</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;老六&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map模型解析，就是将数据手动添加到map里，DisPatcher Servlet会自己解析map</p><h4 id="5-2Model"><a href="#5-2Model" class="headerlink" title="5.2Model"></a>5.2Model</h4><p>jsp页面是一样的，只需要导入<code>org.springframework.ui.Model</code>来进行添加model即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/model&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">model</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">6</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;老六&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3ModelandView（重要）"><a href="#5-3ModelandView（重要）" class="headerlink" title="5.3ModelandView（重要）"></a>5.3ModelandView（重要）</h4><p>jsp还是一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="comment">//需要导入</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/modelandview&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">modelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">6</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;老六&quot;</span>);</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;view&quot;</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是简单的将view视图和model结合起来，用的相对较多，而且有许多中不同的重载方法，这里我只写一种我用的最习惯的；</p><h4 id="5-4HttpServletRequest"><a href="#5-4HttpServletRequest" class="headerlink" title="5.4HttpServletRequest"></a>5.4HttpServletRequest</h4><p>jsp还是一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/request&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">request</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">6</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;老六&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接通过原生的request方法传递对象</p><h4 id="5-5ModelAttribute"><a href="#5-5ModelAttribute" class="headerlink" title="5.5ModelAttribute"></a>5.5ModelAttribute</h4><p>定义一个方法，该方法专门用来返回要填充到模型数据中的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">6</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;老六&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的User创建也有很多不同的方法，如通过手动创建map，将对象存储到map里亦或是创建一个model，在model里setaddAttribute，记住最简单也是最实用的即可</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelattribute&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">modelAttribute</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面就是基于session的对象的绑定了</p></blockquote><h4 id="5-6原生session的Api"><a href="#5-6原生session的Api" class="headerlink" title="5.6原生session的Api"></a>5.6原生session的Api</h4><p>这里的作用域是session，所以需要改动jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;sessionScope.user&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/session&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">session</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">6</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;老六&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-7SessionAttribute注释"><a href="#5-7SessionAttribute注释" class="headerlink" title="5.7SessionAttribute注释"></a>5.7SessionAttribute注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="meta">@SessionAttributes(value = &#123;&quot;user&quot;,&quot;address&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerDemo</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="meta">@SessionAttributes(types = &#123;User.class,Address.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerDemo</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 ControllerDemo中的所有业务方法，只要向 request 中添加了数据类型是 User 、Address 的对象时，Spring MVC 会自动将该数据添加到 session 中，保存 key 不变。</p><blockquote><p>将模型数据绑定到 application 对象</p></blockquote><h4 id="5-8application"><a href="#5-8application" class="headerlink" title="5.8application"></a>5.8application</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/application&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">application</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">6</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;老六&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-SpringMVC自定义数据转换器"><a href="#6-SpringMVC自定义数据转换器" class="headerlink" title="6.SpringMVC自定义数据转换器"></a>6.SpringMVC自定义数据转换器</h3><p>数据转换器是指将客户端 HTTP 请求中的参数转换为业务方法中定义的形参，自定义表示开发者可以自主设计转换的方式，HandlerApdter 已经提供了通用的转换，String 转 int，String 转 double，表单数据的封装等，但是在特殊的业务场景下，HandlerAdapter 无法进行转换，就需要开发者自定义转换器。</p><h4 id="6-1String-gt-Date"><a href="#6-1String-gt-Date" class="headerlink" title="6.1String-&gt;Date"></a>6.1String-&gt;Date</h4><ol><li>首先编写实现converter接口进行自定义，默认都是object，如果想改变需要在泛型里指明</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入的包是import org.springframework.core.convert.converter.Converter;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateConverter</span><span class="params">(String pattern)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.pattern =pattern;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> simpleDateFormat.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置springmvc.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;converterService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.Lei.Converter.DateConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加这个bean，并通过是有参构造来传入pattern的形式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;converterService&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在注册消息转换头这里需要加上配置的id</p><ol start="3"><li>编写jsp页面</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;form action=<span class="string">&quot;/converter/date&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    请输入日期&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;date&quot;</span>&gt;(yyyy-MM-dd)</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>DisPatcherServlet解析</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span><span class="comment">//这里我们用restcontroller不进行视图解析</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/converter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertService</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/date&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String  <span class="title function_">date</span><span class="params">(Date date)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2String-gt-Student"><a href="#6-2String-gt-Student" class="headerlink" title="6.2String-&gt;Student"></a>6.2String-&gt;Student</h4><ol><li>student实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>对应的jsp</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/converter/student&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    请输入学生信息:&lt;input type=<span class="string">&quot;text&quot;</span> ame=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>converter层获取对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Student&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">convert</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        String[] args = s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(Long.parseLong(args[<span class="number">0</span>]));</span><br><span class="line">        student.setName(args[<span class="number">1</span>]);</span><br><span class="line">        student.setAge(Integer.parseInt(args[<span class="number">2</span>]));</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Dispatcher Servlet层的converter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">student</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> student.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>配置springmvc.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;converterService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.Lei.Converter.DateConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.Lei.Converter.StudentConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-REST风"><a href="#7-REST风" class="headerlink" title="7.REST风"></a>7.REST风</h3><p>REST：Representational State Transfer，资源表现层状态转换，是目前比较主流的一种互联网软件架构，它结构清晰、标准规范、易于理解、便于扩展。</p><ul><li>资源（Resource）</li></ul><p>网络上的一个实体，或者说网络中存在的一个具体信息，一段文本、一张图片、一首歌曲、一段视频等等，总之就是一个具体的存在。可以用一个 URI（统一资源定位符）指向它，每个资源都有对应的一个特定的 URI，要获取该资源时，只需要访问对应的 URI 即可。</p><ul><li>表现层（Representation）</li></ul><p>资源具体呈现出来的形式，比如文本可以用 txt 格式表示，也可以用 HTML、XML、JSON等格式来表示。</p><ul><li>状态转换（State Transfer）</li></ul><p>客户端如果希望操作服务器中的某个资源，就需要通过某种方式让服务端发生状态转换，而这种转换是建立在表现层之上的，所有叫做”表现层状态转换”。</p><h4 id="7-1特点"><a href="#7-1特点" class="headerlink" title="7.1特点"></a>7.1特点</h4><ul><li>URL 更加简洁。</li><li>有利于不同系统之间的资源共享，只需要遵守一定的规范，不需要进行其他配置即可实现资源共享。</li></ul><h4 id="7-2具体用法"><a href="#7-2具体用法" class="headerlink" title="7.2具体用法"></a>7.2具体用法</h4><p>REST 具体操作就是 HTTP 协议中四个表示操作方式的动词分别对应 CRUD 基本操作。</p><blockquote><p>GET 用来表示获取资源。</p><p>POST 用来表示新建资源。</p><p>PUT 用来表示修改资源。</p><p>DELETE 用来表示删除资源。</p></blockquote><hr><p>学生类crud编写</p><ol><li>编写接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdate</span><span class="params">(Student student)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现类，并添加Repository注释作用于持久层，可以被调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentRepository</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long,Student&gt; studentMap;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        studentMap =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        studentMap.put(<span class="number">1L</span>,<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1L</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        studentMap.put(<span class="number">2L</span>,<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2L</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        studentMap.put(<span class="number">3L</span>,<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3L</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">24</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.values();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdate</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        studentMap.put(student.getId(), student);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">        studentMap.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写DispatcherServlet层的Handler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">//自动对接口装载</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span> &#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span> &#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">long</span> id)</span> &#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-文件上传下载"><a href="#8-文件上传下载" class="headerlink" title="8.文件上传下载"></a>8.文件上传下载</h3><h4 id="8-1单文件的上传"><a href="#8-1单文件的上传" class="headerlink" title="8.1单文件的上传"></a>8.1单文件的上传</h4><p>底层是使用 Apache fileupload 组件完成上传，Spring MVC 对这种方式进行了封装。</p><p>这里就以一张图片为例</p><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>前端jsp上传页面</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/file/upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;img&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;%--这里直接读取查看是否上传成功--%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>DispatcherServlet层的Handler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fileHandler</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile img, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> img.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,filename);</span><br><span class="line">        img.transferTo(file);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newPath</span> <span class="operator">=</span><span class="string">&quot;/file/&quot;</span>+filename;</span><br><span class="line">        System.out.println(newPath);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;path&quot;</span>, newPath);<span class="comment">//加入到session中从前端页面直接读取查看是否上传成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要就是一个封装了的transferTo方法，上传成功后还是回到本页面</p><ol start="4"><li>springmvc.xml里配置上传组件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>记得将图片格式的文件取消过滤，通过web.xml配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.png<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>注意事项</li></ol><blockquote><p>1、input 的 type 设置为 file。</p><p>2、form 的 method 设置为 post（get 请求只能将文件名传给服务器）</p><p>3、from 的 enctype 设置为 multipart-form-data（如果不设置只能将文件名传给服务器）</p></blockquote><h4 id="8-2多文件上传"><a href="#8-2多文件上传" class="headerlink" title="8.2多文件上传"></a>8.2多文件上传</h4><p>与单文件类似，其实就是将上传的文件加入到数组里，通过数组遍历取出</p><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>jsp</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/file/uploads&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    file1:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgs&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    file2:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgs&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    file3:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgs&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;c:forEach items=&quot;$&#123;paths&#125;&quot; var=&quot;path&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;img src=&quot;$&#123;path&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/c:forEach&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>这里通过jstl库里的foreach遍历，<code>uri=&quot;http://java.sun.com/jsp/jstl/core&quot;</code>导入的库</p><p>将图片都以imgs上传</p><ol start="3"><li>handler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/uploads&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">uploads</span><span class="params">(MultipartFile[] imgs, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    List&lt;String&gt; files = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile img : imgs) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> img.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path, filename);</span><br><span class="line">        img.transferTo(file);</span><br><span class="line">        files.add(<span class="string">&quot;/file/&quot;</span> + filename);</span><br><span class="line">    &#125;</span><br><span class="line">    request.getSession().setAttribute(<span class="string">&quot;paths&quot;</span>, files);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;uploads&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MultipartFile 工具类变成了数组，每次上传图片的时候把他们都存到files集合里，方便一次性添加，不然每次上传一个图片都需要单个的添加，主要的还是被封装了的transferto方法</p><h4 id="8-文件下载"><a href="#8-文件下载" class="headerlink" title="8.文件下载"></a>8.文件下载</h4><ol><li>jsp前端页面</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/file/download/1&quot;</span>&gt;<span class="number">1</span>&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>就是通过a标签的herf连接，这里采用的是rest风格</p><ol start="2"><li>handler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(<span class="meta">@PathVariable</span> String name, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (name != <span class="literal">null</span>) &#123;</span><br><span class="line">        name += <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path, name);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/force-download&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+file);</span><br><span class="line">            outputStream = response.getOutputStream();</span><br><span class="line">            outputStream.write(FileUtils.readFileToByteArray(file));</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            <span class="keyword">if</span> (outputStream!=<span class="literal">null</span>)outputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>response.setContentType(&quot;application/force-download&quot;); response.setHeader(&quot;Content-Disposition&quot;,&quot;attachment;filename=&quot;+file);</code>这里是response的头设置，也就是强制下载，这才能下载文件，否则就会把读入的直接变成二进制码返回到浏览器</p><p><code>outputStream.write(FileUtils.readFileToByteArray(file));</code>最主要的封装方法，将读入的流直接写到file文件里</p><h3 id="9-SpringMvc标签库"><a href="#9-SpringMvc标签库" class="headerlink" title="9.SpringMvc标签库"></a>9.SpringMvc标签库</h3><h4 id="9-1测试样例"><a href="#9-1测试样例" class="headerlink" title="9.1测试样例"></a>9.1测试样例</h4><ol><li>handler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1L</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;student&quot;</span>, student);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>jsp</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">  &lt;form:form modelAttribute=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">      学生id:&lt;form:input path=<span class="string">&quot;id&quot;</span>&gt;&lt;/form:input&gt;&lt;br&gt;</span><br><span class="line">      学生姓名:&lt;form:input path=<span class="string">&quot;name&quot;</span>&gt;&lt;/form:input&gt;&lt;br&gt;</span><br><span class="line">      学生年龄:&lt;form:input path=<span class="string">&quot;age&quot;</span>&gt;&lt;/form:input&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">  &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>JSP 页面导入 Spring MVC 表单标签库，与导入 JSTL 标签库的语法非常相似，前缀 prefix 可以自定义，通常定义为 from。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>将 form 表单与模型数据进行绑定，通过 modelAttribute 属性完成绑定，将 modelAttribute 的值设置为模型数据对应的 key 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Handeler:modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br><span class="line">JSP:&lt;form:form modelAttribute=<span class="string">&quot;student&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>form 表单完成绑定之后，将模型数据的值取出绑定到不同的标签中，通过设置标签的 path 属性完成，将 path 属性的值设置为模型数据对应的属性名即可。</p><h3 id="9-2常用的表单标签"><a href="#9-2常用的表单标签" class="headerlink" title="9.2常用的表单标签"></a>9.2常用的表单标签</h3><ul><li>from</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:from modelAttribute=<span class="string">&quot;student&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的<code>&lt;form&gt;&lt;/from&gt;</code>，通过 modelAttribute 属性绑定具体的模型数据。</p><ul><li>input</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:input path=<span class="string">&quot;name&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;text&quot;/&gt;</code>，from 标签绑定的是模型数据，input 标签绑定的是模型数据中的属性值，通过 path 属性可以与模型数据中的属性名对应，并且支持及联操作。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;from:input path=<span class="string">&quot;address.name&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>password</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:password path=<span class="string">&quot;password&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;password&quot;/&gt;</code>，通过 path 属性与模型数据的属性值进行绑定，password 标签的值不会在页面显示。</p><ul><li>checkbox</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;读书&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student.setFlag(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkbox：&lt;form:checkbox path=<span class="string">&quot;flag&quot;</span> value=<span class="string">&quot;flag&quot;</span>&gt;&lt;/form:checkbox&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;checkbox&quot;/&gt;</code>，通过 path 与模型数据的属性值进行绑定，可以绑定 boolean、数组和集合。</p><p>如果绑定 boolean 值，若该变量的值为 true，则表示该复选框选中，否则表示不选中。</p><p>如果绑定数组或者集合，数组&#x2F;集合中的元素等于 checkbox 的 value 值，则选中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.setHobby(Arrays.asList(<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;看电影&quot;</span>,<span class="string">&quot;玩游戏&quot;</span>));</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">爱好：&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;摄影&quot;</span>&gt;&lt;/form:checkbox&gt;摄影&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;读书&quot;</span>&gt;&lt;/form:checkbox&gt;读书&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;听音乐&quot;</span>&gt;&lt;/form:checkbox&gt;听音乐&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;看电影&quot;</span>&gt;&lt;/form:checkbox&gt;看电影&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;旅游&quot;</span>&gt;&lt;/form:checkbox&gt;旅游&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;玩游戏&quot;</span>&gt;&lt;/form:checkbox&gt;玩游戏&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>checkboxes</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:checkboxes items=$&#123;student.hobby&#125; path=<span class="string">&quot;selecHobby&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一组 <code>&lt;input type=&quot;checkbox&quot;/&gt;</code>，是对 <code>&lt;form:checkbox/&gt;</code> 的一种简化，需要结合 items 和 path 属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的集合或数组，可以这样理解，items 为全部可选集合，path 为默认的选中集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student.setHobby(Arrays.asList(<span class="string">&quot;摄影&quot;</span>,<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;听音乐&quot;</span>,<span class="string">&quot;看电影&quot;</span>,<span class="string">&quot;旅游&quot;</span>,<span class="string">&quot;玩游戏&quot;</span>));</span><br><span class="line">student.setSelectHobby(Arrays.asList(<span class="string">&quot;摄影&quot;</span>,<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;听音乐&quot;</span>));</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">爱好：&lt;form:checkboxes path=<span class="string">&quot;selectHobby&quot;</span> items=<span class="string">&quot;$&#123;student.hobby&#125;&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><p>需要注意的是 path 可以直接绑定模型数据的属性值，items 则需要通过 EL 表达式的形式从域对象中获取数据，不能直接写属性名。</p><ul><li>rabiobutton</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;from:radiobutton path=<span class="string">&quot;radioId&quot;</span> value=<span class="string">&quot;0&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一个 <code>&lt;input type=&quot;radio&quot;/&gt;</code>，绑定的数据与标签的 value 值相等则为选中，否则不选中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.setRadioId(<span class="number">1</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radiobutton:&lt;form:radiobutton path=<span class="string">&quot;radioId&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;radiobutton&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>radiobuttons</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:radiobuttons itmes=<span class="string">&quot;$&#123;student.grade&#125;&quot;</span> path=<span class="string">&quot;selectGrade&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一组 <code>&lt;input type=&quot;radio&quot;/&gt;</code>，这里需要结合 items 和 path 两个属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的值，items 为全部的可选类型，path 为默认选中的选项，用法与 <code>&lt;form:checkboxes/&gt;</code> 一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; gradeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">gradeMap.put(<span class="number">1</span>,<span class="string">&quot;一年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">2</span>,<span class="string">&quot;二年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">3</span>,<span class="string">&quot;三年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">4</span>,<span class="string">&quot;四年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">5</span>,<span class="string">&quot;五年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">6</span>,<span class="string">&quot;六年级&quot;</span>);</span><br><span class="line">student.setGradeMap(gradeMap);</span><br><span class="line">student.setSelectGrade(<span class="number">3</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">学生年级：&lt;form:radiobuttons items=<span class="string">&quot;$&#123;student.gradeMap&#125;&quot;</span> path=<span class="string">&quot;selectGrade&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>select</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:select items=<span class="string">&quot;$&#123;student.citys&#125;&quot;</span> path=<span class="string">&quot;selectCity&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一个 <code>&lt;select/&gt;</code> 标签，需要结合 items 和 path 两个属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的值，用法与 <code>&lt;from:radiobuttons/&gt;</code>一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; cityMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">cityMap.put(<span class="number">1</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">cityMap.put(<span class="number">2</span>,<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">cityMap.put(<span class="number">3</span>,<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">cityMap.put(<span class="number">4</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">student.setCityMap(cityMap);</span><br><span class="line">student.setSelectCity(<span class="number">3</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所在城市：&lt;form:select items=<span class="string">&quot;$&#123;student.cityMap&#125;&quot;</span> path=<span class="string">&quot;selectCity&quot;</span>&gt;&lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>options</li></ul><p><code>form:select</code> 结合 <code>form:options</code> 的使用，<code>from:select</code> 只定义 path 属性，在 <code>form:select</code> 标签内部添加一个子标签 <code>form:options</code> ，设置 items 属性，获取被遍历的集合。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">所在城市：&lt;form:select path=<span class="string">&quot;selectCity&quot;</span>&gt;</span><br><span class="line">  &lt;form:options items=<span class="string">&quot;$&#123;student.cityMap&#125;&quot;</span>&gt;&lt;/form:options&gt;</span><br><span class="line">&lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li><p>option</p><p><code>form:select</code> 结合 <code>form:option</code> 的使用，<code>from:select</code> 定义 path 属性，给每一个 <code>form:option</code> 设置 value 值，path 的值与哪个 value 值相等，该项默认选中。</p></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">所在城市：&lt;form:select path=<span class="string">&quot;selectCity&quot;</span>&gt;</span><br><span class="line">            &lt;form:option value=<span class="string">&quot;1&quot;</span>&gt;杭州&lt;/form:option&gt;</span><br><span class="line">            &lt;form:option value=<span class="string">&quot;2&quot;</span>&gt;成都&lt;/form:option&gt;</span><br><span class="line">            &lt;form:option value=<span class="string">&quot;3&quot;</span>&gt;西安&lt;/form:option&gt;</span><br><span class="line">        &lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>textarea</li></ul><p>渲染的是 HTML 中的一个 <code>&lt;textarea/&gt;</code> ，path 绑定模型数据的属性值，作为文本输入域的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.setIntroduce(<span class="string">&quot;你好，我是...&quot;</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">信息：&lt;form:textarea path=<span class="string">&quot;introduce&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>errors</li></ul><p>处理错误信息，一般用在数据校验，该标签需要结合 Spring MVC 的验证器结合起来使用。</p><h3 id="10-SpringMvc表单后台校验"><a href="#10-SpringMvc表单后台校验" class="headerlink" title="10.SpringMvc表单后台校验"></a>10.SpringMvc表单后台校验</h3><p>Spring MVC 提供了两种数据校验的方式：1、基于 Validator 接口。2、使用 Annotation JSR - 303 标准进行校验。</p><p>基于 Validator 接口的方式需要自定义 Validator 验证器，每一条数据的验证规则需要开发者手动完成，使用 Annotation JSR - 303 标准则不需要自定义验证器，通过注解的方式可以直接在实体类中添加每个属性的验证规则，这种方式更加方便，实际开发中推荐使用。</p><h4 id="10-1Validator接口"><a href="#10-1Validator接口" class="headerlink" title="10.1Validator接口"></a>10.1<code>Validator</code>接口</h4><ol><li>实体类Account</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现了validator接口的控制类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import org.springframework.validation.Validator;接口的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountValidator</span> <span class="keyword">implements</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Account.class.equals(aClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object o, Errors errors)</span> &#123;</span><br><span class="line">        <span class="comment">//这里直接通过Validator的工具类进行错误处理</span></span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors,<span class="string">&quot;name&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors,<span class="string">&quot;password&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>handler类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/validator&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountHandler</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;account&quot;</span>, <span class="keyword">new</span> <span class="title class_">Account</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@Validated</span> Account account, BindingResult bindingResult)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在两个login方法，而且看似第二个方法中的account是没有用的</p><blockquote><p>两个login 方法第一个是使用的Get请求，首先将能够验证的数据传入，加载到model里，前端通过form标签的modelAttribute来读取-&gt;这里同时我们不能直接进入login.jsp的而是走validator&#x2F;login来进入页面</p><p>第二个则是调用的Post请求，也就是提交的时候的数据验证，通过BindingResult来查看是否后端里的有错误，而第二个传入的Account被注解解析比对提交的时候是一致</p></blockquote><ol start="3"><li>前端jsp</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;form:form modelAttribute=<span class="string">&quot;account&quot;</span> method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;/validator/login&quot;</span>&gt;</span><br><span class="line">       用户名:&lt;form:input path=<span class="string">&quot;name&quot;</span> &gt;&lt;/form:input&gt;&lt;form:errors path=<span class="string">&quot;name&quot;</span>&gt;&lt;/form:errors&gt;&lt;br&gt;</span><br><span class="line">       密 码:&lt;form:input path=<span class="string">&quot;password&quot;</span>&gt;&lt;/form:input&gt;&lt;form:errors path=<span class="string">&quot;password&quot;</span>&gt;&lt;/form:errors&gt;&lt;br&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;submit&quot;</span>value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">   &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>modelAttribute来读取存储的类，提交必须是post请求</p><p>后面就是input标签传递参数，和用error标签传出错误信息</p><ol start="4"><li>配置springmvc.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountValidator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Lei.Validator.AccountValidator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">&quot;accountValidator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-2Annotation-JSR-303-标准"><a href="#10-2Annotation-JSR-303-标准" class="headerlink" title="10.2Annotation JSR - 303 标准"></a>10.2Annotation JSR - 303 标准</h4><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jboss-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建实体类并添加Validator注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import org.hibernate.validator.constraints.Email;</span></span><br><span class="line"><span class="comment">//import org.hibernate.validator.constraints.NotEmpty;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Size(min = 6, max = 12, message = &quot;密码6-12位&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Email(regexp = &quot;^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\\\.[a-zA-Z0-9-]+)*\\\\.[a-zA-Z0-9]&#123;2,6&#125;$&quot;, message = &quot;请输入正确的邮箱格式&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\\\\\\\d&#123;8&#125;$&quot;, message = &quot;请输入正确的电话&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的email和phoe是用的正则表达式</p><ol start="3"><li>handler兼控制器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;person&quot;</span>,<span class="keyword">new</span> <span class="title class_">Person</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(<span class="meta">@Valid</span> Person person,BindingResult bindingResult)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>前端jsp</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form:form modelAttribute=<span class="string">&quot;person&quot;</span> action=<span class="string">&quot;/validator/register&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;form:input path=<span class="string">&quot;username&quot;</span>&gt;&lt;/form:input&gt;&lt;form:errors path=<span class="string">&quot;username&quot;</span>&gt;&lt;/form:errors&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;form:input path=<span class="string">&quot;password&quot;</span>&gt;&lt;/form:input&gt;&lt;form:errors path=<span class="string">&quot;password&quot;</span>&gt;&lt;/form:errors&gt;&lt;br/&gt;</span><br><span class="line">        邮箱：&lt;form:input path=<span class="string">&quot;email&quot;</span>&gt;&lt;/form:input&gt;&lt;form:errors path=<span class="string">&quot;email&quot;</span>&gt;&lt;/form:errors&gt;&lt;br/&gt;</span><br><span class="line">        电话：&lt;form:input path=<span class="string">&quot;phone&quot;</span>&gt;&lt;/form:input&gt;&lt;form:errors path=<span class="string">&quot;phone&quot;</span>&gt;&lt;/form:errors&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>在springmvc.xml添加配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>补充注解规则</li></ol><table><thead><tr><th>注释名</th><th>效果</th></tr></thead><tbody><tr><td>@Null</td><td>被注解的元素必须为null</td></tr><tr><td>@NotNull</td><td>被注解的元素不能为null</td></tr><tr><td>@Min(value)</td><td>被注解的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td>被注解的元素必须是一个数字，其值必须小于于等于指定的最大值</td></tr><tr><td>@Email</td><td>被注解的元素必须是电子邮箱地址</td></tr><tr><td>@Pattern</td><td>被注解的元素必须符合对应的正则表达式</td></tr><tr><td>@Length</td><td>被注解的元素的大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>被注解的字符串的值必须非空</td></tr></tbody></table><p>注：Null 和 Empty 是不同的结果，String str &#x3D; null，str 是 null，String str &#x3D; “”，str 不是 null，其值为空。</p>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/java/">java</category>
      
      <category domain="https://leileigwl.github.io/tags/spring/">spring</category>
      
      <category domain="https://leileigwl.github.io/tags/%E6%A1%86%E6%9E%B6/">框架</category>
      
      <category domain="https://leileigwl.github.io/tags/springmvc/">springmvc</category>
      
      
      <comments>https://leileigwl.github.io/post/6ebdac3b.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>常用算法模板</title>
      <link>https://leileigwl.github.io/post/40cff7d.html</link>
      <guid>https://leileigwl.github.io/post/40cff7d.html</guid>
      <pubDate>Mon, 08 May 2023 09:00:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;快速排序算法模板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快排&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>快速排序算法模板</strong></p><p><strong>快排</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void quick_sort(int q[], int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if (l &gt;= r) return;</span><br><span class="line"></span><br><span class="line">    int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1];</span><br><span class="line">    while (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        do i ++ ; while (q[i] &lt; x);</span><br><span class="line">        do j -- ; while (q[j] &gt; x);</span><br><span class="line">        if (i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(q, l, j), quick_sort(q, j + 1, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>归并排序算法模板</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void merge_sort(int q[], int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if (l &gt;= r) return;</span><br><span class="line"></span><br><span class="line">    int mid = l + r &gt;&gt; 1;</span><br><span class="line">    merge_sort(q, l, mid);</span><br><span class="line">    merge_sort(q, mid + 1, r);</span><br><span class="line">    </span><br><span class="line">    int k = 0, i = l, j = mid + 1;</span><br><span class="line">    while (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        if (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        else tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    </span><br><span class="line">    while (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    while (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    </span><br><span class="line">    for (i = l, j = 0; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>整数二分算法模板</strong><br>bool check(int x) {&#x2F;* … *&#x2F;} &#x2F;&#x2F; 检查x是否满足某种性质</p><p>&#x2F;&#x2F; 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int bsearch_1(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) r = mid;    // check()判断mid是否满足性质</span><br><span class="line">        else l = mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int bsearch_2(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r + 1 &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) l = mid;</span><br><span class="line">        else r = mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>浮点数二分算法模板</strong><br>bool check(double x) {&#x2F;* … *&#x2F;} &#x2F;&#x2F; 检查x是否满足某种性质</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">double bsearch_3(double l, double r)</span><br><span class="line">&#123;</span><br><span class="line">    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求</span><br><span class="line">    while (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        double mid = (l + r) / 2;</span><br><span class="line">        if (check(mid)) r = mid;</span><br><span class="line">        else l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>高精度加法</strong> </p><p>&#x2F;&#x2F; C &#x3D; A + B, A &gt;&#x3D; 0, B &gt;&#x3D; 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">    if (A.size() &lt; B.size()) return add(B, A);</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line">    int t = 0;</span><br><span class="line">    for (int i = 0; i &lt; A.size(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t += A[i];</span><br><span class="line">        if (i &lt; B.size()) t += B[i];</span><br><span class="line">        C.push_back(t % 10);</span><br><span class="line">        t /= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (t) C.push_back(t);</span><br><span class="line">    return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>高精度减法</strong><br>&#x2F;&#x2F; C &#x3D; A - B, 满足A &gt;&#x3D; B, A &gt;&#x3D; 0, B &gt;&#x3D; 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line">    for (int i = 0, t = 0; i &lt; A.size(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        if (i &lt; B.size()) t -= B[i];</span><br><span class="line">        C.push_back((t + 10) % 10);</span><br><span class="line">        if (t &lt; 0) t = 1;</span><br><span class="line">        else t = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();</span><br><span class="line">    return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>高精度乘低精度</strong><br>&#x2F;&#x2F; C &#x3D; A * b, A &gt;&#x3D; 0, b &gt;&#x3D; 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line"></span><br><span class="line">    int t = 0;</span><br><span class="line">    for (int i = 0; i &lt; A.size() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        if (i &lt; A.size()) t += A[i] * b;</span><br><span class="line">        C.push_back(t % 10);</span><br><span class="line">        t /= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();</span><br><span class="line">    </span><br><span class="line">    return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>高精度除以低精度</strong><br>&#x2F;&#x2F; A &#x2F; b &#x3D; C … r, A &gt;&#x3D; 0, b &gt; 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line">    r = 0;</span><br><span class="line">    for (int i = A.size() - 1; i &gt;= 0; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * 10 + A[i];</span><br><span class="line">        C.push_back(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(C.begin(), C.end());</span><br><span class="line">    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();</span><br><span class="line">    return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一维前缀和</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S[i] = a[1] + a[2] + ... a[i]</span><br><span class="line">a[l] + ... + a[r] = S[r] - S[l - 1]</span><br></pre></td></tr></table></figure><p><strong>二维前缀和</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S[i, j] = 第i行j列格子左上部分所有元素的和</span><br><span class="line">以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：</span><br><span class="line">S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]</span><br></pre></td></tr></table></figure><p><strong>一维差分</strong><br>给区间[l, r]中的每个数加上c：B[l] +&#x3D; c, B[r + 1] -&#x3D; c<br><strong>二维差分</strong><br>给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] +&#x3D; c, S[x2 + 1, y1] -&#x3D; c, S[x1, y2 + 1] -&#x3D; c, S[x2 + 1, y2 + 1] +&#x3D; c<br><strong>位运算</strong><br>求n的第k位数字: n &gt;&gt; k &amp; 1<br>返回n的最后一位1：lowbit(n) &#x3D; n &amp; -n<br><strong>双指针算法</strong><br>for (int i &#x3D; 0, j &#x3D; 0; i &lt; n; i ++ )<br>{<br>    while (j &lt; i &amp;&amp; check(i, j)) j ++ ;</p><pre><code>// 具体问题的逻辑</code></pre><p>}<br>常见问题分类：<br>    (1) 对于一个序列，用两个指针维护一段区间<br>    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作<br><strong>离散化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; alls; // 存储所有待离散化的值</span><br><span class="line">sort(alls.begin(), alls.end()); // 将所有值排序</span><br><span class="line">alls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 二分求出x对应的离散化的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int find(int x) // 找到第一个大于等于x的位置</span><br><span class="line">&#123;</span><br><span class="line">    int l = 0, r = alls.size() - 1;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        else l = mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return r + 1; // 映射到1, 2, ...n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>区间合并</strong><br>&#x2F;&#x2F; 将所有存在交集的区间合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void merge(vector&lt;PII&gt; &amp;segs)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line"></span><br><span class="line">    sort(segs.begin(), segs.end());</span><br><span class="line">    </span><br><span class="line">    int st = -2e9, ed = -2e9;</span><br><span class="line">    for (auto seg : segs)</span><br><span class="line">        if (ed &lt; seg.first)</span><br><span class="line">        &#123;</span><br><span class="line">            if (st != -2e9) res.push_back(&#123;st, ed&#125;);</span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">        else ed = max(ed, seg.second);</span><br><span class="line">    </span><br><span class="line">    if (st != -2e9) res.push_back(&#123;st, ed&#125;);</span><br><span class="line">    </span><br><span class="line">    segs = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>单链表</strong><br>&#x2F;&#x2F; head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点<br>int head, e[N], ne[N], idx;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 初始化</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    head = -1;</span><br><span class="line">    idx = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在链表头插入一个数a</span><br><span class="line">void insert(int a)</span><br><span class="line">&#123;</span><br><span class="line">    e[idx] = a, ne[idx] = head, head = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将头结点删除，需要保证头结点存在</span><br><span class="line">void remove()</span><br><span class="line">&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>双链表</strong><br>&#x2F;&#x2F; e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点<br>int e[N], l[N], r[N], idx;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 初始化</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    //0是左端点，1是右端点</span><br><span class="line">    r[0] = 1, l[1] = 0;</span><br><span class="line">    idx = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在节点a的右边插入一个数x</span><br><span class="line">void insert(int a, int x)</span><br><span class="line">&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = a, r[idx] = r[a];</span><br><span class="line">    l[r[a]] = idx, r[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除节点a</span><br><span class="line">void remove(int a)</span><br><span class="line">&#123;</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>栈</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// tt表示栈顶</span><br><span class="line">int stk[N], tt = 0;</span><br><span class="line"></span><br><span class="line">// 向栈顶插入一个数</span><br><span class="line">stk[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line">// 从栈顶弹出一个数</span><br><span class="line">tt -- ;</span><br><span class="line"></span><br><span class="line">// 栈顶的值</span><br><span class="line">stk[tt];</span><br><span class="line"></span><br><span class="line">// 判断栈是否为空</span><br><span class="line">if (tt &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>队列</strong></p><ol><li>普通队列：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// hh 表示队头，tt表示队尾</span><br><span class="line">int q[N], hh = 0, tt = -1;</span><br><span class="line"></span><br><span class="line">// 向队尾插入一个数</span><br><span class="line">q[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line">// 从队头弹出一个数</span><br><span class="line">hh ++ ;</span><br><span class="line"></span><br><span class="line">// 队头的值</span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line">// 判断队列是否为空</span><br><span class="line">if (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>循环队列</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// hh 表示队头，tt表示队尾的后一个位置</span><br><span class="line">int q[N], hh = 0, tt = 0;</span><br><span class="line"></span><br><span class="line">// 向队尾插入一个数</span><br><span class="line">q[tt ++ ] = x;</span><br><span class="line">if (tt == N) tt = 0;</span><br><span class="line"></span><br><span class="line">// 从队头弹出一个数</span><br><span class="line">hh ++ ;</span><br><span class="line">if (hh == N) hh = 0;</span><br><span class="line"></span><br><span class="line">// 队头的值</span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line">// 判断队列是否为空</span><br><span class="line">if (hh != tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**单调栈 **<br>常见模型：找出每个数左边离它最近的比它大&#x2F;小的数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int tt = 0;</span><br><span class="line">for (int i = 1; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    while (tt &amp;&amp; check(stk[tt], i)) tt -- ;</span><br><span class="line">    stk[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>单调队列</strong><br>常见模型：找出滑动窗口中的最大值&#x2F;最小值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int hh = 0, tt = -1;</span><br><span class="line">for (int i = 0; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    while (hh &lt;= tt &amp;&amp; check_out(q[hh])) hh ++ ;  // 判断队头是否滑出窗口</span><br><span class="line">    while (hh &lt;= tt &amp;&amp; check(q[tt], i)) tt -- ;</span><br><span class="line">    q[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KMP</strong><br>&#x2F;&#x2F; s[]是长文本，p[]是模式串，n是s的长度，m是p的长度<br>求模式串的Next数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 2, j = 0; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    while (j &amp;&amp; p[i] != p[j + 1]) j = ne[j];</span><br><span class="line">    if (p[i] == p[j + 1]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 匹配</span><br><span class="line">for (int i = 1, j = 0; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    while (j &amp;&amp; s[i] != p[j + 1]) j = ne[j];</span><br><span class="line">    if (s[i] == p[j + 1]) j ++ ;</span><br><span class="line">    if (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        // 匹配成功后的逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Trie树</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">int son[N][26], cnt[N], idx;</span><br><span class="line">// 0号点既是根节点，又是空节点</span><br><span class="line">// son[][]存储树中每个节点的子节点</span><br><span class="line">// cnt[]存储以每个节点结尾的单词数量</span><br><span class="line">// 插入一个字符串</span><br><span class="line">void insert(char *str)</span><br><span class="line">&#123;</span><br><span class="line">    int p = 0;</span><br><span class="line">    for (int i = 0; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        int u = str[i] - &#x27;a&#x27;;</span><br><span class="line">        if (!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询字符串出现的次数</span><br><span class="line">int query(char *str)</span><br><span class="line">&#123;</span><br><span class="line">    int p = 0;</span><br><span class="line">    for (int i = 0; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        int u = str[i] - &#x27;a&#x27;;</span><br><span class="line">        if (!son[p][u]) return 0;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    return cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>并查集</strong><br>(1)朴素并查集：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int p[N]; //存储每个点的祖宗节点</span><br><span class="line"></span><br><span class="line">// 返回x的祖宗节点</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if (p[x] != x) p[x] = find(p[x]);</span><br><span class="line">    return p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化，假定节点编号是1~n</span><br><span class="line">for (int i = 1; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"></span><br><span class="line">// 合并a和b所在的两个集合：</span><br><span class="line">p[find(a)] = find(b);</span><br></pre></td></tr></table></figure><p>(2)维护size的并查集：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int p[N], size[N];</span><br><span class="line">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span><br><span class="line"></span><br><span class="line">// 返回x的祖宗节点</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if (p[x] != x) p[x] = find(p[x]);</span><br><span class="line">    return p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化，假定节点编号是1~n</span><br><span class="line">for (int i = 1; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    size[i] = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 合并a和b所在的两个集合：</span><br><span class="line">size[find(b)] += size[find(a)];</span><br><span class="line">p[find(a)] = find(b);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(3)维护到祖宗节点距离的并查集：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int p[N], d[N];</span><br><span class="line">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span><br><span class="line"></span><br><span class="line">// 返回x的祖宗节点</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if (p[x] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        int u = find(p[x]);</span><br><span class="line">        d[x] += d[p[x]];</span><br><span class="line">        p[x] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    return p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化，假定节点编号是1~n</span><br><span class="line">for (int i = 1; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    d[i] = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 合并a和b所在的两个集合：</span><br><span class="line">p[find(a)] = find(b);</span><br><span class="line">d[find(a)] = distance; // 根据具体问题，初始化find(a)的偏移量</span><br></pre></td></tr></table></figure><p><strong>堆</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span><br><span class="line">// ph[k]存储第k个插入的点在堆中的位置</span><br><span class="line">// hp[k]存储堆中下标是k的点是第几个插入的</span><br><span class="line">int h[N], ph[N], hp[N], size;</span><br><span class="line"></span><br><span class="line">// 交换两个点，及其映射关系</span><br><span class="line">void heap_swap(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    swap(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">    swap(hp[a], hp[b]);</span><br><span class="line">    swap(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void down(int u)</span><br><span class="line">&#123;</span><br><span class="line">    int t = u;</span><br><span class="line">    if (u * 2 &lt;= size &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2;</span><br><span class="line">    if (u * 2 + 1 &lt;= size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1;</span><br><span class="line">    if (u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        heap_swap(u, t);</span><br><span class="line">        down(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void up(int u)</span><br><span class="line">&#123;</span><br><span class="line">    while (u / 2 &amp;&amp; h[u] &lt; h[u / 2])</span><br><span class="line">    &#123;</span><br><span class="line">        heap_swap(u, u / 2);</span><br><span class="line">        u &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; O(n)建堆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (int i = n / 2; i; i -- ) down(i);</span><br></pre></td></tr></table></figure><p><strong>一般哈希</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(1) 拉链法</span><br><span class="line"></span><br><span class="line">    int h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line">    // 向哈希表中插入一个数</span><br><span class="line">    void insert(int x)</span><br><span class="line">    &#123;</span><br><span class="line">        int k = (x % N + N) % N;</span><br><span class="line">        e[idx] = x;</span><br><span class="line">        ne[idx] = h[k];</span><br><span class="line">        h[k] = idx ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 在哈希表中查询某个数是否存在</span><br><span class="line">    bool find(int x)</span><br><span class="line">    &#123;</span><br><span class="line">        int k = (x % N + N) % N;</span><br><span class="line">        for (int i = h[k]; i != -1; i = ne[i])</span><br><span class="line">            if (e[i] == x)</span><br><span class="line">                return true;</span><br><span class="line">    </span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">(2) 开放寻址法</span><br><span class="line">    int h[N];</span><br><span class="line"></span><br><span class="line">    // 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span><br><span class="line">    int find(int x)</span><br><span class="line">    &#123;</span><br><span class="line">        int t = (x % N + N) % N;</span><br><span class="line">        while (h[t] != null &amp;&amp; h[t] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            t ++ ;</span><br><span class="line">            if (t == N) t = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>字符串哈希</strong><br>核心思想：将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低<br>小技巧：取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">typedef unsigned long long ULL;</span><br><span class="line">ULL h[N], p[N]; // h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span><br><span class="line">// 初始化</span><br><span class="line">p[0] = 1;</span><br><span class="line">for (int i = 1; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    h[i] = h[i - 1] * P + str[i];</span><br><span class="line">    p[i] = p[i - 1] * P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 计算子串 str[l ~ r] 的哈希值</span><br><span class="line">ULL get(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    return h[r] - h[l - 1] * p[r - l + 1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>树与图的存储</strong><br>树是一种特殊的图，与图的存储方式相同。<br>对于无向图中的边ab，存储两条有向边a-&gt;b, b-&gt;a。<br>因此我们可以只考虑有向图的存储。</p><p>(1) 邻接矩阵：g[a][b] 存储边a-&gt;b</p><p>(2) 邻接表：</p><p>&#x2F;&#x2F; 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int h[N], e[N], ne[N], idx;</span><br><span class="line">// 添加一条边a-&gt;b</span><br><span class="line">void add(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">idx = 0;</span><br><span class="line">memset(h, -1, sizeof h);</span><br></pre></td></tr></table></figure><p><strong>树与图的遍历</strong><br>时间复杂度 O(n+m)O(n+m), nn 表示点数，mm 表示边数<br>(1) <strong>深度优先遍历</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int dfs(int u)</span><br><span class="line">&#123;</span><br><span class="line">    st[u] = true; // st[u] 表示点u已经被遍历过</span><br><span class="line"></span><br><span class="line">    for (int i = h[u]; i != -1; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        int j = e[i];</span><br><span class="line">        if (!st[j]) dfs(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) <strong>宽度优先遍历</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;int&gt; q;</span><br><span class="line">st[1] = true; // 表示1号点已经被遍历过</span><br><span class="line">q.push(1);</span><br><span class="line"></span><br><span class="line">while (q.size())</span><br><span class="line">&#123;</span><br><span class="line">    int t = q.front();</span><br><span class="line">    q.pop();</span><br><span class="line"></span><br><span class="line">    for (int i = h[t]; i != -1; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        int j = e[i];</span><br><span class="line">        if (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = true; // 表示点j已经被遍历过</span><br><span class="line">            q.push(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拓扑排序</strong><br>时间复杂度 O(n+m)O(n+m), nn 表示点数，mm 表示边数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">bool topsort()</span><br><span class="line">&#123;</span><br><span class="line">    int hh = 0, tt = -1;</span><br><span class="line"></span><br><span class="line">    // d[i] 存储点i的入度</span><br><span class="line">    for (int i = 1; i &lt;= n; i ++ )</span><br><span class="line">        if (!d[i])</span><br><span class="line">            q[ ++ tt] = i;</span><br><span class="line">    </span><br><span class="line">    while (hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        int t = q[hh ++ ];</span><br><span class="line">    </span><br><span class="line">        for (int i = h[t]; i != -1; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            int j = e[i];</span><br><span class="line">            if (-- d[j] == 0)</span><br><span class="line">                q[ ++ tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。</span><br><span class="line">    return tt == n - 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>朴素dijkstra算法</strong><br>时间复杂是 O(n2+m)O(n2+m), nn 表示点数，mm 表示边数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int g[N][N];  // 存储每条边</span><br><span class="line">int dist[N];  // 存储1号点到每个点的最短距离</span><br><span class="line">bool st[N];   // 存储每个点的最短路是否已经确定</span><br><span class="line"></span><br><span class="line">// 求1号点到n号点的最短路，如果不存在则返回-1</span><br><span class="line">int dijkstra()</span><br><span class="line">&#123;</span><br><span class="line">    memset(dist, 0x3f, sizeof dist);</span><br><span class="line">    dist[1] = 0;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; n - 1; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        int t = -1;     // 在还未确定最短路的点中，寻找距离最小的点</span><br><span class="line">        for (int j = 1; j &lt;= n; j ++ )</span><br><span class="line">            if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">    </span><br><span class="line">        // 用t更新其他点的距离</span><br><span class="line">        for (int j = 1; j &lt;= n; j ++ )</span><br><span class="line">            dist[j] = min(dist[j], dist[t] + g[t][j]);</span><br><span class="line">    </span><br><span class="line">        st[t] = true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (dist[n] == 0x3f3f3f3f) return -1;</span><br><span class="line">    return dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>堆优化版dijkstra</strong><br>时间复杂度 O(mlogn)O(mlogn), nn 表示点数，mm 表示边数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">typedef pair&lt;int, int&gt; PII;</span><br><span class="line">int n;      // 点的数量</span><br><span class="line">int h[N], w[N], e[N], ne[N], idx;       // 邻接表存储所有边</span><br><span class="line">int dist[N];        // 存储所有点到1号点的距离</span><br><span class="line">bool st[N];     // 存储每个点的最短距离是否已确定</span><br><span class="line"></span><br><span class="line">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span><br><span class="line">int dijkstra()</span><br><span class="line">&#123;</span><br><span class="line">    memset(dist, 0x3f, sizeof dist);</span><br><span class="line">    dist[1] = 0;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    heap.push(&#123;0, 1&#125;);      // first存储距离，second存储节点编号</span><br><span class="line"></span><br><span class="line">    while (heap.size())</span><br><span class="line">    &#123;</span><br><span class="line">        auto t = heap.top();</span><br><span class="line">        heap.pop();</span><br><span class="line">    </span><br><span class="line">        int ver = t.second, distance = t.first;</span><br><span class="line">    </span><br><span class="line">        if (st[ver]) continue;</span><br><span class="line">        st[ver] = true;</span><br><span class="line">    </span><br><span class="line">        for (int i = h[ver]; i != -1; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            int j = e[i];</span><br><span class="line">            if (dist[j] &gt; distance + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.push(&#123;dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (dist[n] == 0x3f3f3f3f) return -1;</span><br><span class="line">    return dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Bellman-Ford算法</strong><br>时间复杂度 O(nm)O(nm), nn 表示点数，mm 表示边数<br>注意在模板题中需要对下面的模板稍作修改，加上备份数组，详情见模板题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">int n, m;       // n表示点数，m表示边数</span><br><span class="line">int dist[N];        // dist[x]存储1到x的最短路距离</span><br><span class="line"></span><br><span class="line">struct Edge     // 边，a表示出点，b表示入点，w表示边的权重</span><br><span class="line">&#123;</span><br><span class="line">    int a, b, w;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span><br><span class="line">int bellman_ford()</span><br><span class="line">&#123;</span><br><span class="line">    memset(dist, 0x3f, sizeof dist);</span><br><span class="line">    dist[1] = 0;</span><br><span class="line"></span><br><span class="line">    // 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span><br><span class="line">    for (int i = 0; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        for (int j = 0; j &lt; m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            int a = edges[j].a, b = edges[j].b, w = edges[j].w;</span><br><span class="line">            if (dist[b] &gt; dist[a] + w)</span><br><span class="line">                dist[b] = dist[a] + w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (dist[n] &gt; 0x3f3f3f3f / 2) return -1;</span><br><span class="line">    return dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>spfa 算法（队列优化的Bellman-Ford算法）</strong><br>时间复杂度 平均情况下 O(m)O(m)，最坏情况下 O(nm)O(nm), nn 表示点数，mm 表示边数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">int n;      // 总点数</span><br><span class="line">int h[N], w[N], e[N], ne[N], idx;       // 邻接表存储所有边</span><br><span class="line">int dist[N];        // 存储每个点到1号点的最短距离</span><br><span class="line">bool st[N];     // 存储每个点是否在队列中</span><br><span class="line"></span><br><span class="line">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span><br><span class="line">int spfa()</span><br><span class="line">&#123;</span><br><span class="line">    memset(dist, 0x3f, sizeof dist);</span><br><span class="line">    dist[1] = 0;</span><br><span class="line"></span><br><span class="line">    queue&lt;int&gt; q;</span><br><span class="line">    q.push(1);</span><br><span class="line">    st[1] = true;</span><br><span class="line">    </span><br><span class="line">    while (q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        auto t = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">    </span><br><span class="line">        st[t] = false;</span><br><span class="line">    </span><br><span class="line">        for (int i = h[t]; i != -1; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            int j = e[i];</span><br><span class="line">            if (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                if (!st[j])     // 如果队列中已存在j，则不需要将j重复插入</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(j);</span><br><span class="line">                    st[j] = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (dist[n] == 0x3f3f3f3f) return -1;</span><br><span class="line">    return dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>spfa判断图中是否存在负环</strong><br>时间复杂度是 O(nm)O(nm), nn 表示点数，mm 表示边数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">int n;      // 总点数</span><br><span class="line">int h[N], w[N], e[N], ne[N], idx;       // 邻接表存储所有边</span><br><span class="line">int dist[N], cnt[N];        // dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span><br><span class="line">bool st[N];     // 存储每个点是否在队列中</span><br><span class="line"></span><br><span class="line">// 如果存在负环，则返回true，否则返回false。</span><br><span class="line">bool spfa()</span><br><span class="line">&#123;</span><br><span class="line">    // 不需要初始化dist数组</span><br><span class="line">    // 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span><br><span class="line"></span><br><span class="line">    queue&lt;int&gt; q;</span><br><span class="line">    for (int i = 1; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        q.push(i);</span><br><span class="line">        st[i] = true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    while (q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        auto t = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">    </span><br><span class="line">        st[t] = false;</span><br><span class="line">    </span><br><span class="line">        for (int i = h[t]; i != -1; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            int j = e[i];</span><br><span class="line">            if (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                cnt[j] = cnt[t] + 1;</span><br><span class="line">                if (cnt[j] &gt;= n) return true;       // 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span><br><span class="line">                if (!st[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(j);</span><br><span class="line">                    st[j] = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>floyd算法</strong><br>时间复杂度是 O(n3)O(n3), nn 表示点数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">初始化：</span><br><span class="line">    for (int i = 1; i &lt;= n; i ++ )</span><br><span class="line">        for (int j = 1; j &lt;= n; j ++ )</span><br><span class="line">            if (i == j) d[i][j] = 0;</span><br><span class="line">            else d[i][j] = INF;</span><br><span class="line"></span><br><span class="line">// 算法结束后，d[a][b]表示a到b的最短距离</span><br><span class="line">void floyd()</span><br><span class="line">&#123;</span><br><span class="line">    for (int k = 1; k &lt;= n; k ++ )</span><br><span class="line">        for (int i = 1; i &lt;= n; i ++ )</span><br><span class="line">            for (int j = 1; j &lt;= n; j ++ )</span><br><span class="line">                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>朴素版prim算法</strong><br>时间复杂度是 O(n2+m)O(n2+m), nn 表示点数，mm 表示边数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">int n;      // n表示点数</span><br><span class="line">int g[N][N];        // 邻接矩阵，存储所有边</span><br><span class="line">int dist[N];        // 存储其他点到当前最小生成树的距离</span><br><span class="line">bool st[N];     // 存储每个点是否已经在生成树中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span><br><span class="line">int prim()</span><br><span class="line">&#123;</span><br><span class="line">    memset(dist, 0x3f, sizeof dist);</span><br><span class="line"></span><br><span class="line">    int res = 0;</span><br><span class="line">    for (int i = 0; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        int t = -1;</span><br><span class="line">        for (int j = 1; j &lt;= n; j ++ )</span><br><span class="line">            if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">    </span><br><span class="line">        if (i &amp;&amp; dist[t] == INF) return INF;</span><br><span class="line">    </span><br><span class="line">        if (i) res += dist[t];</span><br><span class="line">        st[t] = true;</span><br><span class="line">    </span><br><span class="line">        for (int j = 1; j &lt;= n; j ++ ) dist[j] = min(dist[j], g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Kruskal算法</strong><br>时间复杂度是 O(mlogm)O(mlogm), nn 表示点数，mm 表示边数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">int n, m;       // n是点数，m是边数</span><br><span class="line">int p[N];       // 并查集的父节点数组</span><br><span class="line"></span><br><span class="line">struct Edge     // 存储边</span><br><span class="line">&#123;</span><br><span class="line">    int a, b, w;</span><br><span class="line"></span><br><span class="line">    bool operator&lt; (const Edge &amp;W)const</span><br><span class="line">    &#123;</span><br><span class="line">        return w &lt; W.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line">int find(int x)     // 并查集核心操作</span><br><span class="line">&#123;</span><br><span class="line">    if (p[x] != x) p[x] = find(p[x]);</span><br><span class="line">    return p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int kruskal()</span><br><span class="line">&#123;</span><br><span class="line">    sort(edges, edges + m);</span><br><span class="line"></span><br><span class="line">    for (int i = 1; i &lt;= n; i ++ ) p[i] = i;    // 初始化并查集</span><br><span class="line">    </span><br><span class="line">    int res = 0, cnt = 0;</span><br><span class="line">    for (int i = 0; i &lt; m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        int a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line">    </span><br><span class="line">        a = find(a), b = find(b);</span><br><span class="line">        if (a != b)     // 如果两个连通块不连通，则将这两个连通块合并</span><br><span class="line">        &#123;</span><br><span class="line">            p[a] = b;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (cnt &lt; n - 1) return INF;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>染色法判别二分图</strong><br>时间复杂度是 O(n+m)O(n+m), nn 表示点数，mm 表示边数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">int n;      // n表示点数</span><br><span class="line">int h[N], e[M], ne[M], idx;     // 邻接表存储图</span><br><span class="line">int color[N];       // 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色</span><br><span class="line"></span><br><span class="line">// 参数：u表示当前节点，c表示当前点的颜色</span><br><span class="line">bool dfs(int u, int c)</span><br><span class="line">&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    for (int i = h[u]; i != -1; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        int j = e[i];</span><br><span class="line">        if (color[j] == -1)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!dfs(j, !c)) return false;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (color[j] == c) return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool check()</span><br><span class="line">&#123;</span><br><span class="line">    memset(color, -1, sizeof color);</span><br><span class="line">    bool flag = true;</span><br><span class="line">    for (int i = 1; i &lt;= n; i ++ )</span><br><span class="line">        if (color[i] == -1)</span><br><span class="line">            if (!dfs(i, 0))</span><br><span class="line">            &#123;</span><br><span class="line">                flag = false;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">    return flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>匈牙利算法</strong><br>时间复杂度是 O(nm)O(nm), nn 表示点数，mm 表示边数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">int n1, n2;     // n1表示第一个集合中的点数，n2表示第二个集合中的点数</span><br><span class="line">int h[N], e[M], ne[M], idx;     // 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边</span><br><span class="line">int match[N];       // 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span><br><span class="line">bool st[N];     // 表示第二个集合中的每个点是否已经被遍历过</span><br><span class="line"></span><br><span class="line">bool find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = h[x]; i != -1; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        int j = e[i];</span><br><span class="line">        if (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = true;</span><br><span class="line">            if (match[j] == 0 || find(match[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                match[j] = x;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span><br><span class="line">int res = 0;</span><br><span class="line">for (int i = 1; i &lt;= n1; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    memset(st, false, sizeof st);</span><br><span class="line">    if (find(i)) res ++ ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>试除法判定质数</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool is_prime(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if (x &lt; 2) return false;</span><br><span class="line">    for (int i = 2; i &lt;= x / i; i ++ )</span><br><span class="line">        if (x % i == 0)</span><br><span class="line">            return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>试除法分解质因数</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void divide(int x)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 2; i &lt;= x / i; i ++ )</span><br><span class="line">        if (x % i == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            int s = 0;</span><br><span class="line">            while (x % i == 0) x /= i, s ++ ;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    if (x &gt; 1) cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; 1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>朴素筛法求素数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int primes[N], cnt;     // primes[]存储所有素数</span><br><span class="line">bool st[N];         // st[x]存储x是否被筛掉</span><br><span class="line"></span><br><span class="line">void get_primes(int n)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 2; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        if (st[i]) continue;</span><br><span class="line">        primes[cnt ++ ] = i;</span><br><span class="line">        for (int j = i + i; j &lt;= n; j += i)</span><br><span class="line">            st[j] = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>线性筛法求素数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int primes[N], cnt;     // primes[]存储所有素数</span><br><span class="line">bool st[N];         // st[x]存储x是否被筛掉</span><br><span class="line"></span><br><span class="line">void get_primes(int n)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 2; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        if (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line">        for (int j = 0; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = true;</span><br><span class="line">            if (i % primes[j] == 0) break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>试除法求所有约数</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; get_divisors(int x)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; res;</span><br><span class="line">    for (int i = 1; i &lt;= x / i; i ++ )</span><br><span class="line">        if (x % i == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(i);</span><br><span class="line">            if (i != x / i) res.push_back(x / i);</span><br><span class="line">        &#125;</span><br><span class="line">    sort(res.begin(), res.end());</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>约数个数和约数之和</strong><br>如果 N &#x3D; p1^c1 * p2^c2 * … *pk^ck<br>约数个数： (c1 + 1) * (c2 + 1) * … * (ck + 1)<br>约数之和： (p1^0 + p1^1 + … + p1^c1) * … * (pk^0 + pk^1 + … + pk^ck)<br>欧几里得算法 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int gcd(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    return b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>求欧拉函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int phi(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int res = x;</span><br><span class="line">    for (int i = 2; i &lt;= x / i; i ++ )</span><br><span class="line">        if (x % i == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            res = res / i * (i - 1);</span><br><span class="line">            while (x % i == 0) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    if (x &gt; 1) res = res / x * (x - 1);</span><br><span class="line"></span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>筛法求欧拉函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int primes[N], cnt;     // primes[]存储所有素数</span><br><span class="line">int euler[N];           // 存储每个数的欧拉函数</span><br><span class="line">bool st[N];         // st[x]存储x是否被筛掉</span><br><span class="line"></span><br><span class="line">void get_eulers(int n)</span><br><span class="line">&#123;</span><br><span class="line">    euler[1] = 1;</span><br><span class="line">    for (int i = 2; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        if (!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            primes[cnt ++ ] = i;</span><br><span class="line">            euler[i] = i - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int j = 0; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            int t = primes[j] * i;</span><br><span class="line">            st[t] = true;</span><br><span class="line">            if (i % primes[j] == 0)</span><br><span class="line">            &#123;</span><br><span class="line">                euler[t] = euler[i] * primes[j];</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            euler[t] = euler[i] * (primes[j] - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快速幂</strong><br>求 m^k mod p，时间复杂度 O(logk)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int qmi(int m, int k, int p)</span><br><span class="line">&#123;</span><br><span class="line">    int res = 1 % p, t = m;</span><br><span class="line">    while (k)</span><br><span class="line">    &#123;</span><br><span class="line">        if (k&amp;1) res = res * t % p;</span><br><span class="line">        t = t * t % p;</span><br><span class="line">        k &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展欧几里得算法</strong></p><p>&#x2F;&#x2F; 求x, y，使得ax + by &#x3D; gcd(a, b)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int exgcd(int a, int b, int &amp;x, int &amp;y)</span><br><span class="line">&#123;</span><br><span class="line">    if (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = 1; y = 0;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    int d = exgcd(b, a % b, y, x);</span><br><span class="line">    y -= (a/b) * x;</span><br><span class="line">    return d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>高斯消元</strong><br>&#x2F;&#x2F; a[N][N]是增广矩阵</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">int gauss()</span><br><span class="line">&#123;</span><br><span class="line">    int c, r;</span><br><span class="line">    for (c = 0, r = 0; c &lt; n; c ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        int t = r;</span><br><span class="line">        for (int i = r; i &lt; n; i ++ )   // 找到绝对值最大的行</span><br><span class="line">            if (fabs(a[i][c]) &gt; fabs(a[t][c]))</span><br><span class="line">                t = i;</span><br><span class="line"></span><br><span class="line">        if (fabs(a[t][c]) &lt; eps) continue;</span><br><span class="line">    </span><br><span class="line">        for (int i = c; i &lt;= n; i ++ ) swap(a[t][i], a[r][i]);      // 将绝对值最大的行换到最顶端</span><br><span class="line">        for (int i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];      // 将当前行的首位变成1</span><br><span class="line">        for (int i = r + 1; i &lt; n; i ++ )       // 用当前行将下面所有的列消成0</span><br><span class="line">            if (fabs(a[i][c]) &gt; eps)</span><br><span class="line">                for (int j = n; j &gt;= c; j -- )</span><br><span class="line">                    a[i][j] -= a[r][j] * a[i][c];</span><br><span class="line">    </span><br><span class="line">        r ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (r &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i = r; i &lt; n; i ++ )</span><br><span class="line">            if (fabs(a[i][n]) &gt; eps)</span><br><span class="line">                return 2; // 无解</span><br><span class="line">        return 1; // 有无穷多组解</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for (int i = n - 1; i &gt;= 0; i -- )</span><br><span class="line">        for (int j = i + 1; j &lt; n; j ++ )</span><br><span class="line">            a[i][n] -= a[i][j] * a[j][n];</span><br><span class="line">    </span><br><span class="line">    return 0; // 有唯一解</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递推法求组合数</strong><br>&#x2F;&#x2F; c[a][b] 表示从a个苹果中选b个的方案数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; N; i ++ )</span><br><span class="line">    for (int j = 0; j &lt;= i; j ++ )</span><br><span class="line">        if (!j) c[i][j] = 1;</span><br><span class="line">        else c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod;</span><br><span class="line">通过预处理逆元的方式求组合数 —— 模板题 AcWing 886. 求组合数 II</span><br><span class="line">首先预处理出所有阶乘取模的余数fact[N]，以及所有阶乘取模的逆元infact[N]</span><br><span class="line">如果取模的数是质数，可以用费马小定理求逆元</span><br><span class="line">int qmi(int a, int k, int p)    // 快速幂模板</span><br><span class="line">&#123;</span><br><span class="line">    int res = 1;</span><br><span class="line">    while (k)</span><br><span class="line">    &#123;</span><br><span class="line">        if (k &amp; 1) res = (LL)res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        k &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 预处理阶乘的余数和阶乘逆元的余数</span><br><span class="line">fact[0] = infact[0] = 1;</span><br><span class="line">for (int i = 1; i &lt; N; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    fact[i] = (LL)fact[i - 1] * i % mod;</span><br><span class="line">    infact[i] = (LL)infact[i - 1] * qmi(i, mod - 2, mod) % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Lucas定理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">若p是质数，则对于任意整数 1 &lt;= m &lt;= n，有：</span><br><span class="line">    C(n, m) = C(n % p, m % p) * C(n / p, m / p) (mod p)</span><br><span class="line"></span><br><span class="line">int qmi(int a, int k, int p)  // 快速幂模板</span><br><span class="line">&#123;</span><br><span class="line">    int res = 1 % p;</span><br><span class="line">    while (k)</span><br><span class="line">    &#123;</span><br><span class="line">        if (k &amp; 1) res = (LL)res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        k &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int C(int a, int b, int p)  // 通过定理求组合数C(a, b)</span><br><span class="line">&#123;</span><br><span class="line">    if (a &lt; b) return 0;</span><br><span class="line"></span><br><span class="line">    LL x = 1, y = 1;  // x是分子，y是分母</span><br><span class="line">    for (int i = a, j = 1; j &lt;= b; i --, j ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        x = (LL)x * i % p;</span><br><span class="line">        y = (LL) y * j % p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return x * (LL)qmi(y, p - 2, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int lucas(LL a, LL b, int p)</span><br><span class="line">&#123;</span><br><span class="line">    if (a &lt; p &amp;&amp; b &lt; p) return C(a, b, p);</span><br><span class="line">    return (LL)C(a % p, b % p, p) * lucas(a / p, b / p, p) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分解质因数法求组合数</strong><br>当我们需要求出组合数的真实值，而非对某个数的余数时，分解质因数的方式比较好用：<br>    1. 筛法求出范围内的所有质数<br>        2. 通过 C(a, b) &#x3D; a! &#x2F; b! &#x2F; (a - b)! 这个公式求出每个质因子的次数。 n! 中p的次数是 n &#x2F; p + n &#x2F; p^2 + n &#x2F; p^3 + …<br>        3. 用高精度乘法将所有质因子相乘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">int primes[N], cnt;     // 存储所有质数</span><br><span class="line">int sum[N];     // 存储每个质数的次数</span><br><span class="line">bool st[N];     // 存储每个数是否已被筛掉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void get_primes(int n)      // 线性筛法求素数</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 2; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        if (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line">        for (int j = 0; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = true;</span><br><span class="line">            if (i % primes[j] == 0) break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int get(int n, int p)       // 求n！中的次数</span><br><span class="line">&#123;</span><br><span class="line">    int res = 0;</span><br><span class="line">    while (n)</span><br><span class="line">    &#123;</span><br><span class="line">        res += n / p;</span><br><span class="line">        n /= p;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; mul(vector&lt;int&gt; a, int b)       // 高精度乘低精度模板</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; c;</span><br><span class="line">    int t = 0;</span><br><span class="line">    for (int i = 0; i &lt; a.size(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t += a[i] * b;</span><br><span class="line">        c.push_back(t % 10);</span><br><span class="line">        t /= 10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (t)</span><br><span class="line">    &#123;</span><br><span class="line">        c.push_back(t % 10);</span><br><span class="line">        t /= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get_primes(a);  // 预处理范围内的所有质数</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; cnt; i ++ )     // 求每个质因数的次数</span><br><span class="line">&#123;</span><br><span class="line">    int p = primes[i];</span><br><span class="line">    sum[i] = get(a, p) - get(b, p) - get(a - b, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; res;</span><br><span class="line">res.push_back(1);</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; cnt; i ++ )     // 用高精度乘法将所有质因子相乘</span><br><span class="line">    for (int j = 0; j &lt; sum[i]; j ++ )</span><br><span class="line">        res = mul(res, primes[i]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/algorithm/">algorithm</category>
      
      <category domain="https://leileigwl.github.io/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      <category domain="https://leileigwl.github.io/tags/%E6%A8%A1%E6%9D%BF/">模板</category>
      
      
      <comments>https://leileigwl.github.io/post/40cff7d.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vue.js 拓展无法使用</title>
      <link>https://leileigwl.github.io/post/eee6aa3f.html</link>
      <guid>https://leileigwl.github.io/post/eee6aa3f.html</guid>
      <pubDate>Mon, 08 May 2023 08:58:40 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;vue-js拓展无法启用&quot;&gt;&lt;a href=&quot;#vue-js拓展无法启用&quot; class=&quot;headerlink&quot; title=&quot;vue.js拓展无法启用&quot;&gt;&lt;/a&gt;vue.js拓展无法启用&lt;/h2&gt;&lt;h3 id=&quot;这里我以自己的谷歌浏览器演示&quot;&gt;&lt;a href=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="vue-js拓展无法启用"><a href="#vue-js拓展无法启用" class="headerlink" title="vue.js拓展无法启用"></a>vue.js拓展无法启用</h2><h3 id="这里我以自己的谷歌浏览器演示"><a href="#这里我以自己的谷歌浏览器演示" class="headerlink" title="这里我以自己的谷歌浏览器演示"></a>这里我以自己的谷歌浏览器演示</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\维磊\AppData\Local\Google\Chrome\User Data\Default\Extensions\nhdogjmejiglipccpnnnanhbledajbpd\6.4.5_0</span><br></pre></td></tr></table></figure><h4 id="在路径中点开文件夹找到manifest-json文件"><a href="#在路径中点开文件夹找到manifest-json文件" class="headerlink" title="在路径中点开文件夹找到manifest.json文件"></a>在路径中点开文件夹找到<code>manifest.json</code>文件</h4><h4 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h4><p>更改文件中的字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;persistent&quot;</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="我的manifest-json文件完整展示"><a href="#我的manifest-json文件完整展示" class="headerlink" title="我的manifest.json文件完整展示"></a>我的<code>manifest.json</code>文件完整展示</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;background&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;persistent&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;scripts&quot;</span>: [ <span class="string">&quot;build/background.js&quot;</span> ]</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">&quot;browser_action&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;default_icon&quot;</span>: &#123;</span><br><span class="line">         <span class="string">&quot;128&quot;</span>: <span class="string">&quot;icons/128-gray.png&quot;</span>,</span><br><span class="line">         <span class="string">&quot;16&quot;</span>: <span class="string">&quot;icons/16-gray.png&quot;</span>,</span><br><span class="line">         <span class="string">&quot;48&quot;</span>: <span class="string">&quot;icons/48-gray.png&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;default_popup&quot;</span>: <span class="string">&quot;popups/not-found.html&quot;</span>,</span><br><span class="line">      <span class="string">&quot;default_title&quot;</span>: <span class="string">&quot;Vue Devtools&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">&quot;content_scripts&quot;</span>: [ &#123;</span><br><span class="line">      <span class="string">&quot;js&quot;</span>: [ <span class="string">&quot;build/hook.js&quot;</span> ],</span><br><span class="line">      <span class="string">&quot;matches&quot;</span>: [ <span class="string">&quot;\u003Call_urls&gt;&quot;</span> ],</span><br><span class="line">      <span class="string">&quot;run_at&quot;</span>: <span class="string">&quot;document_start&quot;</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">      <span class="string">&quot;js&quot;</span>: [ <span class="string">&quot;build/detector.js&quot;</span> ],</span><br><span class="line">      <span class="string">&quot;matches&quot;</span>: [ <span class="string">&quot;\u003Call_urls&gt;&quot;</span> ],</span><br><span class="line">      <span class="string">&quot;run_at&quot;</span>: <span class="string">&quot;document_idle&quot;</span></span><br><span class="line">   &#125; ],</span><br><span class="line">   <span class="string">&quot;content_security_policy&quot;</span>: <span class="string">&quot;script-src &#x27;self&#x27;; object-src &#x27;self&#x27;&quot;</span>,</span><br><span class="line">   <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Browser DevTools extension for debugging Vue.js applications.&quot;</span>,</span><br><span class="line">   <span class="string">&quot;devtools_page&quot;</span>: <span class="string">&quot;devtools-background.html&quot;</span>,</span><br><span class="line">   <span class="string">&quot;icons&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;128&quot;</span>: <span class="string">&quot;icons/128.png&quot;</span>,</span><br><span class="line">      <span class="string">&quot;16&quot;</span>: <span class="string">&quot;icons/16.png&quot;</span>,</span><br><span class="line">      <span class="string">&quot;48&quot;</span>: <span class="string">&quot;icons/48.png&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">&quot;key&quot;</span>: <span class="string">&quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAgJeMqfZu44CZ6O6SbpANnImOjQWgDPTyRXnvtYmAmZsC4o+mGZLWSdJph50Rdcipn+P66YvwrzN5ZSU8fz51d+C7OfCQiW3KnvBKYuSzF7AWciOx0crrVkCKZVgWh1GyEQS5Cpeifz/UZaXLoTqSqqFut/DeSCpMTFVIAvPksG3MGZI6jGIQd3CemEKUOXLUveNVbv8dEpxy/5NeUea4/wO6Kpa0zbEz1zQXrF0jOqsLC2d2hUOHPaAEc7h9uDal1cFsxG3e7ZQeGUPie3ho8bZfLPXYLj5dpDrRxVrxA92airJWOAQf8fqpKNm6SMw87NheU3xwmfV3EMpAWVen6wIDAQAB&quot;</span>,</span><br><span class="line">   <span class="string">&quot;manifest_version&quot;</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Vue.js devtools&quot;</span>,</span><br><span class="line">   <span class="string">&quot;permissions&quot;</span>: [ <span class="string">&quot;\u003Call_urls&gt;&quot;</span>, <span class="string">&quot;storage&quot;</span> ],</span><br><span class="line">   <span class="string">&quot;update_url&quot;</span>: <span class="string">&quot;https://clients2.google.com/service/update2/crx&quot;</span>,</span><br><span class="line">   <span class="string">&quot;version&quot;</span>: <span class="string">&quot;6.4.5&quot;</span>,</span><br><span class="line">   <span class="string">&quot;version_name&quot;</span>: <span class="string">&quot;6.4.5&quot;</span>,</span><br><span class="line">   <span class="string">&quot;web_accessible_resources&quot;</span>: [ <span class="string">&quot;devtools.html&quot;</span>, <span class="string">&quot;devtools-background.html&quot;</span>, <span class="string">&quot;build/backend.js&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="重启浏览器"><a href="#重启浏览器" class="headerlink" title="重启浏览器"></a>重启浏览器</h4><p>后面重启就可以了</p>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E6%8B%93%E5%B1%95/">拓展</category>
      
      
      <comments>https://leileigwl.github.io/post/eee6aa3f.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript 加密解密模块</title>
      <link>https://leileigwl.github.io/post/c4626f5f.html</link>
      <guid>https://leileigwl.github.io/post/c4626f5f.html</guid>
      <pubDate>Mon, 08 May 2023 08:49:10 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;常见加密算法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对称加密（加密解密密钥相同）：DES、3DES、AES、RC4、Rabbit&lt;/li&gt;
&lt;li&gt;非对称加密（区分公钥和私钥）：RSA、DSA、ECC&lt;/li&gt;
&lt;li&gt;消息摘要算法&amp;#x2F;签名算法：MD5、SHA、HMAC、PB</description>
        
      
      
      
      <content:encoded><![CDATA[<p>常见加密算法：</p><ol><li>对称加密（加密解密密钥相同）：DES、3DES、AES、RC4、Rabbit</li><li>非对称加密（区分公钥和私钥）：RSA、DSA、ECC</li><li>消息摘要算法&#x2F;签名算法：MD5、SHA、HMAC、PBKDF2</li></ol><p>常见编码算法：Base64</p><h3 id="JavaScript-加密解密模块"><a href="#JavaScript-加密解密模块" class="headerlink" title="JavaScript 加密解密模块"></a>JavaScript 加密解密模块</h3><h4 id="Crypto-JS"><a href="#Crypto-JS" class="headerlink" title="Crypto-JS"></a>Crypto-JS</h4><p>Crypto-JS 支持 MD5、SHA、RIPEMD-160、HMAC、PBKDF2、AES、DES、3DES（Triple DES）、Rabbit、RC4 等，<strong>不支持 RSA、ECC</strong>，是应用比较广的加密模块，使用命令 <code>npm install crypto-js</code> 安装。</p><p>参考资料：</p><ul><li>Crypto-JS 文档：<a href="https://cryptojs.gitbook.io/docs/">https://cryptojs.gitbook.io/docs/</a></li><li>Crypto-JS Github：<a href="https://github.com/brix/crypto-js">https://github.com/brix/crypto-js</a></li></ul><h4 id="Node-RSA"><a href="#Node-RSA" class="headerlink" title="Node-RSA"></a>Node-RSA</h4><p>Node-RSA 对  RSA 算法提供了支持，使用命令 <code>npm install node-rsa</code> 安装。</p><p>参考资料：Node-RSA Github：<a href="https://github.com/rzcoder/node-rsa">https://github.com/rzcoder/node-rsa</a></p><h4 id="JSEncrypt"><a href="#JSEncrypt" class="headerlink" title="JSEncrypt"></a>JSEncrypt</h4><p>参考资料：JSEncrypt 对  RSA 算法提供了更加全面的支持，使用命令 <code>npm install jsencrypt</code> 安装。</p><ul><li>JSEncrypt 文档：<a href="http://travistidwell.com/jsencrypt/">http://travistidwell.com/jsencrypt/</a></li><li>JSEncrypt Github：<a href="https://github.com/travist/jsencrypt">https://github.com/travist/jsencrypt</a></li></ul><h3 id="Python-加密解密库"><a href="#Python-加密解密库" class="headerlink" title="Python 加密解密库"></a>Python 加密解密库</h3><h4 id="Cryptodome-amp-Crypto"><a href="#Cryptodome-amp-Crypto" class="headerlink" title="Cryptodome &amp; Crypto"></a>Cryptodome &amp; Crypto</h4><p>在 Python 中有很多算法是通过第三方库 Cryptodome 或者 Crypto 来实现的，Cryptodome 几乎是 Crypto 的替代品，Crypto 已经停止更新好多年了，有很多未知错误，所以<strong>不建议安装 Crypto ！</strong></p><p>Cryptodome 支持几乎所有主流加密算法，包括 MD5、SHA、BLAKE2b、BLAKE2s、HMAC、PBKDF2、AES、DES、3DES（Triple DES）、ECC、RSA、RC4 等。</p><p>Cryptodome 使用命令 <code>pip install pycryptodome</code> 进行安装，Crypto 使用命令 <code>pip install pycrypto</code> 进行安装。</p><p>参考资料：</p><ul><li>Crypto 库：<a href="https://www.dlitz.net/software/pycrypto/">https://www.dlitz.net/software/pycrypto/</a></li><li>Cryptodome 库：<a href="https://www.pycryptodome.org/en/latest/">https://www.pycryptodome.org/en/latest/</a></li></ul><h4 id="Hashlib"><a href="#Hashlib" class="headerlink" title="Hashlib"></a>Hashlib</h4><p>Python 的标准库 hashlib 提供了常见的摘要算法，如 MD5，SHA、BLAKE2b、BLAKE2s 等。</p><p>参考资料：</p><ul><li>hashlib 库：<a href="https://docs.python.org/3/library/hashlib.html">https://docs.python.org/3/library/hashlib.html</a></li><li>廖雪峰 hashlib：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017686752491744">https://www.liaoxuefeng.com/wiki/1016959663602400/1017686752491744</a></li></ul><h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p>Python 的标准库 hmac 对 HMAC 算法提供了支持。</p><p>参考资料：</p><ul><li>hmac 库：<a href="https://docs.python.org/3/library/hmac.html">https://docs.python.org/3/library/hmac.html</a></li><li>廖雪峰 hmac：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1183198304823296">https://www.liaoxuefeng.com/wiki/1016959663602400/1183198304823296</a></li></ul><h4 id="pyDes"><a href="#pyDes" class="headerlink" title="pyDes"></a>pyDes</h4><p>Python 的第三方库 pyDes 对 DES 算法提供了支持。使用命令 <code>pip install pydes</code> 进行安装。</p><p>参考资料：pyDes 库：<a href="https://github.com/twhiteman/pyDes">https://github.com/twhiteman/pyDes</a></p><h4 id="ESA"><a href="#ESA" class="headerlink" title="ESA"></a>ESA</h4><p>Python 的第三方库 rsa 对 RSA 算法提供了支持。使用命令 <code>pip install rsa</code> 进行安装。</p><p>参考资料：rsa 库：<a href="https://stuvel.eu/python-rsa-doc/">https://stuvel.eu/python-rsa-doc/</a></p><h2 id="加密解密基本参数"><a href="#加密解密基本参数" class="headerlink" title="加密解密基本参数"></a>加密解密基本参数</h2><p>在一些对称和非对称加密算法中，经常会用到以下三个参数：初始向量 iv、加密模式 mode、填充方式 padding，先介绍一下这三个参数的含义和作用：</p><h3 id="初始向量-iv"><a href="#初始向量-iv" class="headerlink" title="初始向量 iv"></a>初始向量 iv</h3><p>在密码学中，初始向量（initialization vector，缩写为 iv），又称初始变数（starting variable，缩写为 sv），与密钥结合使用，作为加密数据的手段，它是一个固定长度的值，iv 的长度取决于加密方法，通常与使用的加密密钥或密码块的长度相当，一般在使用过程中会要求它是随机数或拟随机数，使用随机数产生的初始向量才能达到语义安全，让攻击者难以对原文一致且使用同一把密钥生成的密文进行破解。</p><p>参考资料：维基百科：<a href="https://en.wikipedia.org/wiki/Initialization_vector">https://en.wikipedia.org/wiki/Initialization_vector</a></p><h3 id="加密模式-mode"><a href="#加密模式-mode" class="headerlink" title="加密模式 mode"></a>加密模式 mode</h3><p>目前流行的加密和数字认证算法，都是采用块加密方式，就是将需要加密的明文分成固定大小的数据块，然后对其执行密码算法，得到密文。数据块的大小通常采用跟密钥一样的长度。加密模式在加密算法的基础上发展出来，同时也可以独立于加密算法而存在，加密模式定义了怎样通过重复利用加密算法将大于一个数据块大小的明文转化为密文，描述了加密每一数据块的过程。目前利用较多的加密模式有以下几种：</p><ul><li><strong>ECB：Electronic Code Book（电子码本模式）</strong>，是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。</li><li><strong>CBC：Cipher Block Chaining（密码块链接模式）</strong>，是一种循环模式，前一个分组的密文和当前分组的明文异或操作后再加密，这样做的目的是增强破解难度。</li><li><strong>PCBC：Propagating Cipher Block Chaining（填充密码块链接模式）</strong>，也称为明文密码块链接模式（Plaintext Cipher Block Chaining），是一种可以使密文中的微小更改在解密时导致明文大部分错误的模式，并在加密的时候也具有同样的特性。</li><li><strong>CFB：Cipher Feedback（密码反馈模式）</strong>，可以将块密码变为自同步的流密码，类似于 CBC，CFB 的解密过程几乎就是颠倒的 CBC 的加密过程。</li><li><strong>OFB：Output Feedback（输出反馈模式）</strong>，可以将块密码变成同步的流密码，它产生密钥流的块，然后将其与明文块进行异或，得到密文。与其它流密码一样，密文中一个位的翻转会使明文中同样位置的位也产生翻转。</li><li><strong>CTR：Counter mode（计数器模式）</strong>，也被称为 ICM 模式（Integer Counter Mode，整数计数模式）和 SIC 模式（Segmented Integer Counter），在 CTR 模式中，有一个自增的算子，这个算子用密钥加密之后的输出和明文异或的结果得到密文，相当于一次一密。这种加密方式简单快速，安全可靠，而且可以并行加密，但是在计算器不能维持很长的情况下，密钥只能使用一次。</li></ul><p>参考资料：维基百科：<a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation</a></p><h3 id="填充方式-padding"><a href="#填充方式-padding" class="headerlink" title="填充方式 padding"></a>填充方式 padding</h3><p>块密码只能对确定长度的数据块进行处理，而消息的长度通常是可变的。因此部分模式最后一块数据在加密前需要进行填充。有数种填充方法，其中最简单的一种是在明文的最后填充空字符以使其长度为块长度的整数倍。常见填充方式有以下几种：</p><ul><li><strong>PKCS7</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为需要填充的字节长度值。</li><li><strong>PKCS5</strong>：PKCS5 作为 PKCS7 的子集算法，概念上没有什么区别，只是在 blockSize 上固定为 8 bytes，即块大小固定为 8 字节。</li><li><strong>ZeroPadding</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为 0 。</li><li><strong>ISO10126</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充随机数值。</li><li><strong>ANSIX923</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充数字零。</li></ul><p>参考资料：</p><ul><li>维基百科：<a href="https://en.wikipedia.org/wiki/Padding_(cryptography)">https://en.wikipedia.org/wiki/Padding_(cryptography)</a></li><li>PKCS7&#x2F;PKCS5 填充算法：<a href="https://segmentfault.com/a/1190000019793040">https://segmentfault.com/a/1190000019793040</a></li></ul><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>简介：Base64 是一种用 64 个字符来表示任意二进制数据的方法。</p><p>参考资料：</p><ul><li>Base64 百度百科：<a href="https://baike.baidu.com/item/base64/8545775">https://baike.baidu.com/item/base64/8545775</a></li><li>Base64 维基百科：<a href="https://en.wikipedia.org/wiki/Base64">https://en.wikipedia.org/wiki/Base64</a></li></ul><h3 id="JavaScript-实现"><a href="#JavaScript-实现" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function base64Encode() &#123;</span><br><span class="line">    var srcs = CryptoJS.enc.Utf8.parse(text);</span><br><span class="line">    var encodeData = CryptoJS.enc.Base64.stringify(srcs);</span><br><span class="line">    return encodeData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function base64Decode() &#123;</span><br><span class="line">    var srcs = CryptoJS.enc.Base64.parse(encodeData);</span><br><span class="line">    var decodeData = srcs.toString(CryptoJS.enc.Utf8);</span><br><span class="line">    return decodeData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;</span><br><span class="line"></span><br><span class="line">var encodeData = base64Encode()</span><br><span class="line">var decodeData = base64Decode()</span><br><span class="line"></span><br><span class="line">console.log(&quot;Base64 编码: &quot;, encodeData)</span><br><span class="line">console.log(&quot;Base64 解码: &quot;, decodeData)</span><br><span class="line"></span><br><span class="line">// Base64 编码:  SSBsb3ZlIFB5dGhvbiE=</span><br><span class="line">// Base64 解码:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def base64_encode(text):</span><br><span class="line">    encode_data = base64.b64encode(text.encode())</span><br><span class="line">    return encode_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def base64_decode(encode_data):</span><br><span class="line">    decode_data = base64.b64decode(encode_data)</span><br><span class="line">    return decode_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    text = &#x27;I love Python!&#x27;</span><br><span class="line">    encode_data = base64_encode(text)</span><br><span class="line">    decode_data = base64_decode(encode_data)</span><br><span class="line">    print(&#x27;Base64 编码：&#x27;, encode_data)</span><br><span class="line">    print(&#x27;Base64 解码：&#x27;, decode_data)</span><br><span class="line"></span><br><span class="line"># Base64 编码：b&#x27;SSBsb3ZlIFB5dGhvbiE=&#x27;</span><br><span class="line"># Base64 解码：b&#x27;I love Python!&#x27;</span><br></pre></td></tr></table></figure><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>简介：全称 MD5 消息摘要算法（英文名称：MD5 Message-Digest Algorithm），又称哈希算法、散列算法，由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于 1992 年作为 RFC 1321 被公布，用以取代 MD4 算法。摘要算法是单向加密的，也就是说明文通过摘要算法加密之后，是不能解密的。摘要算法的第二个特点密文是固定长度的，它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。之所以叫摘要算法，它的算法就是提取明文重要的特征。所以，两个不同的明文，使用了摘要算法之后，有可能他们的密文是一样的，不过这个概率非常的低。</p><p>参考资料：</p><ul><li>RFC 1321：<a href="https://datatracker.ietf.org/doc/rfc1321/">https://datatracker.ietf.org/doc/rfc1321/</a></li><li>MD5 维基百科：<a href="https://en.wikipedia.org/wiki/MD5">https://en.wikipedia.org/wiki/MD5</a></li></ul><h3 id="JavaScript-实现-1"><a href="#JavaScript-实现-1" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function MD5Test() &#123;</span><br><span class="line">    var text = &quot;I love python!&quot;</span><br><span class="line">    return CryptoJS.MD5(text).toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(MD5Test())  // 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br></pre></td></tr></table></figure><h3 id="Python-实现-1"><a href="#Python-实现-1" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5_test1():</span><br><span class="line">    md5 = hashlib.new(&#x27;md5&#x27;, &#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5_test2():</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(&#x27;I love &#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    md5.update(&#x27;python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    md5_test1()  # 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br><span class="line">    md5_test2()  # 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br></pre></td></tr></table></figure><h2 id="PBKDF2"><a href="#PBKDF2" class="headerlink" title="PBKDF2"></a>PBKDF2</h2><p>简介：英文名称：Password-Based Key Derivation Function 2，PBKDF2 是 RSA 实验室的公钥加密标准（PKCS）系列的一部分，2017 年发布的 RFC 8018 （PKCS #5 v2.1）推荐使用 PBKDF2 进行密码散列。PBKDF2 将伪随机函数（例如 HMAC），把明文和一个盐值（salt）作为输入参数，然后进行重复运算，并最终产生密钥，如果重复的次数足够大，破解的成本就会变得很高。</p><p>参考资料：</p><ul><li>RFC 8018：<a href="https://datatracker.ietf.org/doc/rfc8018/">https://datatracker.ietf.org/doc/rfc8018/</a></li><li>PBKDF2 维基百科：<a href="https://en.wikipedia.org/wiki/PBKDF2">https://en.wikipedia.org/wiki/PBKDF2</a></li></ul><h3 id="JavaScript-实现-2"><a href="#JavaScript-实现-2" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function pbkdf2Encrypt() &#123;</span><br><span class="line">    var text = &quot;I love Python!&quot;</span><br><span class="line">    var salt = &quot;43215678&quot;</span><br><span class="line">    // key 长度 128，10 次重复运算</span><br><span class="line">    var encryptedData = CryptoJS.PBKDF2(text, salt, &#123;keySize: 128/32,iterations: 10&#125;);</span><br><span class="line">    return encryptedData.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(pbkdf2Encrypt())  // 7fee6e8350cfe96314c76aaa6e853a50</span><br></pre></td></tr></table></figure><h3 id="Python-实现-2"><a href="#Python-实现-2" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">from Cryptodome.Hash import SHA1</span><br><span class="line">from Cryptodome.Protocol.KDF import PBKDF2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = &#x27;I love Python!&#x27;</span><br><span class="line">salt = b&#x27;43215678&#x27;</span><br><span class="line">result = PBKDF2(text,  salt, count=10, hmac_hash_module=SHA1)</span><br><span class="line">result = binascii.hexlify(result)</span><br><span class="line">print(result)</span><br><span class="line"># b&#x27;7fee6e8350cfe96314c76aaa6e853a50&#x27;</span><br></pre></td></tr></table></figure><h2 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h2><p>简介：全称安全哈希算法（英文名称：Secure Hash Algorithm），由美国国家安全局（NSA）所设计，主要适用于数字签名标准（Digital Signature Standard DSS）里面定义的数字签名算法（Digital Signature Algorithm DSA），SHA 通常指 SHA 家族的五个算法，分别是 SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，后四者有时并称为 SHA-2，SHA 是比 MD5 更安全一点的摘要算法，MD5 的密文是 32 位，而 SHA-1 是 40 位，版本越强，密文越长，代价是速度越慢。</p><p>参考资料：</p><ul><li>RFC 3174：<a href="https://datatracker.ietf.org/doc/rfc3174/">https://datatracker.ietf.org/doc/rfc3174/</a></li><li>SHA 维基百科：<a href="https://en.wikipedia.org/wiki/Secure_Hash_Algorithms">https://en.wikipedia.org/wiki/Secure_Hash_Algorithms</a></li></ul><h3 id="JavaScript-实现-3"><a href="#JavaScript-实现-3" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function SHA1Encrypt() &#123;</span><br><span class="line">    var text = &quot;I love python!&quot;</span><br><span class="line">    return CryptoJS.SHA1(text).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(SHA1Encrypt())  // 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br></pre></td></tr></table></figure><h3 id="Python-实现-3"><a href="#Python-实现-3" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sha1_test1():</span><br><span class="line">    sha1 = hashlib.new(&#x27;sha1&#x27;, &#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sha1_test2():</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(&#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    sha1_test1()  # 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br><span class="line">    sha1_test2()  # 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br></pre></td></tr></table></figure><h2 id="HMAC-1"><a href="#HMAC-1" class="headerlink" title="HMAC"></a>HMAC</h2><p>简介：全称散列消息认证码、密钥相关的哈希运算消息认证码（英文名称：Hash-based Message Authentication Code 或者 Keyed-hash Message Authentication Code），于 1996 年提出，1997 年作为 RFC 2104 被公布，HMAC 加密算法是一种安全的基于加密 Hash 函数和共享密钥的消息认证协议，它要求通信双方共享密钥 key、约定算法、对报文进行 Hash 运算，形成固定长度的认证码。通信双方通过认证码的校验来确定报文的合法性。</p><p>参考资料：</p><ul><li>RFC 2104：<a href="https://datatracker.ietf.org/doc/rfc2104/">https://datatracker.ietf.org/doc/rfc2104/</a></li><li>HMAC 维基百科：<a href="https://en.wikipedia.org/wiki/HMAC">https://en.wikipedia.org/wiki/HMAC</a></li></ul><h3 id="JavaScript-实现-4"><a href="#JavaScript-实现-4" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function HMACEncrypt() &#123;</span><br><span class="line">    var text = &quot;I love python!&quot;</span><br><span class="line">    var key = &quot;secret&quot;</span><br><span class="line">    return CryptoJS.HmacMD5(text, key).toString();</span><br><span class="line">    // return CryptoJS.HmacSHA1(text, key).toString();</span><br><span class="line">    // return CryptoJS.HmacSHA256(text, key).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(HMACEncrypt())</span><br></pre></td></tr></table></figure><h3 id="Python-实现-4"><a href="#Python-实现-4" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import hmac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hmac_test1():</span><br><span class="line">    message = b&#x27;I love python!&#x27;</span><br><span class="line">    key = b&#x27;secret&#x27;</span><br><span class="line">    md5 = hmac.new(key, message, digestmod=&#x27;MD5&#x27;)</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hmac_test2():</span><br><span class="line">    key = &#x27;secret&#x27;.encode(&#x27;utf8&#x27;)</span><br><span class="line">    sha1 = hmac.new(key, digestmod=&#x27;sha1&#x27;)</span><br><span class="line">    sha1.update(&#x27;I love &#x27;.encode(&#x27;utf8&#x27;))</span><br><span class="line">    sha1.update(&#x27;Python!&#x27;.encode(&#x27;utf8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    hmac_test1()  # 9c503a1f852edcc3526ea56976c38edf</span><br><span class="line">    hmac_test2()  # 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span><br></pre></td></tr></table></figure><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><p>简介：全称数据加密标准（英文名称：Data Encryption Standard），加密与解密使用同一密钥，属于对称加密算法，1977 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），DES 是一个分组加密算法，使用 56 位的密钥（一般认为密钥是 64 位，但是密钥的每个第 8 位设置为奇偶校验位，所以实际上有效位只有 56 位），由于 56 位密钥长度相对较短，所以 DES 是不安全的，现在基本上已被更高级的加密标准 AES 取代。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 4772：<a href="https://datatracker.ietf.org/doc/rfc4772/">https://datatracker.ietf.org/doc/rfc4772/</a></li><li>DES 维基百科：<a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard">https://en.wikipedia.org/wiki/Data_Encryption_Standard</a></li></ul><h3 id="JavaScript-实现-5"><a href="#JavaScript-实现-5" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function desEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // CBC 加密模式，Pkcs7 填充方式</span><br><span class="line">        encrypted = CryptoJS.DES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function desDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // CBC 加密模式，Pkcs7 填充方式</span><br><span class="line">        decrypted = CryptoJS.DES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var desKey = &quot;6f726c64f2c2057&quot;    // 密钥</span><br><span class="line">var desIv = &quot;0123456789ABCDEF&quot;    // 初始向量</span><br><span class="line"></span><br><span class="line">var encryptedData = desEncrypt()</span><br><span class="line">var decryptedData = desDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  +ndbEkWNw2QAfIYQtwC14w==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现-5"><a href="#Python-实现-5" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line"># 加密模式 CBC，填充方式 PAD_PKCS5</span><br><span class="line">from pyDes import des, CBC, PAD_PKCS5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_encrypt(key, text, iv):</span><br><span class="line">    k = des(key, CBC, iv, pad=None, padmode=PAD_PKCS5)</span><br><span class="line">    en = k.encrypt(text, padmode=PAD_PKCS5)</span><br><span class="line">    return binascii.b2a_hex(en)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_decrypt(key, text, iv):</span><br><span class="line">    k = des(key, CBC, iv, pad=None, padmode=PAD_PKCS5)</span><br><span class="line">    de = k.decrypt(binascii.a2b_hex(text), padmode=PAD_PKCS5)</span><br><span class="line">    return de</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    secret_key = &#x27;12345678&#x27;   # 密钥</span><br><span class="line">    text = &#x27;I love Python!&#x27;   # 加密对象</span><br><span class="line">    iv = secret_key           # 偏移量</span><br><span class="line">    secret_str = des_encrypt(secret_key, text, iv)</span><br><span class="line">    print(&#x27;加密字符串：&#x27;, secret_str)</span><br><span class="line">    clear_str = des_decrypt(secret_key, secret_str, iv)</span><br><span class="line">    print(&#x27;解密字符串：&#x27;, clear_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密字符串：b&#x27;302d3abf2421169239f829b38a9545f1&#x27;</span><br><span class="line"># 解密字符串：b&#x27;I love Python!&#x27;</span><br></pre></td></tr></table></figure><h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h2><p>简介：全称三重数据加密算法（英文名称：Triple Data Encryption Standard、 Triple Data Encryption Algorithm、TDES、TDEA），是对称加密算法中的一种。70 年代初由 IBM 研发，后 1977 年被美国国家标准局采纳为数据加密标准，它相当于是对每个数据块应用三次 DES 加密算法。由于计算机运算能力的增强，原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，即通过增加 DES 的密钥长度来避免破解，所以严格来说 3DES 不是设计一种全新的块密码算法。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 1851：<a href="https://datatracker.ietf.org/doc/rfc1851/">https://datatracker.ietf.org/doc/rfc1851/</a></li><li>3DES 维基百科：<a href="https://en.wikipedia.org/wiki/Triple_DES">https://en.wikipedia.org/wiki/Triple_DES</a></li></ul><h3 id="JavaScript-实现-6"><a href="#JavaScript-实现-6" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function tripleDesEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // ECB 加密方式，Iso10126 填充方式</span><br><span class="line">        encrypted = CryptoJS.TripleDES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.ECB,</span><br><span class="line">            padding: CryptoJS.pad.Iso10126</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tripleDesDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // ECB 加密方式，Iso10126 填充方式</span><br><span class="line">        decrypted = CryptoJS.TripleDES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.ECB,</span><br><span class="line">            padding: CryptoJS.pad.Iso10126</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var desKey = &quot;6f726c64f2c2057c&quot;    // 密钥</span><br><span class="line">var desIv = &quot;0123456789ABCDEF&quot;    // 偏移量</span><br><span class="line"></span><br><span class="line">var encryptedData = tripleDesEncrypt()</span><br><span class="line">var decryptedData = tripleDesDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  3J0NX7x6GbewjjhoW2HKqg==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现-6"><a href="#Python-实现-6" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from Cryptodome.Cipher import DES3</span><br><span class="line">from Cryptodome import Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 需要补位，str不是16的倍数那就补足为16的倍数</span><br><span class="line">def add_to_16(value):</span><br><span class="line">    while len(value) % 16 != 0:</span><br><span class="line">        value += &#x27;\0&#x27;</span><br><span class="line">    return str.encode(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_encrypt(key, text, iv):</span><br><span class="line">    # 加密模式 OFB</span><br><span class="line">    cipher_encrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)</span><br><span class="line">    encrypted_text = cipher_encrypt.encrypt(text.encode(&quot;utf-8&quot;))</span><br><span class="line">    return encrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_decrypt(key, text, iv):</span><br><span class="line">    # 加密模式 OFB</span><br><span class="line">    cipher_decrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)</span><br><span class="line">    decrypted_text = cipher_decrypt.decrypt(text)</span><br><span class="line">    return decrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    key = &#x27;12345678&#x27;            # 密钥，16 位</span><br><span class="line">    text = &#x27;I love Python!&#x27;     # 加密对象</span><br><span class="line">    iv = Random.new().read(DES3.block_size)  # DES3.block_size == 8</span><br><span class="line">    secret_str = des_encrypt(key, text, iv)</span><br><span class="line">    print(&#x27;加密字符串：&#x27;, secret_str)</span><br><span class="line">    clear_str = des_decrypt(key, secret_str, iv)</span><br><span class="line">    print(&#x27;解密字符串：&#x27;, clear_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密字符串：b&#x27;\xa5\x8a\xd4R\x99\x16j\xba?vg\xf2\xb6\xa9&#x27;</span><br><span class="line"># 解密字符串：b&#x27;I love Python!&#x27;</span><br></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p>简介：全称高级加密标准（英文名称：Advanced Encryption Standard），在密码学中又称 Rijndael 加密法，由美国国家标准与技术研究院 （NIST）于 2001 年发布，并在 2002 年成为有效的标准，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用，它本身只有一个密钥，即用来实现加密，也用于解密。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 3268：<a href="https://datatracker.ietf.org/doc/rfc3268/">https://datatracker.ietf.org/doc/rfc3268/</a></li><li>AES 维基百科：<a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a></li></ul><h3 id="JavaScript-实现-7"><a href="#JavaScript-实现-7" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function tripleAesEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(aesKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(aesIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // CBC 加密方式，Pkcs7 填充方式</span><br><span class="line">        encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tripleAesDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(aesKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(aesIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // CBC 加密方式，Pkcs7 填充方式</span><br><span class="line">        decrypted = CryptoJS.AES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var aesKey = &quot;6f726c64f2c2057c&quot;   // 密钥，16 倍数</span><br><span class="line">var aesIv = &quot;0123456789ABCDEF&quot;    // 偏移量，16 倍数</span><br><span class="line"></span><br><span class="line">var encryptedData = tripleAesEncrypt()</span><br><span class="line">var decryptedData = tripleAesDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  dZL7TLJR786VGvuUvqYGoQ==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现-7"><a href="#Python-实现-7" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">from Cryptodome.Cipher import AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 需要补位，str不是16的倍数那就补足为16的倍数</span><br><span class="line">def add_to_16(value):</span><br><span class="line">    while len(value) % 16 != 0:</span><br><span class="line">        value += &#x27;\0&#x27;</span><br><span class="line">    return str.encode(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密方法</span><br><span class="line">def aes_encrypt(key, t, iv):</span><br><span class="line">    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))  # 初始化加密器</span><br><span class="line">    encrypt_aes = aes.encrypt(add_to_16(t))                    # 先进行 aes 加密</span><br><span class="line">    encrypted_text = str(base64.encodebytes(encrypt_aes), encoding=&#x27;utf-8&#x27;)  # 执行加密并转码返回 bytes</span><br><span class="line">    return encrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 解密方法</span><br><span class="line">def aes_decrypt(key, t, iv):</span><br><span class="line">    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))         # 初始化加密器</span><br><span class="line">    base64_decrypted = base64.decodebytes(t.encode(encoding=&#x27;utf-8&#x27;))  # 优先逆向解密 base64 成 bytes</span><br><span class="line">    decrypted_text = str(aes.decrypt(base64_decrypted), encoding=&#x27;utf-8&#x27;).replace(&#x27;\0&#x27;, &#x27;&#x27;)  # 执行解密密并转码返回str</span><br><span class="line">    return decrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    secret_key = &#x27;12345678&#x27;   # 密钥</span><br><span class="line">    text = &#x27;I love Python!&#x27;   # 加密对象</span><br><span class="line">    iv = secret_key           # 初始向量</span><br><span class="line">    encrypted_str = aes_encrypt(secret_key, text, iv)</span><br><span class="line">    print(&#x27;加密字符串：&#x27;, encrypted_str)</span><br><span class="line">    decrypted_str = aes_decrypt(secret_key, encrypted_str, iv)</span><br><span class="line">    print(&#x27;解密字符串：&#x27;, decrypted_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密字符串：lAVKvkQh+GtdNpoKf4/mHA==</span><br><span class="line"># 解密字符串：I love Python!</span><br></pre></td></tr></table></figure><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><p>简介：英文名称：Rivest Cipher 4，也称为 ARC4 或 ARCFOUR，是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4 是有线等效加密（WEP）中采用的加密算法，也曾经是 TLS 可采用的算法之一，该算法的速度可以达到 DES 加密的 10 倍左右，且具有很高级别的非线性，虽然它在软件方面的简单性和速度非常出色，但在 RC4 中发现了多个漏洞，它特别容易受到攻击，RC4 作为一种老旧的验证和加密算法易于受到黑客攻击，现在逐渐不推荐使用了。</p><p>参考资料：</p><ul><li>RFC 7465：<a href="https://datatracker.ietf.org/doc/rfc7465/">https://datatracker.ietf.org/doc/rfc7465/</a></li><li>RC4 维基百科：<a href="https://en.wikipedia.org/wiki/RC4">https://en.wikipedia.org/wiki/RC4</a></li></ul><h3 id="JavaScript-实现-8"><a href="#JavaScript-实现-8" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function RC4Encrypt() &#123;</span><br><span class="line">    return CryptoJS.RC4.encrypt(text, key).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function RC4Decrypt()&#123;</span><br><span class="line">    return CryptoJS.RC4.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;</span><br><span class="line">var key = &quot;6f726c64f2c2057c&quot;</span><br><span class="line"></span><br><span class="line">var encryptedData = RC4Encrypt()</span><br><span class="line">var decryptedData = RC4Decrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  U2FsdGVkX18hMm9WWdoEQGPolnXzlg9ryArdGNwv</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现-8"><a href="#Python-实现-8" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">from Cryptodome.Cipher import ARC4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rc4_encrypt(key, t):</span><br><span class="line">    enc = ARC4.new(key.encode(&#x27;utf8&#x27;))</span><br><span class="line">    res = enc.encrypt(t.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    res = base64.b64encode(res)</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rc4_decrypt(key, t):</span><br><span class="line">    data = base64.b64decode(t)</span><br><span class="line">    enc = ARC4.new(key.encode(&#x27;utf8&#x27;))</span><br><span class="line">    res = enc.decrypt(data)</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    secret_key = &#x27;12345678&#x27;   # 密钥</span><br><span class="line">    text = &#x27;I love Python!&#x27;   # 加密对象</span><br><span class="line">    encrypted_str = rc4_encrypt(secret_key, text)</span><br><span class="line">    print(&#x27;加密字符串：&#x27;, encrypted_str)</span><br><span class="line">    decrypted_str = rc4_decrypt(secret_key, encrypted_str)</span><br><span class="line">    print(&#x27;解密字符串：&#x27;, decrypted_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密字符串：b&#x27;8tNVu3/U/veJR2KgyBw=&#x27;</span><br><span class="line"># 解密字符串：b&#x27;I love Python!&#x27;</span><br></pre></td></tr></table></figure><h2 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h2><p>简介：Rabbit 加密算法是一个高性能的流密码加密方式，2003 年首次被提出，它从 128 位密钥和 64 位初始向量（iv）创建一个密钥流。</p><p>参考资料：</p><ul><li>RFC 4503：<a href="https://datatracker.ietf.org/doc/rfc4503/">https://datatracker.ietf.org/doc/rfc4503/</a></li><li>Rabbit 维基百科：<a href="https://en.wikipedia.org/wiki/Rabbit_(cipher)">https://en.wikipedia.org/wiki/Rabbit_(cipher)</a></li></ul><h3 id="JavaScript-实现-9"><a href="#JavaScript-实现-9" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function rabbitEncrypt() &#123;</span><br><span class="line">    return CryptoJS.Rabbit.encrypt(text, key).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rabbitDecrypt() &#123;</span><br><span class="line">    return CryptoJS.Rabbit.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;</span><br><span class="line">var key = &quot;6f726c64f2c2057&quot;</span><br><span class="line"></span><br><span class="line">var encryptedData = rabbitEncrypt()</span><br><span class="line">var decryptedData = rabbitDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  U2FsdGVkX1+ZVCHRXlhmG5Xw87YPWMNIBlbukuh8</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="Python-实现-9"><a href="#Python-实现-9" class="headerlink" title="Python 实现"></a>Python 实现</h3><p>目前没有找到有第三方库可以直接实现 Rabbit 算法，在 Python 中实现可以参考：<a href="https://asecuritysite.com/encryption/rabbit2">https://asecuritysite.com/encryption/rabbit2</a></p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>简介：英文名称：Rivest-Shamir-Adleman，是 1977 年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的，RSA 就是他们三人姓氏开头字母拼在一起组成的，RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。它被普遍认为是目前比较优秀的公钥方案之一。RSA是第一个能同时用于加密和数字签名的算法，它能够抵抗到目前为止已知的所有密码攻击。</p><p>参考资料：</p><ul><li>RSA 维基百科：<a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">https://en.wikipedia.org/wiki/RSA_(cryptosystem)</a></li></ul><h3 id="JavaScript-实现-10"><a href="#JavaScript-实现-10" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 引用 node-rsa 加密模块</span><br><span class="line">var NodeRSA = require(&#x27;node-rsa&#x27;);</span><br><span class="line"></span><br><span class="line">function rsaEncrypt() &#123;</span><br><span class="line">    pubKey = new NodeRSA(publicKey,&#x27;pkcs8-public&#x27;);</span><br><span class="line">    var encryptedData = pubKey.encrypt(text, &#x27;base64&#x27;);</span><br><span class="line">    return encryptedData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rsaDecrypt() &#123;</span><br><span class="line">    priKey = new NodeRSA(privatekey,&#x27;pkcs8-private&#x27;);</span><br><span class="line">    var decryptedData = priKey.decrypt(encryptedData, &#x27;utf8&#x27;);</span><br><span class="line">    return decryptedData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var key = new NodeRSA(&#123;b: 512&#125;);                    //生成512位秘钥</span><br><span class="line">var publicKey = key.exportKey(&#x27;pkcs8-public&#x27;);    //导出公钥</span><br><span class="line">var privatekey = key.exportKey(&#x27;pkcs8-private&#x27;);  //导出私钥</span><br><span class="line">var text = &quot;I love Python!&quot;</span><br><span class="line"></span><br><span class="line">var encryptedData = rsaEncrypt()</span><br><span class="line">var decryptedData = rsaDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;公钥:\n&quot;, publicKey)</span><br><span class="line">console.log(&quot;私钥:\n&quot;, privatekey)</span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">公钥:</span><br><span class="line"> -----BEGIN PUBLIC KEY-----</span><br><span class="line">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAOV1BwTJSVce/QjJAro5fXG9WzOpal09</span><br><span class="line">Qtv1yuXKE81vZSNTHxW6dICwPT/kjCfC3bA5Qs6wnYBANuwD6wlAS0UCAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">私钥:</span><br><span class="line"> -----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA5XUHBMlJVx79CMkC</span><br><span class="line">ujl9cb1bM6lqXT1C2/XK5coTzW9lI1MfFbp0gLA9P+SMJ8LdsDlCzrCdgEA27APr</span><br><span class="line">CUBLRQIDAQABAkAiXwJbJC+5PioXG80tyhjRZdT4iyMkrl2Kh2oKO9f1iLaBXLya</span><br><span class="line">D0HW82wFh+cUy8GcMl9jse8DE8wd1TdORmHhAiEA/rwmWjXHVgDqcH/fqk8Ufku0</span><br><span class="line">fXvs56h5QDoh1so5vokCIQDmmL3JDW6Y7RuK2qwFbHBZtYPRFRVdn5X1oqU2FOSX</span><br><span class="line">3QIhAOVTjVN5RtNuT6Cn/jvcpZ5tmTe+8TA8w6vGqeAsfn/BAiBvKKIUEQ2HWoU0</span><br><span class="line">YkUaODPQiteIKomqIAvB5S2O7HNlYQIgWMuLUxGZbbcAmIX+YmRXuET97S7OWv+z</span><br><span class="line">WHVfb/rbXtI=</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line">加密字符串:  hHXTF1K3w55Wd6OSjVYtqxceJ5VhlySNUahel9pwKD92Ef7wIT7DYPuJRKiqz5tuHtUqujbmbZBSL0qDE/EA+A==</span><br><span class="line">解密字符串:  I love Python!</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="Python-实现-10"><a href="#Python-实现-10" class="headerlink" title="Python 实现"></a>Python 实现</h3><p>模块：rsa：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rsa_encrypt(pu_key, t):</span><br><span class="line">    # 公钥加密</span><br><span class="line">    rsa = rsa.encrypt(t.encode(&quot;utf-8&quot;), pu_key)</span><br><span class="line">    return rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rsa_decrypt(pr_key, t):</span><br><span class="line">    # 私钥解密</span><br><span class="line">    rsa = rsa.decrypt(t, pr_key).decode(&quot;utf-8&quot;)</span><br><span class="line">    return rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    public_key, private_key = rsa.newkeys(512)   # 生成公钥、私钥</span><br><span class="line">    print(&#x27;公钥：&#x27;, public_key)</span><br><span class="line">    print(&#x27;私钥：&#x27;, private_key)</span><br><span class="line">    text = &#x27;I love Python!&#x27;  # 加密对象</span><br><span class="line">    encrypted_str = rsa_encrypt(public_key, text)</span><br><span class="line">    print(&#x27;加密字符串：&#x27;, encrypted_str)</span><br><span class="line">    decrypted_str = rsa_decrypt(private_key, encrypted_str)</span><br><span class="line">    print(&#x27;解密字符串：&#x27;, decrypted_str)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">公钥：PublicKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537)</span><br><span class="line">私钥：PrivateKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537, 3850457767980968449796700480128630632818465005441846698224554128042451115530564586537997896922067523638756079019054611200173122138274839877369624069360253, 4713180694194659323798858305046043997526301456820208338158979730140812744181638767, 1620238976946735819854194349514460863335347861649166352709029254680140139)</span><br><span class="line">加密字符串：b&quot;\x1aaeps\xa0c&#125;\xb6\xcf\xa3\xb0\xbb\xedA\x7f&#125;\x03\xdc\xd5\x1c\x9b\xdb\xda\xf9q\x80[=\xf5\x91\r\xd0&#x27;f\xce\x1f\x01\xef\xa5\xdb3\x96\t0qIxF\xbd\x11\xd6\xb25\xc5\xe1pM\xb4M\xc2\xd4\x03\xa6&quot;</span><br><span class="line">解密字符串：I love Python!</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>模块 Cryptodome：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">from Cryptodome.PublicKey import RSA</span><br><span class="line">from Cryptodome.Cipher import PKCS1_v1_5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &quot;cKK8B2rWwfwWeXhz&quot;</span><br><span class="line">public_key = &quot;MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAM1xhOWaThSMpfxFsjV5YaWOFHt+6RvS+zH2Pa47VVr8PkZYnRaaKKy2MYBuEh7mZfM/R1dUXTgu0gp6VTNeNQkCAwEAAQ==&quot;</span><br><span class="line">rsa_key = RSA.import_key(base64.b64decode(public_key))  # 导入读取到的公钥</span><br><span class="line">cipher = PKCS1_v1_5.new(rsa_key)                        # 生成对象</span><br><span class="line">cipher_text = base64.b64encode(cipher.encrypt(data.encode(encoding=&quot;utf-8&quot;)))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/javascript%E9%80%86%E5%90%91/">javascript逆向</category>
      
      <category domain="https://leileigwl.github.io/tags/%E5%8A%A0%E5%AF%86/">加密</category>
      
      
      <comments>https://leileigwl.github.io/post/c4626f5f.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vmvare虚拟机配置</title>
      <link>https://leileigwl.github.io/post/53372b84.html</link>
      <guid>https://leileigwl.github.io/post/53372b84.html</guid>
      <pubDate>Mon, 08 May 2023 08:45:57 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;vm&quot;&gt;&lt;a href=&quot;#vm&quot; class=&quot;headerlink&quot; title=&quot;vm&quot;&gt;&lt;/a&gt;vm&lt;/h2&gt;&lt;h3 id=&quot;ubuntu-18&quot;&gt;&lt;a href=&quot;#ubuntu-18&quot; class=&quot;headerlink&quot; title=&quot;ubuntu </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h2><h3 id="ubuntu-18"><a href="#ubuntu-18" class="headerlink" title="ubuntu 18"></a>ubuntu 18</h3><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><h5 id="1-查看发行版本信息"><a href="#1-查看发行版本信息" class="headerlink" title="1.查看发行版本信息"></a>1.查看发行版本信息</h5><p><strong>ubuntu 20.04</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ lsb_release -a</span><br><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 20.04.1 LTS</span><br><span class="line">Release:    20.04</span><br><span class="line">Codename:    focal</span><br><span class="line"><span class="comment">#可以看到发行版本代号为 focal</span></span><br></pre></td></tr></table></figure><p><strong>ubuntu 18.04</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ lsb_release -c</span><br><span class="line">Codename:bionic</span><br><span class="line"><span class="comment">#可以看到发行版本代号为 bionic</span></span><br></pre></td></tr></table></figure><p><strong>部分ubuntu系统LTS版本代号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu 16.04代号为：xenial</span><br><span class="line">Ubuntu 17.04代号为：zesty</span><br><span class="line">Ubuntu 18.04代号为：bionic</span><br><span class="line">Ubuntu 19.04代号为：disco</span><br><span class="line">Ubuntu 20.04代号为：focal</span><br></pre></td></tr></table></figure><h5 id="2-修改sources-list文件"><a href="#2-修改sources-list文件" class="headerlink" title="2.修改sources.list文件"></a>2.修改sources.list文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p><strong>ubuntu 20.04</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#阿里源</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p><strong>ubuntu 18.04</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#阿里源</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><h5 id="3-更新"><a href="#3-更新" class="headerlink" title="3.更新"></a>3.更新</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h4 id="静态ip"><a href="#静态ip" class="headerlink" title="静态ip"></a>静态ip</h4><h5 id="1-首先查看虚拟机的各个网络字段"><a href="#1-首先查看虚拟机的各个网络字段" class="headerlink" title="1.首先查看虚拟机的各个网络字段"></a>1.首先查看虚拟机的各个网络字段</h5><ul><li><p><img src="http://101.34.32.235:9124/i/2023/03/21/6418f9ef20ca7.jpg" alt="image-20230321082724844"></p></li><li><p>提取信息</p><ul><li><pre><code class="bash">上图所示我的NAT网络配置：    子网ip：192.168.230.0 #need 这里需要用子网ip这个同一个网段的不同地址，例如这里的就是192.168.230.*(1~255)    子网掩码：255.255.255.0    子网网关：182.168.230.2 #need<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 其次还需要从自己主机查看本地网络的dns</span><br><span class="line"></span><br><span class="line">  - ![image-20230321082911577](http://101.34.32.235:9124/i/2023/03/21/6418fa59d156f.jpg)</span><br><span class="line">  - 点击详细信息进行查看![image-20230321082947727](http://101.34.32.235:9124/i/2023/03/21/6418fa7dae72d.jpg)</span><br><span class="line"></span><br><span class="line">##### 2.下面是对虚拟机的配置</span><br><span class="line"></span><br><span class="line">- ```bash</span><br><span class="line">  sudo vim /etc/netplan/01-network-manager-all.yaml #只要配置netplan下面的这个文件就行，如果没有这个同名的，可以找一下自己的目录,只要是yaml这个后缀的就行</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><img src="http://101.34.32.235:9124/i/2023/03/21/6418faa94a8f9.jpg" alt="image-20230321082559295"></p><ul><li><p>模板</p></li><li><pre><code class="yaml">network:  version: 2  renderer: NetworkManager  ethernets:    ens32:  #配置的网卡名称      dhcp4: no    #dhcp4关闭      dhcp6: no    #dhcp6关闭      addresses: [192.168.230.128/24]   #设置本机IP及掩码      optional: true      gateway4: 192.168.230.2   #设置网关      nameservers:          addresses: [192.168.0.1]   #设置DNS<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### ssh连接</span><br><span class="line"></span><br><span class="line">##### 1.关闭防火墙</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">sudo ufw disable</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h5 id="2-安装OpenSSH"><a href="#2-安装OpenSSH" class="headerlink" title="2.安装OpenSSH"></a>2.安装OpenSSH</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server openssh-client</span><br></pre></td></tr></table></figure><h5 id="3-验证"><a href="#3-验证" class="headerlink" title="3.验证"></a>3.验证</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tnl</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/vmvare/">vmvare</category>
      
      <category domain="https://leileigwl.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/">虚拟机</category>
      
      
      <comments>https://leileigwl.github.io/post/53372b84.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>常用代理配置</title>
      <link>https://leileigwl.github.io/post/278ab762.html</link>
      <guid>https://leileigwl.github.io/post/278ab762.html</guid>
      <pubDate>Mon, 08 May 2023 08:40:16 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;常用代理设置汇总&quot;&gt;&lt;a href=&quot;#常用代理设置汇总&quot; class=&quot;headerlink&quot; title=&quot;常用代理设置汇总&quot;&gt;&lt;/a&gt;常用代理设置汇总&lt;/h2&gt;&lt;p&gt;设置代理是为了这几种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;翻墙&lt;/code&gt;&lt;/li</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="常用代理设置汇总"><a href="#常用代理设置汇总" class="headerlink" title="常用代理设置汇总"></a>常用代理设置汇总</h2><p>设置代理是为了这几种情况：</p><ul><li><code>翻墙</code></li><li>从 <code>内网</code> 访问 <code>外网</code></li><li>从 <code>内网</code> 访问 <code>内网镜像库</code>（npm、composer 等）</li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F">代理方式</a></li><li><a href="#%E4%BB%A3%E7%90%86%E5%9C%B0%E5%9D%80">代理地址</a></li><li><a href="#windows-cmd-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Windows CMD 代理设置</a></li><li><a href="#linux-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Linux 代理设置</a></li><li><a href="#mac-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Mac 代理设置</a></li><li><a href="#mac-homebrew-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Mac Homebrew 代理设置</a></li><li><a href="#git-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Git 代理设置</a></li><li><a href="#git-%E7%94%A8%E6%88%B7%E5%90%8D%E9%82%AE%E7%AE%B1%E8%AE%BE%E7%BD%AE">Git 用户名、邮箱设置</a></li><li><a href="#npm-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE--%E9%95%9C%E5%83%8F%E8%AE%BE%E7%BD%AE">npm 代理设置 + 镜像设置</a><ul><li><a href="#%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D-npm-%E9%95%9C%E5%83%8F%E6%8E%A8%E8%8D%90">使用淘宝 npm 镜像（推荐）</a></li><li><a href="#%E4%BD%BF%E7%94%A8-npm-%E5%AE%98%E6%96%B9%E9%95%9C%E5%83%8F">使用 npm 官方镜像</a></li></ul></li><li><a href="#npm-%E4%BB%A3%E7%90%86%E9%95%9C%E5%83%8F%E6%9F%A5%E7%9C%8B%E6%96%B9%E5%BC%8F">npm 代理、镜像查看方式</a></li><li><a href="#yarn-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE--%E9%95%9C%E5%83%8F%E8%AE%BE%E7%BD%AE">yarn 代理设置 + 镜像设置</a></li><li><a href="#nvm-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">nvm 代理设置</a></li><li><a href="#bower-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Bower 代理设置</a></li><li><a href="#php-composer-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">PHP Composer 代理设置</a></li><li><a href="#phpstormintellij-ideapycharmwebstormandroid-studio%E6%88%96-jetbrains-%E7%B3%BB%E5%85%B6%E4%BB%96%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">PhpStorm、IntelliJ IDEA、PyCharm、WebStorm、Android Studio（或 Jetbrains 系其他）代理设置</a></li><li><a href="#maven-%E4%BB%A3%E7%90%86%E9%95%9C%E5%83%8F%E8%AE%BE%E7%BD%AE">Maven 代理、镜像设置</a></li><li><a href="#gradle-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Gradle 代理设置</a><ul><li><a href="#python-%E7%9A%84-pip-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Python 的 pip 代理设置</a></li></ul></li><li><a href="#vscode-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">VSCode 代理设置</a></li><li><a href="#notepad-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Notepad++ 代理设置</a></li><li><a href="#sublime-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Sublime 代理设置</a></li><li><a href="#eclipse-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Eclipse 代理设置</a></li><li><a href="#atom-%E7%BC%96%E8%BE%91%E5%99%A8-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Atom 编辑器 代理设置</a></li><li><a href="#wget-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">wget 代理设置</a></li><li><a href="#curl-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">curl 代理设置</a></li><li><a href="#golang-%E7%9A%84-go-get-%E4%BB%A3%E7%90%86">Golang 的 go get 代理</a></li><li><a href="#navicat-%E8%BF%9E%E5%A4%96%E7%BD%91%E6%95%B0%E6%8D%AE%E5%BA%93">Navicat 连外网数据库</a></li><li><a href="#virtual-boxvmware-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Virtual Box、VMware 代理设置</a></li><li><a href="#xshell-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">Xshell 代理设置</a></li><li><a href="#securecrt-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">SecureCRT 代理设置</a></li><li><a href="#proxifier-%E4%B8%BA%E5%85%B6%E4%BB%96%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86">Proxifier 为其他软件设置代理</a></li><li><a href="#%E6%B3%A8%E6%84%8F%E4%B8%8A%E8%BF%B0%E4%BE%8B%E5%AD%90%E5%9D%87%E4%B8%BA%E8%99%9A%E6%8B%9F%E4%BB%A3%E7%90%86%E8%AF%B7%E8%87%AA%E8%A1%8C%E6%9B%BF%E6%8D%A2%E4%B8%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%90%86">注意：上述例子均为虚拟代理，请自行替换为你自己的代理</a></li></ul><!-- END doctoc generated TOC please keep comment here to allow auto update --><h3 id="代理方式"><a href="#代理方式" class="headerlink" title="代理方式"></a>代理方式</h3><p>代理设置至少有以下几种方式：</p><ul><li><p>设置目标代理机器（常用）</p><blockquote><p>如：<code>http://yourProxyServer:port</code></p></blockquote></li><li><p>设置 pac 自动匹配代理（常用于浏览器）</p><blockquote><p>如：<code>http://example/a.pac</code></p></blockquote></li></ul><h3 id="代理地址"><a href="#代理地址" class="headerlink" title="代理地址"></a>代理地址</h3><p>假设你目前可用的代理是：<code>http://yourProxyServer:port</code>，后面例子均以此代理作为示范。</p><h4 id="Windows-CMD-代理设置"><a href="#Windows-CMD-代理设置" class="headerlink" title="Windows CMD 代理设置"></a>Windows CMD 代理设置</h4><p>当前 CMD 窗口有效：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">REM 设置代理</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=http://yourProxyServer:port</span><br><span class="line"><span class="built_in">set</span> https_proxy=http://yourProxyServer:port</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 查看代理</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%http_proxy%</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%https_proxy%</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 取消代理(留空即可)</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=</span><br><span class="line"><span class="built_in">set</span> https_proxy=</span><br></pre></td></tr></table></figure><p>若想一直有效，设置系统环境变量：http_proxy、https_proxy，并重启你的 Windows。</p><p>注意：</p><ul><li><code>http_proxy</code> 和 <code>https_proxy</code> 对应的都是 <code>http://yourProxyServer:port</code>，后者可能没有 <code>https</code> 的 <code>s</code></li></ul><h4 id="Linux-代理设置"><a href="#Linux-代理设置" class="headerlink" title="Linux 代理设置"></a>Linux 代理设置</h4><p>同下面 Mac 代理设置 ↓</p><h4 id="Mac-代理设置"><a href="#Mac-代理设置" class="headerlink" title="Mac 代理设置"></a>Mac 代理设置</h4><p>这里只说命令行配置代理的方式</p><p>在 <code>~/.bash_profile</code> 或 <code>~/.zshrc</code> 中填入设置代理的快捷方式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shadowsocks 翻墙用，不翻墙可不用</span></span><br><span class="line"><span class="built_in">alias</span> proxy_ss=<span class="string">&#x27;export all_proxy=socks5://127.0.0.1:1086; export http_proxy=http://127.0.0.1:1087; export https_proxy=https://127.0.0.1:1087&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他代理</span></span><br><span class="line"><span class="built_in">alias</span> proxy_dev=<span class="string">&#x27;export http_proxy=http://yourProxyServer:port; export https_proxy=http://yourProxyServer:port&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消所有代理设置</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">&#x27;unset all_proxy; unset http_proxy; unset https_proxy&#x27;</span></span><br></pre></td></tr></table></figure><p>设置完，记得 source 一下配置文件。</p><p>使用，shell 中执行（开发机为例）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">proxy_dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">unproxy</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>单独命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时设置代理</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://yourProxyServer:port</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://yourProxyServer:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看代理</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$http_proxy</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$https_proxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br></pre></td></tr></table></figure><h4 id="Mac-Homebrew-代理设置"><a href="#Mac-Homebrew-代理设置" class="headerlink" title="Mac Homebrew 代理设置"></a>Mac Homebrew 代理设置</h4><p>同上面 Mac 命令行的代理设置。</p><p><a href="https://docs.brew.sh/Manpage#using-homebrew-behind-a-proxy">Brew 官方参考</a></p><h4 id="Git-代理设置"><a href="#Git-代理设置" class="headerlink" title="Git 代理设置"></a>Git 代理设置</h4><p><a href="https://zh.wikipedia.org/wiki/Git">Git</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局：设置 Git 访问外网（如 github）的代理</span></span><br><span class="line">git config --global http.proxy http://yourProxyServer:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局：查看 Git 代理</span></span><br><span class="line">git config --global --get http.proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局：删除 Git 代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------- 下面是针对每个项目局部的，非全局 -----------------</span></span><br><span class="line"><span class="comment"># 设置 Git 访问外网（如 github）的代理</span></span><br><span class="line">git config http.proxy http://yourProxyServer:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Git 代理</span></span><br><span class="line">git config --get http.proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 Git 代理</span></span><br><span class="line">git config --<span class="built_in">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h5 id="Git-用户名、邮箱设置"><a href="#Git-用户名、邮箱设置" class="headerlink" title="Git 用户名、邮箱设置"></a>Git 用户名、邮箱设置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 Git 全局：用户名、邮箱 ↓</span></span><br><span class="line">git config --global user.name <span class="string">&quot;youName&quot;</span></span><br><span class="line">git config --global user.email yourEmail@example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是针对每个 Git 项目的，非全局 ↓</span></span><br><span class="line">git config user.email yourEmail@example.com</span><br><span class="line">git config user.name <span class="string">&quot;youName&quot;</span></span><br></pre></td></tr></table></figure><p>哪个设为全局，哪个设为当前项目，按个人需求而定，并无绝对。</p><h4 id="npm-代理设置-镜像设置"><a href="#npm-代理设置-镜像设置" class="headerlink" title="npm 代理设置 + 镜像设置"></a>npm 代理设置 + 镜像设置</h4><p><a href="https://www.npmjs.com/">npm</a></p><h5 id="使用淘宝-npm-镜像（推荐）"><a href="#使用淘宝-npm-镜像（推荐）" class="headerlink" title="使用淘宝 npm 镜像（推荐）"></a>使用淘宝 npm 镜像（推荐）</h5><p>此时需同时设置：淘宝镜像 +  你的代理（若有的话）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ↓ 设置淘宝 npm 镜像</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># ↓ 若本来即可访问外网，无需下面代理设置</span></span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://yourProxyServer:port</span><br></pre></td></tr></table></figure><h4 id="使用-npm-官方镜像"><a href="#使用-npm-官方镜像" class="headerlink" title="使用 npm 官方镜像"></a>使用 npm 官方镜像</h4><p>设置代理（若有的话）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy http://yourProxyServer:port</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://yourProxyServer:port</span><br></pre></td></tr></table></figure><h5 id="npm-代理、镜像查看方式"><a href="#npm-代理、镜像查看方式" class="headerlink" title="npm 代理、镜像查看方式"></a>npm 代理、镜像查看方式</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 npm 所有设置</span></span><br><span class="line">npm config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看代理</span></span><br><span class="line">npm config get proxy</span><br><span class="line">npm config get https-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">npm config <span class="built_in">rm</span> proxy</span><br><span class="line">npm config <span class="built_in">rm</span> https-proxy</span><br></pre></td></tr></table></figure><h5 id="yarn-代理设置-镜像设置"><a href="#yarn-代理设置-镜像设置" class="headerlink" title="yarn 代理设置 + 镜像设置"></a>yarn 代理设置 + 镜像设置</h5><p><a href="https://yarnpkg.com/en/">yarn</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 registry 镜像</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理（若有的话）</span></span><br><span class="line">yarn config <span class="built_in">set</span> proxy http://yourProxyServer:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有设置</span></span><br><span class="line">yarn config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像设置</span></span><br><span class="line">yarn config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个设置</span></span><br><span class="line">yarn config get proxy</span><br></pre></td></tr></table></figure><p>yarn 全局配置： <code>用户目录/.yarnrc</code></p><p>注意：</p><ul><li>有时设置了代理也不生效，可能原因是 <code>yarn.lock</code> 文件的问题，删掉重来试试<ul><li>参考：<a href="https://github.com/yarnpkg/yarn/issues/4890">https://github.com/yarnpkg/yarn/issues/4890</a></li></ul></li></ul><h4 id="nvm-代理设置"><a href="#nvm-代理设置" class="headerlink" title="nvm 代理设置"></a>nvm 代理设置</h4><p><a href="https://github.com/creationix/nvm">nvm</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置代理（永久）</span></span><br><span class="line">nvm proxy <span class="string">&quot;http://yourProxyServer:port&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理（临时，非必须）</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=http://yourProxyServer:port</span><br><span class="line"><span class="built_in">set</span> https_proxy=http://yourProxyServer:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看代理</span></span><br><span class="line">nvm proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除代理</span></span><br><span class="line">nvm proxy <span class="string">&quot;none&quot;</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://github.com/coreybutler/nvm-windows#usage">https://github.com/coreybutler/nvm-windows#usage</a></p><h4 id="Bower-代理设置"><a href="#Bower-代理设置" class="headerlink" title="Bower 代理设置"></a>Bower 代理设置</h4><p><a href="https://bower.io/">Bower</a></p><p>新建 <code>.bowerrc</code> 文件，<br>填入 <code>proxy</code> 和 <code>https-proxy</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;directory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bower_components&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://yourProxyServer:port/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;https-proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://yourProxyServer:port/&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>支持三种设置方式：</p><ul><li>当前项目：<code>当前目录（bower.json 的同级目录）</code></li><li>当前用户目录</li><li>系统根目录（Linux 的 <code>/</code> 目录）</li></ul><p>参考：<a href="https://bower.io/docs/config/#placement--order">https://bower.io/docs/config/#placement--order</a></p><h4 id="PHP-Composer-代理设置"><a href="#PHP-Composer-代理设置" class="headerlink" title="PHP Composer 代理设置"></a>PHP Composer 代理设置</h4><p><a href="https://getcomposer.org/">Composer</a></p><p>安装完 Composer 后，使用 Composer 时是直接使用系统（如 Win 的 CMD）的代理，并无代理配置文件。</p><p>也即：Windows 下需设置 CMD 的代理，类似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=yourProxyServer:port</span><br><span class="line">set https_proxy=yourProxyServer:port</span><br></pre></td></tr></table></figure><p>之后，才能进行 <code>composer require packageName</code></p><p>系统配置了这两个环境变量的话，就相当于 Composer 的全局代理</p><h4 id="IDEA代理设置"><a href="#IDEA代理设置" class="headerlink" title="IDEA代理设置"></a>IDEA代理设置</h4><p><a href="https://www.jetbrains.com/">Jetbrains</a></p><p><code>File</code> -&gt; <code>Settings</code> -&gt; <code>Appearance &amp; Behavior</code> -&gt; <code>System Settings</code></p><p>-&gt; <code>HTTP Proxy</code> -&gt; <code>Manual proxy configuration</code> -&gt; <code>HTTP</code></p><p>-&gt; <code>Host name: yourProxyServer</code> -&gt; <code>Port number: yourProxyPort</code></p><p>-&gt; <code>OK</code></p><h4 id="Maven-代理、镜像设置"><a href="#Maven-代理、镜像设置" class="headerlink" title="Maven 代理、镜像设置"></a>Maven 代理、镜像设置</h4><p><a href="https://maven.apache.org/">Maven</a></p><p>Maven 的代理、镜像设置内容较多，详细见 <a href="https://github.com/vikyd/note/blob/master/maven_proxy.md">这里</a></p><h4 id="Gradle-代理设置"><a href="#Gradle-代理设置" class="headerlink" title="Gradle 代理设置"></a>Gradle 代理设置</h4><p><a href="https://gradle.org/">Gradle</a></p><ul><li>若设置当前项目：<ul><li>新建或编辑当前项目内的 <code>gradle.properties</code></li></ul></li><li>若设置全局项目：<ul><li>新建或编辑 <code>用户目录/.gradle/gradle.properties</code></li></ul></li></ul><p>在 <code>gradle.properties</code> 文件中增加以下设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemProp.http.proxyHost=yourProxyServer</span><br><span class="line">systemProp.http.proxyPort=yourPort</span><br><span class="line">systemProp.https.proxyHost=yourProxyServer</span><br><span class="line">systemProp.https.proxyPort=yourPort</span><br></pre></td></tr></table></figure><p>参考：<a href="https://docs.gradle.org/current/userguide/build_environment.html">https://docs.gradle.org/current/userguide/build_environment.html</a></p><h4 id="Python-的-pip-代理设置"><a href="#Python-的-pip-代理设置" class="headerlink" title="Python 的 pip 代理设置"></a>Python 的 pip 代理设置</h4><p>pip 可用于安装 Python 的包。</p><p><a href="https://pypi.org/project/pip/">pip</a> 的代理设置有 3 种方式（n 选 1）：</p><ul><li><p>系统环境变量</p><ul><li>就如 CMD 的代理设置，之后再 <code>pip install yourPackage</code>，Win ↓</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://yourProxyServer:port</span><br><span class="line"><span class="built_in">set</span> https_proxy=http://yourProxyServer:port</span><br></pre></td></tr></table></figure></li><li><p><code>--proxy</code> 参数</p><ul><li><code>pip install yourPackage --proxy http://yourProxyServer:port</code></li></ul></li><li><p><code>pip.ini</code> 配置文件（推荐，永久）</p><ul><li><p>以 Win 为例，在用户目录新建目录和文件 <code> %HOME%\pip\pip.ini</code>，填入：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">proxy</span>=http://yourProxyServer:port</span><br></pre></td></tr></table></figure></li><li><p>查看设置是否成功：<code>pip config list</code></p></li></ul></li></ul><p>pip 设置代理的官方文档：<a href="https://pip.pypa.io/en/stable/user_guide/#using-a-proxy-server">https://pip.pypa.io/en/stable/user_guide/#using-a-proxy-server</a></p><h4 id="VSCode-代理设置"><a href="#VSCode-代理设置" class="headerlink" title="VSCode 代理设置"></a>VSCode 代理设置</h4><p><a href="https://code.visualstudio.com/">VSCode</a> 默认从 <code>http_proxy</code> 和 <code>https_proxy</code> 环境变量获取代理。</p><p>但也可手动设置：<br><code>File</code> -&gt; <code>Preference</code> -&gt; <code>Settings</code>，在右侧 <code>User Settings</code> 里粘贴以下代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;http.proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://yourProxyServer:port&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h4 id="Notepad-代理设置"><a href="#Notepad-代理设置" class="headerlink" title="Notepad++ 代理设置"></a>Notepad++ 代理设置</h4><p><a href="https://notepad-plus-plus.org/">Notepad++</a></p><p>菜单栏 -&gt; 最右侧问号 <code>?</code> -&gt; <code>设置更新代理服务器</code> -&gt;</p><ul><li><code>Proxy server</code>：yourProxyServer</li><li><code>Port</code>：yourPort</li></ul><h4 id="Sublime-代理设置"><a href="#Sublime-代理设置" class="headerlink" title="Sublime 代理设置"></a>Sublime 代理设置</h4><p><a href="https://www.sublimetext.com/">Sublime</a> 默认使用系统的 <code>PAC</code> 设置。浏览器能上网，Sublime 基本就能联网。</p><p>也可在配置文件自定义代理：</p><ul><li><code>菜单栏</code> -&gt; <code>Preferences</code> -&gt; <code>Settings</code> -&gt; <code>在左右任意一侧填入</code>：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;http_proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://yourProxyServer:port&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;https_proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://yourProxyServer:port&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h4 id="Eclipse-代理设置"><a href="#Eclipse-代理设置" class="headerlink" title="Eclipse 代理设置"></a>Eclipse 代理设置</h4><p><a href="https://www.eclipse.org/">Eclipse</a> 代理设置方式：</p><ul><li><code>Window</code> -&gt; <code>Preferences</code> -&gt; <code>General</code> -&gt; <code>Network Connections</code> -&gt; 右侧 <code>Active Provider</code> 选择 <code>Manual</code> -&gt; <code>Proxy entries 表格</code> 中双击第 1 行的 <code>HTTP</code> -&gt; <code>Host</code> 填 <code>yourProxyServer</code> -&gt; <code>Port</code> 填 <code>yourPort</code> -&gt; <code>OK</code></li><li><code>HTTPS</code>、<code>SOCKS</code> 同理设置</li></ul><h4 id="Atom-编辑器-代理设置"><a href="#Atom-编辑器-代理设置" class="headerlink" title="Atom 编辑器 代理设置"></a>Atom 编辑器 代理设置</h4><p><a href="https://atom.io/">Atom</a></p><p>见下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">apm config <span class="built_in">set</span> https-proxy https://yourProxyServer:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看代理</span></span><br><span class="line">apm config get https-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有配置（显示的结果的 `userconfig` 就是配置文件所在位置）</span></span><br><span class="line">apm config get</span><br></pre></td></tr></table></figure><p>参考：<a href="https://github.com/atom/apm#using-a-proxy">https://github.com/atom/apm#using-a-proxy</a></p><h4 id="wget-代理设置"><a href="#wget-代理设置" class="headerlink" title="wget 代理设置"></a>wget 代理设置</h4><p><a href="https://eternallybored.org/misc/wget/">wget Win</a></p><p><a href="https://www.gnu.org/software/wget/">wget Linux</a></p><p>方法 01（临时）：</p><ul><li><p>先设置 Windows CMD 的代理：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://yourProxyServer:port</span><br><span class="line"><span class="built_in">set</span> https_proxy=http://yourProxyServer:port</span><br></pre></td></tr></table></figure></li><li><p>或 Linux shell 的代理：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://yourProxyServer:port</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://yourProxyServer:port</span><br></pre></td></tr></table></figure></li><li><p>然后可以直接使用 wget 命令</p></li></ul><p>方法 02（永久，推荐！）：</p><ul><li><p>直接使用 wget 配置文件，在当前用户主目录下新建文件 <code>.wgetrc</code>（或 Linux 的 <code>/etc/wgetrc</code>）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http-proxy</span> = yourProxyServer:port</span><br><span class="line"><span class="attr">https-proxy</span> = yourProxyServer:port</span><br><span class="line"><span class="attr">ftp-proxy</span> = yourProxyServer:port</span><br></pre></td></tr></table></figure></li><li><p>然后可以直接使用 wget 命令</p></li></ul><p>方法 03（临时）：</p><ul><li>直接在 wget 命令中添加参数，如<ul><li><code>wget https://www.baidu.com -e https-proxy=yourProxyServer:port</code></li><li>或 （都是 http ，而非 https）</li><li><code>wget http://www.baidu.com -e http-proxy=yourProxyServer:port</code></li></ul></li></ul><h4 id="curl-代理设置"><a href="#curl-代理设置" class="headerlink" title="curl 代理设置"></a>curl 代理设置</h4><p><a href="https://curl.haxx.se/">curl</a></p><p>方法 01（临时）：</p><ul><li><p>先设置 Windows CMD 的代理：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=yourProxyServer:port</span><br><span class="line"><span class="built_in">set</span> https_proxy=yourProxyServer:port</span><br></pre></td></tr></table></figure></li><li><p>或 Linux shell 的代理：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=yourProxyServer:port</span><br><span class="line"><span class="built_in">export</span> https_proxy=yourProxyServer:port</span><br></pre></td></tr></table></figure></li><li><p>然后可以直接使用 curl 命令，如</p><ul><li><code>curl http://www.baidu.com -o baidu.html</code></li></ul></li></ul><p>方法 02（永久，推荐！）：</p><ul><li><p>直接使用 curl 配置文件，在当前用户主目录下新建配置文件（Win：<code>_curlrc</code>）（Linux：<code>.curlrc</code>）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy</span> = yourProxyServer:port</span><br></pre></td></tr></table></figure></li><li><p>然后可以直接使用 curl 命令，如</p><ul><li><code>curl http://www.baidu.com -o baidu.html</code></li></ul></li></ul><p>方法 03（临时）：</p><ul><li><p>直接在 curl 命令中添加参数，如</p><ul><li><p><code>curl https://www.baidu.com -o baidu.html -x yourProxyServer:port</code></p><blockquote><p><code>-x</code> 小写 x 代表 <code>proxy</code> 的意思</p></blockquote></li></ul></li></ul><h4 id="Golang-的-go-get-代理"><a href="#Golang-的-go-get-代理" class="headerlink" title="Golang 的 go get 代理"></a>Golang 的 go get 代理</h4><p><a href="https://golang.org/">Golang</a> 的 <code>go get</code> 使用系统的 <code>http_proxy</code>，但拉取代码时会使用 Git 的代理，<br>所以两步都要做：</p><ol><li>设置系统代理（或说 CMD 代理）</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=yourProxyServer:port</span><br></pre></td></tr></table></figure><ol start="2"><li>设置 Git 代理，参考前面的 <code>Git 代理设置</code></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://yourProxyServer:port</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://stackoverflow.com/a/10385612/2752670">https://stackoverflow.com/a/10385612/2752670</a></li><li>官方参考：<a href="https://github.com/golang/go/wiki/GoGetProxyConfig">https://github.com/golang/go/wiki/GoGetProxyConfig</a></li></ul><p>若使用 VSCode，要想 VSCode 自动下载 Go 的依赖工具，则也应设置 VSCode 的 settings.json 中的代理：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;http.proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://yourProxyServer:port&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h4 id="Navicat-连外网数据库"><a href="#Navicat-连外网数据库" class="headerlink" title="Navicat 连外网数据库"></a>Navicat 连外网数据库</h4><p><a href="https://www.navicat.com/">Navicat</a> 貌似必须同时配置 <code>通道地址</code> 和 <code>代理服务器</code>。</p><p>注意：此方法不太安全，慎重使用！</p><ul><li><p>步骤 01：<br>Navicat 安装目录找到文件： <code>C:\Program Files\PremiumSoft\Navicat Premium\ntunnel_mysql.php</code> （或对应语言的 php），放置到你外网 Web 服务目录下（浏览器可打开 <code>http://IP:port/abc/ntunnel_mysql.php</code> 看到一个页面）</p></li><li><p>步骤 02：<br><code>右键某个数据库连接</code> -&gt; <code>HTTP</code> -&gt; 勾选 <code>使用 HTTP 通道</code> -&gt; <code>通道地址</code> 填 <code>http://IP:port/abc/ntunnel_mysql.php</code> -&gt; 下面 <code>代理服务器</code> -&gt; 勾选 <code>使用代理服务器</code> -&gt; <code>主机</code> 填 <code>yourPorxyServer</code> -&gt; <code>端口</code> 填 <code>yourPort</code> -&gt; <code>测试连接</code> -&gt; <code>确定</code></p></li></ul><h4 id="Virtual-Box、VMware-代理设置"><a href="#Virtual-Box、VMware-代理设置" class="headerlink" title="Virtual Box、VMware 代理设置"></a>Virtual Box、VMware 代理设置</h4><p>普通用户虚拟机都采用 NAT 模式吧。</p><p>代理设置：虚拟机内的系统与外部物理机一样的代理设置，才能上网。</p><h4 id="Xshell-代理设置"><a href="#Xshell-代理设置" class="headerlink" title="Xshell 代理设置"></a>Xshell 代理设置</h4><p>打开某个 session 的属性设置</p><ul><li>Connection</li><li>Proxy</li><li>Browse</li><li>Add<ul><li><strong>Name</strong>：anyName（或随意名字）</li><li><strong>Type</strong>：HTTP 1.1</li><li><strong>Host</strong>：yourProxyServer</li><li><strong>Port</strong>：yourPort</li><li>OK</li><li>Close</li></ul></li><li>Proxy Server 选择刚新建的代理</li><li>完毕</li></ul><h4 id="SecureCRT-代理设置"><a href="#SecureCRT-代理设置" class="headerlink" title="SecureCRT 代理设置"></a>SecureCRT 代理设置</h4><p>分 2 步走，先全局添加代理项，再在每个连接中选择对应的代理项。</p><ol><li>全局添加代理项</li></ol><ul><li>Options</li><li>Global Options</li><li>Firewall<ul><li>Add<ul><li><strong>Name</strong>：anyName（或随意名字）</li><li><strong>Type</strong>：HTTP (no authentication)</li><li><strong>Hostname or IP</strong>：yourProxyServer</li><li><strong>Port</strong>：yourPort</li><li>OK</li></ul></li></ul></li></ul><ol start="2"><li>在你的连接中选中刚刚新建的代理项</li></ol><ul><li>你的连接 -&gt; 属性</li><li>Connection</li><li>SSH2</li><li>Firewall</li><li>选择 <code>刚新建的代理项</code></li></ul><h4 id="Proxifier-为其他软件设置代理"><a href="#Proxifier-为其他软件设置代理" class="headerlink" title="Proxifier 为其他软件设置代理"></a>Proxifier 为其他软件设置代理</h4><p><a href="https://www.proxifier.com/">Proxifier</a></p><p>与前面各个软件为各自设置代理不同，Proxifier 是另一种思路：统一为别的软件设置代理。</p><p>优点：</p><ul><li>不用按照每个软件的不同方式设置各自的代理</li><li>部分没有代理设置界面的软件很适合使用 Proxifier</li><li>可查看被代理软件的实际流量情况</li><li>Windows、Mac 都可使用</li></ul><p>缺点：</p><ul><li>代理设置有时不够个性化（如 Git 的全局代理与当前 Git 项目代理）</li></ul><p>步骤：</p><ol><li><p><code>菜单栏 Profile</code> -&gt; <code>Proxy Servers</code> -&gt; <code>Add</code><br>-&gt; <code>Address</code> 填 <code>yourProxyServer</code> -&gt; <code>Port</code> 填 <code>yourPort</code> -&gt; <code>Protocol</code> 填 <code>HTTPS</code> -&gt; <code>OK</code></p></li><li><p><code>菜单栏 Profile</code> -&gt; <code>Proxification Rules</code> -&gt; <code>Add</code> -&gt; <code>Name</code> 随意填- &gt; <code>Applications</code> 通过 <code>Browse</code> 按钮选择你想代理的软件的 exe 文件 -&gt; <code>Action</code> 选择前面步骤设置的 <code>yourProxyServer</code> -&gt; <code>OK</code></p></li></ol>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/%E4%BB%A3%E7%90%86/">代理</category>
      
      <category domain="https://leileigwl.github.io/tags/proxy/">proxy</category>
      
      
      <comments>https://leileigwl.github.io/post/278ab762.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>node 环境配置</title>
      <link>https://leileigwl.github.io/post/c4efcc40.html</link>
      <guid>https://leileigwl.github.io/post/c4efcc40.html</guid>
      <pubDate>Mon, 08 May 2023 08:35:56 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#环境</span></span><br><span class="line">D:\configuration\Node</span><br><span class="line">D:\configuration\Node\node_global\node_modules</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 还原默认源：npm config set registry https://registry.npmjs.org/</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#目录</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\configuration\Node\node_cache&quot;</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\configuration\Node\node_cache&quot;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/node/">node</category>
      
      <category domain="https://leileigwl.github.io/tags/npm/">npm</category>
      
      
      <comments>https://leileigwl.github.io/post/c4efcc40.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>linux 登录配置</title>
      <link>https://leileigwl.github.io/post/3b1fdc09.html</link>
      <guid>https://leileigwl.github.io/post/3b1fdc09.html</guid>
      <pubDate>Mon, 08 May 2023 08:35:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;linux登录配置&quot;&gt;&lt;a href=&quot;#linux登录配置&quot; class=&quot;headerlink&quot; title=&quot;linux登录配置&quot;&gt;&lt;/a&gt;linux登录配置&lt;/h2&gt;&lt;h3 id=&quot;登录服务器-ssh&quot;&gt;&lt;a href=&quot;#登录服务器-ssh&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="linux登录配置"><a href="#linux登录配置" class="headerlink" title="linux登录配置"></a>linux登录配置</h2><h3 id="登录服务器-ssh"><a href="#登录服务器-ssh" class="headerlink" title="登录服务器: ssh"></a>登录服务器: ssh</h3><p>ssh，<code>secure shell protocol</code>，以更加安全的方式连接远程服务器。</p><p>把以下 IP 地址替换为你云服务器的公网地址，并提供密码即可登录。</p><p>但记住一个 IP 地址，这是一个反人性的操作，如果你有多个服务器需要管理呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root: 用户名</span></span><br><span class="line"><span class="comment"># 172.16.3.2: 云服务器 IP 地址，需要把 IP 地址换成个人 IP 地址</span></span><br><span class="line">$ ssh root@172.16.3.2</span><br></pre></td></tr></table></figure><h3 id="配置别名快速登录：ssh-config"><a href="#配置别名快速登录：ssh-config" class="headerlink" title="配置别名快速登录：ssh-config"></a>配置别名快速登录：ssh-config</h3><p>在<strong>本地客户端环境 (个人电脑) 上配置 ssh-config</strong>，<strong>没有该文件则新建文件</strong>。对自己管理的服务器起别名，可以更方便地登录多台云服务器，以下是关于 ssh-config 的配置文件</p><blockquote><p>如果 windows 用户需要配置 ssh config，请先安装 <a href="http://www.cygwin.com/install.html">cygwin (opens new window)</a>或者 mingw（git 自带）作为终端。</p></blockquote><ul><li><code>/etc/ssh/ssh_config</code></li><li><code>~/.ssh/config</code></li></ul><p>以下是快速登录山月两个服务器 <code>shanyue</code> 和 <code>training</code> 的配置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 修改 ssh 配置文件 ~/.ssh/config</span><br><span class="line"></span><br><span class="line"># 172.16.3.2 是内网环境，此处仅做示例</span><br><span class="line">Host shanyue</span><br><span class="line">    HostName 172.16.3.2</span><br><span class="line">    User root</span><br><span class="line"></span><br><span class="line"># 请用真实 IP 地址替换以下的 PUBLIC_IP</span><br><span class="line"># 并记得替换 User</span><br><span class="line">Host training</span><br><span class="line">    HostName &lt;PUBLIC_IP&gt;</span><br><span class="line">    User root</span><br></pre></td></tr></table></figure><p>配置成功之后直接 ssh 就可以直接登录，是不很方便？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh shanyue</span><br><span class="line">Last login: Wed Jun 15 20:09:14 2022 from 172.16.3.4</span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">[root@shanyue ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="免密登录：public-key-与-ssh-copy-id"><a href="#免密登录：public-key-与-ssh-copy-id" class="headerlink" title="免密登录：public-key 与 ssh-copy-id"></a>免密登录：public-key 与 ssh-copy-id</h3><p>如何实现远程服务器的免密登录需要两个条件:</p><ol><li>两个文件: 本地环境的 <code>~/.ssh/id_rsa.pub</code> 与 远程服务器的 <code>~/.ssh/authorized_keys</code></li><li>一个动作: 把本地文件 <code>~/.ssh/id_rsa.pub</code> 中内容复制粘贴到远程服务器 <code>~/.ssh/authorized_keys</code></li></ol><blockquote><p>如果本地没有 <code>~/.ssh/id_rsa.pub</code> 文件，则使用命令 <code>ssh-keygen</code> 进行生成。</p></blockquote><blockquote><p><code>~/.ssh/authorized_keys</code> 不能拥有其它用户（group、other）的写权限</p></blockquote><p><strong>总结成一句话，把自己的公钥放在远程服务器的 <code>authorized_keys</code> 中</strong></p><p>简单来说，就是 <code>Ctrl-C</code> 与 <code>Ctrl-V</code> 操作，不过还有一个更加有效率的工具: <code>ssh-copy-id</code>。</p><p>此时一个解决生产力的命令行工具应运而生: <code>ssh-copy-id</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在本地环境进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示你输入密码，成功之后可以直接 ssh 登录，无需密码</span></span><br><span class="line">$ ssh-copy-id shanyue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆成功，无需密码</span></span><br><span class="line">$ ssh shanyue</span><br></pre></td></tr></table></figure><h3 id="安全性-禁用密码登录"><a href="#安全性-禁用密码登录" class="headerlink" title="安全性: 禁用密码登录"></a>安全性: 禁用密码登录</h3><p>为了更大保障服务器的安全性，这里禁止密码登录。修改云服务器的 <code>sshd</code> 配置文件：<code>/etc/ssh/sshd_config</code>。其中 <code>PasswordAuthentication</code> 设置为 <code>no</code>，以此来禁用密码登录。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 编辑服务器端的 /etc/ssh/sshd_config</span><br><span class="line"># 禁用密码登录</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">  PasswordAuthentication no</span><br></pre></td></tr></table></figure><h3 id="保持连接，防止断掉"><a href="#保持连接，防止断掉" class="headerlink" title="保持连接，防止断掉"></a>保持连接，防止断掉</h3><p>除此之外，还可以通过一些配置来更好地优化我们连接服务器时的体验。</p><p>我们可以通过 <code>man ssh_config</code>，找到每一项的详细释义。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 编辑 ~/.ssh/config</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">  ServerAliveInterval 30</span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line">  ServerAliveCountMax 6</span><br><span class="line">  Compression yes</span><br></pre></td></tr></table></figure><p><code>ServerAliveInterval</code> 将能够保持较长时间 <code>ssh</code> 连接，不会使得程序在运行，结果因 ssh 超时而连接断开。</p><ul><li><code>ServerAliveInterval</code>：如果服务器 n 秒没有响应，则 ssh 客户端将发送数据包至 ssh 服务器</li><li><code>ServerAliveCountMax</code>：直到发送了 n 次，服务器还没有响应，则断掉 ssh 连接</li></ul><p>以上配置代表，如果服务器不响应后，服务器在 <code>30 * 6</code> 秒后将断开连接。</p><p>另外也可以通过 <code>ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=6 $HOST</code> 命令传递 ssh_config 配置。</p><hr><h3 id="linux用docker设置代理"><a href="#linux用docker设置代理" class="headerlink" title="linux用docker设置代理"></a>linux用docker设置代理</h3><p>将v2的端口设置好，并在<code> /etc/v2ray/config.json</code>这个文件中配置好导出的客户端模块，最后一键运行这个代码</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d --name v2ray -v /etc/v2ray:/etc/v2ray -p 10890:10890 v2ray/official  v2ray -config=/etc/v2ray/config.json</span></span><br></pre></td></tr></table></figure><hr><h3 id="docker-查看自己是否启动代理"><a href="#docker-查看自己是否启动代理" class="headerlink" title="docker 查看自己是否启动代理"></a>docker 查看自己是否启动代理</h3><ul><li><p>如果是http代理</p><ul><li><pre><code class="shell">curl --proxy http://127.0.0.1:10890 www.google.com<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果是socks代理</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    curl --socks5 http://127.0.0.1:10890 www.google.com</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="修改登录端口"><a href="#修改登录端口" class="headerlink" title="修改登录端口"></a>修改登录端口</h3><ul><li><pre><code class="bash">sudo vim /etc/ssh/sshd_config#用&quot;/&quot;命令找到Port，并进行修改sudo /etc/init.d/ssh restart# 重启 ssh 连接服务！# 修改完一定要记得打开修改过的端口sudo ufw allow Port<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 关闭防火墙</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">sudo ufw allow Port #指定端口进行开启</span><br><span class="line">sudo ufw disable #先关闭防火墙 开启的话是enable</span><br><span class="line">sudo ufw reset #重新设置</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="ubuntu-一键安装"><a href="#ubuntu-一键安装" class="headerlink" title="ubuntu 一键安装"></a>ubuntu 一键安装</h2><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></table></figure><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt intsall npm</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install  docker-compose -y</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/linux/">linux</category>
      
      
      <comments>https://leileigwl.github.io/post/3b1fdc09.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>git 配置</title>
      <link>https://leileigwl.github.io/post/5c006507.html</link>
      <guid>https://leileigwl.github.io/post/5c006507.html</guid>
      <pubDate>Mon, 08 May 2023 08:33:53 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;git-常用命令补充&quot;&gt;&lt;a href=&quot;#git-常用命令补充&quot; class=&quot;headerlink&quot; title=&quot;git 常用命令补充&quot;&gt;&lt;/a&gt;git 常用命令补充&lt;/h2&gt;&lt;h3 id=&quot;1-初始化配置&quot;&gt;&lt;a href=&quot;#1-初始化配置&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="git-常用命令补充"><a href="#git-常用命令补充" class="headerlink" title="git 常用命令补充"></a>git 常用命令补充</h2><h3 id="1-初始化配置"><a href="#1-初始化配置" class="headerlink" title="1.初始化配置"></a>1.初始化配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;***&quot;</span></span><br><span class="line"><span class="comment">#配置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----下面的根据情况配置-----</span></span><br><span class="line"><span class="comment">#不配置下载代码可能会出现SSL安全验证问题，可以关闭SSL安全验证</span></span><br><span class="line">git config --global http.sslVerift <span class="literal">false</span></span><br><span class="line"><span class="comment">#查看当前配置</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="comment">#提交时转换为LF，拉去时转换为CRLF</span></span><br><span class="line">onfig --global core.autocrlf <span class="literal">true</span></span><br><span class="line"><span class="comment">#提交时转换为linux的结尾符，拉取得时候不转换</span></span><br><span class="line">git config --global core.autocrlf input</span><br><span class="line"><span class="comment">#添加远程仓库(ssh地址)</span></span><br><span class="line">git remote add origin</span><br></pre></td></tr></table></figure><h3 id="2-拉取代码"><a href="#2-拉取代码" class="headerlink" title="2.拉取代码"></a>2.拉取代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可能存在子模块，递归拉取</span></span><br><span class="line">git <span class="built_in">clone</span> --recursive <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="comment">#更新代码</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="3-分支操作"><a href="#3-分支操作" class="headerlink" title="3.分支操作"></a>3.分支操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建本地分支（他会根据基于你当前的分支创建新的分支，</span></span><br><span class="line">也就是说当前的你的分支如果有代码的话你创建的新分支是不干净的）</span><br><span class="line">git checkout -b <span class="string">&#x27;目录&#x27;</span>/<span class="string">&#x27;分支名&#x27;</span> </span><br><span class="line"><span class="comment">#查看当前目录下的所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="comment">#切换分支</span></span><br><span class="line">git checkout <span class="string">&#x27;需要切换的峰值名称&#x27;</span></span><br><span class="line"><span class="comment">#删除分支 如果需要删除拥有未提交代码的分支需要把-d改成-D</span></span><br><span class="line">git branch -d <span class="string">&#x27;删除分支名称&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4代码提交"><a href="#4代码提交" class="headerlink" title="4代码提交"></a>4代码提交</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提交代码到本地分支</span></span><br><span class="line"><span class="comment">#需要先进行git add . 才能进行下面的操作</span></span><br><span class="line">git add.</span><br><span class="line">git commit -m <span class="string">&#x27;分支名称&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示提交内容</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="comment">#推送代码到远程git仓库，再推送的时候会在远程仓库创建一个git分支，然后在远程仓库发起合并请求.</span></span><br><span class="line"><span class="comment">#后续的每次推送都会远程仓库创建的那个对应分支上面</span></span><br><span class="line">git push </span><br><span class="line"><span class="comment">#强制推送，会覆盖之前的对应分支提交的代码</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure><h3 id="5-配置代理"><a href="#5-配置代理" class="headerlink" title="5.配置代理"></a>5.配置代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = xxxx</span><br><span class="line">email = xxxxx@xxxx</span><br><span class="line">[http <span class="string">&quot;https://github.com&quot;</span>]</span><br><span class="line">proxy = http://127.0.0.1:7890</span><br><span class="line">[http <span class="string">&quot;http://github.com&quot;</span>]</span><br><span class="line">proxy = http://127.0.0.1:7890</span><br><span class="line">[credential <span class="string">&quot;https://gitee.com&quot;</span>]</span><br><span class="line">provider = generic</span><br><span class="line">[http]</span><br><span class="line">sslverify = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="6-gitignore规则"><a href="#6-gitignore规则" class="headerlink" title="6. gitignore规则"></a>6. <code>gitignore</code>规则</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;#&#x27;</span>作为注释</span><br><span class="line"><span class="string">&#x27;/&#x27;</span>开头表示目录</span><br><span class="line"><span class="string">&#x27;*&#x27;</span>通配符</span><br><span class="line"><span class="string">&#x27;?&#x27;</span>匹配单个字符</span><br><span class="line"><span class="string">&#x27;[]&#x27;</span>包含单个字符的匹配规则</span><br><span class="line"><span class="string">&#x27;!&#x27;</span>忽略目录</span><br></pre></td></tr></table></figure><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*.txt  ，*.xls  表示过滤某种类型的文件</span><br><span class="line">target/ ：表示过滤这个文件夹下的所有文件</span><br><span class="line">/test/a.txt ，/test/b.xls  表示指定过滤某个文件下具体文件</span><br><span class="line">!*.java , !/dir/test/     !开头表示不过滤</span><br><span class="line">*.[ab]    支持通配符：过滤所有以.a或者.b为扩展名的文件</span><br><span class="line">/test  仅仅忽略项目根目录下的 <span class="built_in">test</span> 文件，不包括 child/test等非根目录的<span class="built_in">test</span>目录</span><br></pre></td></tr></table></figure><h4 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h4><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号 （[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不 忽略。</li><li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件 （默认文件或目录都忽略）。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">.txt      <span class="comment">#忽略所有 .txt结尾的文件</span></span><br><span class="line">!lib.txt   <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp      <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/     <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt  <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/git/">git</category>
      
      
      <comments>https://leileigwl.github.io/post/5c006507.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>docker 配置</title>
      <link>https://leileigwl.github.io/post/d723e266.html</link>
      <guid>https://leileigwl.github.io/post/d723e266.html</guid>
      <pubDate>Mon, 08 May 2023 08:32:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h2&gt;&lt;h3 id=&quot;docker设置开机自动重启并重新运行容器&quot;&gt;&lt;a href=&quot;#docker设置开机自动重启并重</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="docker设置开机自动重启并重新运行容器"><a href="#docker设置开机自动重启并重新运行容器" class="headerlink" title="docker设置开机自动重启并重新运行容器"></a>docker设置开机自动重启并重新运行容器</h3><ul><li><p>设置docker服务自动重启：</p><ul><li><pre><code class="shell">systemctl enable docker.service<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    docker run --restart=always</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>如果已经启动了</p><ul><li><pre><code class="shell">docker update --restart=always<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 重要的restart参数</span><br><span class="line"></span><br><span class="line">  - no - 容器退出时，不重启容器；</span><br><span class="line">  - on-failure - 只有在非0状态退出时才从新启动容器；如果容器由于错误而退出，则将其重新启动，非零退出代码表示错误</span><br><span class="line">  - unless-stopped - 重新启动容器，除非明确停止容器或者 Docker 被停止或重新启动</span><br><span class="line">  - always -只要容器停止了，就重新启动</span><br><span class="line"></span><br><span class="line">### docker-compose 启动</span><br><span class="line"></span><br><span class="line">#### 启动命令</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">sudo docker-compose up -d #前提需要有docker-compose.yml 文件</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="docker镜像源设置"><a href="#docker镜像源设置" class="headerlink" title="docker镜像源设置"></a>docker镜像源设置</h3><h4 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h4><ul><li>创建或修改 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件，修改为如下形式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-加载重启docker"><a href="#2-加载重启docker" class="headerlink" title="2.加载重启docker"></a>2.加载重启docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/docker/">docker</category>
      
      
      <comments>https://leileigwl.github.io/post/d723e266.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
