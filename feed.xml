<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>磊磊の小窝</title>
    <link>https://leileigwl.github.io/</link>
    
    <atom:link href="https://leileigwl.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>小白小白·~</description>
    <pubDate>Fri, 08 Dec 2023 18:53:27 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>2023.12.8</title>
      <link>https://leileigwl.github.io/post/ec9de012.html</link>
      <guid>https://leileigwl.github.io/post/ec9de012.html</guid>
      <pubDate>Fri, 08 Dec 2023 13:21:42 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;2023-12-8&quot;&gt;&lt;a href=&quot;#2023-12-8&quot; class=&quot;headerlink&quot; title=&quot;2023.12.8&quot;&gt;&lt;/a&gt;2023.12.8&lt;/h4&gt;&lt;p&gt;新的一天，真是累了我自己咯&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;夜里先是失眠，失眠了好久，看手</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="2023-12-8"><a href="#2023-12-8" class="headerlink" title="2023.12.8"></a>2023.12.8</h4><p>新的一天，真是累了我自己咯</p><ul><li>夜里先是失眠，失眠了好久，看手机，小红书</li><li>早上难得起来，困死也要上早八</li><li>中午睡午觉后就出来玩啦，是开心的one day，快乐的时光过得有点快，希望时间能够停留</li></ul><p><img src="https://img.210214.xyz/blog/b05d592c89e616f394acf3f50d206ef.jpg" alt="b05d592c89e616f394acf3f50d206ef"></p><ul><li><p>wok，居然又没有写六级，断掉了，真没出息，三天打🐟的小笨蛋</p></li><li><p>最让我难过的事，给自己蠢一天，耳机掉厕所，怎么都想不到。好在不贵，有一只能陪我</p></li><li><p>又是听<a href="https://music.163.com/song?id=308299&userid=531470096">喜帖街</a>的一天，连着几天咯，一直听，喜欢的喜欢的</p></li><li><p>晚上回来都好懒，一到宿舍就有摆烂的氛围……，笔记写完，日记写完，要过好久</p><p>拖延症到晚期了</p><hr></li><li><p>把今天规划一下：</p><ol><li>起床看一眼qsort排序算法</li><li>睡醒考试</li><li>写完人工智能报告</li><li>六级六级，不能再歇了</li><li>做个好梦~</li></ol></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://leileigwl.github.io/post/ec9de012.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023.12.7</title>
      <link>https://leileigwl.github.io/post/7c22fd83.html</link>
      <guid>https://leileigwl.github.io/post/7c22fd83.html</guid>
      <pubDate>Thu, 07 Dec 2023 13:24:33 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;2023-12-6&quot;&gt;&lt;a href=&quot;#2023-12-6&quot; class=&quot;headerlink&quot; title=&quot;2023.12.6&quot;&gt;&lt;/a&gt;2023.12.6&lt;/h4&gt;&lt;p&gt;这是一篇补的笔记，日记第二天记真的就啥都记不得，水一篇嘿嘿&lt;/p&gt;
&lt;p&gt;&lt;img </description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="2023-12-6"><a href="#2023-12-6" class="headerlink" title="2023.12.6"></a>2023.12.6</h4><p>这是一篇补的笔记，日记第二天记真的就啥都记不得，水一篇嘿嘿</p><p><img src="https://img.210214.xyz/blog/wallhaven-qz52md.jpg" alt="wallhaven-qz52md"></p><ul><li>衣服洗啦</li><li>日记补啦</li><li>英语六级写啦，不过就是错的多多，看题太慢了，这还没上战场就要噶了</li><li>睡觉好像多了一点点，摆烂的哈哈哈哈，怎么老是想摆烂啊</li><li>哦对，夜里看了要准备的gift，其实白天醒来也花了好多时间看，真是纠结难选，再买都没米了</li></ul>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://leileigwl.github.io/post/7c22fd83.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023.12.6</title>
      <link>https://leileigwl.github.io/post/b25cd15.html</link>
      <guid>https://leileigwl.github.io/post/b25cd15.html</guid>
      <pubDate>Wed, 06 Dec 2023 14:56:11 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;2023-12-6&quot;&gt;&lt;a href=&quot;#2023-12-6&quot; class=&quot;headerlink&quot; title=&quot;2023.12.6&quot;&gt;&lt;/a&gt;2023.12.6&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;今天终于把两代码写完了哦·憋死我了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="2023-12-6"><a href="#2023-12-6" class="headerlink" title="2023.12.6"></a>2023.12.6</h4><ul><li><p>今天终于把两代码写完了哦·憋死我了</p></li><li><p>感冒还是没痊愈，吃了头孢，略微犯困</p></li><li><p>今天收到了大螃海，还不知道怎么吃</p><p><img src="https://img.210214.xyz/blog/7c46745c77f6097fa411dc4d5425994.jpg"></p></li><li><p>六级断掉了，还没做，明天有时间，好好写吧</p></li><li><p>一旦有时间记得把新的大作业写了吧，早点结束</p></li></ul><hr><ul><li><input checked="" disabled="" type="checkbox"> 今天任务总体完成</li></ul>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://leileigwl.github.io/post/b25cd15.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023.12.5</title>
      <link>https://leileigwl.github.io/post/922c9caf.html</link>
      <guid>https://leileigwl.github.io/post/922c9caf.html</guid>
      <pubDate>Tue, 05 Dec 2023 04:11:50 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;2023-12-5&quot;&gt;&lt;a href=&quot;#2023-12-5&quot; class=&quot;headerlink&quot; title=&quot;2023.12.5&quot;&gt;&lt;/a&gt;2023.12.5&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;第二篇记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="2023-12-5"><a href="#2023-12-5" class="headerlink" title="2023.12.5"></a>2023.12.5</h3><blockquote><p>第二篇记录</p></blockquote><ol><li><p>接到了一个网易图片下载的单子，但是奈何里面出现的图片使用html2canvas无法下载，到嘴的鸭子跑飞咯</p></li><li><p>今天必须写完那拖的两篇代码，再不写就要给人家违约了</p></li><li><p>呀，获奖啦，去年一个奖项没有，今年好容易争气了，运气也算不错，本来以为就二等奖的，开心的</p><p><img src="https://img.210214.xyz/blog/image-20231205190551135.png"></p></li><li><p>写了6级，正确率还不错</p></li><li><p>讨厌，今天被小朋友吓到了，给我发恐怖视频</p></li><li><p>马上写好今天的课堂总结睡觉</p></li></ol>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://leileigwl.github.io/post/922c9caf.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023.12.4</title>
      <link>https://leileigwl.github.io/post/e52bac39.html</link>
      <guid>https://leileigwl.github.io/post/e52bac39.html</guid>
      <pubDate>Mon, 04 Dec 2023 12:10:50 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;2023-12-4&quot;&gt;&lt;a href=&quot;#2023-12-4&quot; class=&quot;headerlink&quot; title=&quot;2023.12.4&quot;&gt;&lt;/a&gt;2023.12.4&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;今天是日记第一篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="2023-12-4"><a href="#2023-12-4" class="headerlink" title="2023.12.4"></a>2023.12.4</h3><blockquote><p>今天是日记第一篇</p></blockquote><p>从今天起，把自己的小博客重新搭建完成，并进行每天的日记记录，以此鞭策同时监督自己·</p><p>博客内容以每日的生活，所做的事为主，主打一个记录生活</p><hr><p>完成的事：</p><ul><li><p>重新整理了一下博客内容</p></li><li><p>七牛云正常使用·顺便上传张图测试一下·</p><p><img src="https://img.210214.xyz/blog/wallhaven-rrjvyq.png" alt="wallhaven-rrjvyq"></p></li><li><p>开始顺利慢慢进入六级状态</p></li><li><p>最后今天还需要把代码完成一下</p></li><li><p>然后去跑一跑2km</p></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://leileigwl.github.io/post/e52bac39.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python解码</title>
      <link>https://leileigwl.github.io/post/ef700de4.html</link>
      <guid>https://leileigwl.github.io/post/ef700de4.html</guid>
      <pubDate>Sun, 14 May 2023 08:21:25 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;python-解码&quot;&gt;&lt;a href=&quot;#python-解码&quot; class=&quot;headerlink&quot; title=&quot;python 解码&quot;&gt;&lt;/a&gt;python 解码&lt;/h2&gt;&lt;h3 id=&quot;request-请求&quot;&gt;&lt;a href=&quot;#request-请求&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="python-解码"><a href="#python-解码" class="headerlink" title="python 解码"></a>python 解码</h2><h3 id="request-请求"><a href="#request-请求" class="headerlink" title="request 请求"></a>request 请求</h3><p>原理：</p><ul><li><p>字符串在Python内部的表示是<strong>unicode</strong>编码，需要unicode编码作为中间件</p><ul><li>eg、response 请求后得到的结果的编码，运行到python程序中首先是<code>unicode</code>编码，先用response.text.encode去加载原本再网页中的编码，然后再将这个网页里使用的编码进行decode(‘utf8’)就可以正常的显示了</li></ul></li><li><p>encode 用于在python程序中，unicode 对其他编码的处理，将python程序中的unicode编码encode得到常见的编码，想要输出的话还是要转成utf8 ，这就要用到decode函数了</p></li><li><p>decode函数是用于 常见编码转换成unicode编码的一种方式</p></li></ul><p>通用解码： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response.text.encode(response.encoding).decode(<span class="string">&#x27;utf-8&#x27;</span>) </span><br><span class="line"><span class="comment">#response.encoding为原来的编码格式，encode后编码为原来的格式，decode后解码为‘utf-8’</span></span><br><span class="line">response.encoding= <span class="string">&#x27;utf8&#x27;</span> <span class="comment">#将encoding直接转换成utf8</span></span><br><span class="line">response.content.decode(<span class="string">&#x27;utf8&#x27;</span>) <span class="comment">#二进制内容转换成utf8</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.210214.xyz//random/image-20230514160231034.png" alt="image-20230514160231034"></p><h3 id="文件读写操作codecs-open"><a href="#文件读写操作codecs-open" class="headerlink" title="文件读写操作codecs.open"></a>文件读写操作codecs.open</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">     <span class="keyword">with</span> codecs.<span class="built_in">open</span>(‘....txt’,’w’,’utf-<span class="number">8</span>’) <span class="keyword">as</span> f:</span><br><span class="line">     f.write(...)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/python/">python</category>
      
      <category domain="https://leileigwl.github.io/tags/%E7%BC%96%E7%A0%81/">编码</category>
      
      
      <comments>https://leileigwl.github.io/post/ef700de4.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js逆向关键词</title>
      <link>https://leileigwl.github.io/post/7f0ece4d.html</link>
      <guid>https://leileigwl.github.io/post/7f0ece4d.html</guid>
      <pubDate>Sun, 14 May 2023 06:20:11 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;特殊的关键词检索&quot;&gt;&lt;a href=&quot;#特殊的关键词检索&quot; class=&quot;headerlink&quot; title=&quot;特殊的关键词检索&quot;&gt;&lt;/a&gt;特殊的关键词检索&lt;/h2&gt;&lt;h3 id=&quot;webpack打包&quot;&gt;&lt;a href=&quot;#webpack打包&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="特殊的关键词检索"><a href="#特殊的关键词检索" class="headerlink" title="特殊的关键词检索"></a>特殊的关键词检索</h2><h3 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a><code>webpack</code>打包</h3><ul><li><p><code>interceptors.request.use</code></p></li><li><p><code>apply/call</code> 用来找导出函数，找到加密函数后，自执行，用来</p><ul><li><p>示例地址 <code>https://developer.aliyun.com/article/1103664</code></p></li><li><p>主要结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _e;</span><br><span class="line">!(<span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = &#123;&#125;;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">s</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t[s].<span class="title function_">call</span>(n.<span class="property">exports</span>, n, n.<span class="property">exports</span>, e), n.<span class="property">loaded</span> = !<span class="number">0</span>, n.<span class="property">exports</span></span><br><span class="line">    &#125;</span><br><span class="line">    _e = e;</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    <span class="attr">encrypt</span>: <span class="keyword">function</span>(<span class="params">t, e, i</span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">diaoyong</span>: <span class="keyword">function</span>(<span class="params">t, e, i</span>) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getkey</span>(<span class="params">pass, time</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> diaoyong= <span class="title function_">_e</span>(<span class="string">&quot;diaoyong&quot;</span>);</span><br><span class="line">    <span class="comment">//这儿需要new一下调用方法，不然获取不到方法属性</span></span><br><span class="line">    <span class="keyword">var</span> new_diaoyong = <span class="keyword">new</span> <span class="title function_">diaoyong</span>();</span><br><span class="line">    <span class="keyword">return</span> new_diaoyong.<span class="title function_">encode</span>(pass, time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="非对称加密-RSA"><a href="#非对称加密-RSA" class="headerlink" title="非对称加密 RSA"></a>非对称加密 <code>RSA</code></h3><ul><li><code>JSEncrypt</code><br>new JSEncrypt(),JSEncrypt等，一般会便用JSEncrypt库，会有new一个实例对象的操作；</li><li>搜索关键词setPublicKey、setKey、setPrivateKey、getPublicKey等，一般实现的代码里都含有设置密钥的过程。</li></ul><h3 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h3><ul><li><p>返回结果无法看懂，但页面显示正常</p></li><li><p><code>JSON.parse/JSON.stringify</code></p></li><li><p><code>btoa</code> <code>base64</code>加密， <code>atob</code>解密</p></li><li><p><code>new Date().getTime()</code> 获取13位时间戳</p></li><li><p><code>jsencrypt</code>(忘记了)</p></li><li><p><strong>indexof</strong> 通过window的可以查找</p></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%80%86%E5%90%91/">逆向</category>
      
      <category domain="https://leileigwl.github.io/tags/js/">js</category>
      
      
      <comments>https://leileigwl.github.io/post/7f0ece4d.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js加密模块</title>
      <link>https://leileigwl.github.io/post/fc757312.html</link>
      <guid>https://leileigwl.github.io/post/fc757312.html</guid>
      <pubDate>Sun, 14 May 2023 06:19:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;常看见的加密算法&quot;&gt;&lt;a href=&quot;#常看见的加密算法&quot; class=&quot;headerlink&quot; title=&quot;常看见的加密算法&quot;&gt;&lt;/a&gt;常看见的加密算法&lt;/h2&gt;&lt;h3 id=&quot;一、HASH系列&quot;&gt;&lt;a href=&quot;#一、HASH系列&quot; class=&quot;head</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="常看见的加密算法"><a href="#常看见的加密算法" class="headerlink" title="常看见的加密算法"></a>常看见的加密算法</h2><h3 id="一、HASH系列"><a href="#一、HASH系列" class="headerlink" title="一、HASH系列"></a>一、<em>HASH</em>系列</h3><p>特征：数字字母组成，全部大写&#x2F;小写</p><h4 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h4><ul><li>不可逆，32位</li></ul><h5 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5_test1():</span><br><span class="line">    md5 = hashlib.new(&#x27;md5&#x27;, &#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5_test2():</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(&#x27;I love &#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    md5.update(&#x27;python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    md5_test1()  # 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br><span class="line">    md5_test2()  # 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br></pre></td></tr></table></figure><h4 id="sha1-x2F-256"><a href="#sha1-x2F-256" class="headerlink" title="sha1&#x2F;256"></a>sha1&#x2F;256</h4><ul><li>不可逆，40位</li></ul><h5 id="Python-实现-1"><a href="#Python-实现-1" class="headerlink" title="Python 实现"></a>Python 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sha1_test1():</span><br><span class="line">    sha1 = hashlib.new(&#x27;sha1&#x27;, &#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sha1_test2():</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(&#x27;I love python!&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    sha1_test1()  # 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br><span class="line">    sha1_test2()  # 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br></pre></td></tr></table></figure><h4 id="hmac"><a href="#hmac" class="headerlink" title="hmac"></a>hmac</h4><ul><li>给定一个密钥，对明文加密，做两次“散列”，得到的结果还是32为字符串</li></ul><h5 id="python-实现"><a href="#python-实现" class="headerlink" title="python 实现"></a>python 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import hmac</span><br><span class="line"></span><br><span class="line">def hmac_test1():</span><br><span class="line">    message = b&#x27;I love python!&#x27;</span><br><span class="line">    key = b&#x27;secret&#x27;</span><br><span class="line">    md5 = hmac.new(key, message, digestmod=&#x27;MD5&#x27;)</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hmac_test2():</span><br><span class="line">    key = &#x27;secret&#x27;.encode(&#x27;utf8&#x27;)</span><br><span class="line">    sha1 = hmac.new(key, digestmod=&#x27;sha1&#x27;)</span><br><span class="line">    sha1.update(&#x27;I love &#x27;.encode(&#x27;utf8&#x27;))</span><br><span class="line">    sha1.update(&#x27;Python!&#x27;.encode(&#x27;utf8&#x27;))</span><br><span class="line">    print(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    hmac_test1()  # 9c503a1f852edcc3526ea56976c38edf</span><br><span class="line">    hmac_test2()  # 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span><br></pre></td></tr></table></figure><h3 id="二、加密基本参数"><a href="#二、加密基本参数" class="headerlink" title="二、加密基本参数"></a>二、加密基本参数</h3><ul><li>在一些对称和非对称加密算法中，经常会用到以下三个参数：初始向量 iv、加密模式 mode、填充方式 padding</li></ul><h4 id="iv"><a href="#iv" class="headerlink" title="iv"></a>iv</h4><p>在密码学中，初始向量，与密钥结合使用，作为加密数据的手段，</p><h4 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h4><p>目前流行的加密和数字认证算法，都是采用块加密方式，就是将需要加密的明文分成固定大小的数据块，然后对其执行密码算法，得到密文。</p><ul><li><strong>ECB：电子码本模式</strong>，是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。</li><li><strong>CBC：密码块链接模式</strong>，是一种循环模式，前一个分组的密文和当前分组的明文异或操作后再加密，这样做的目的是增强破解难度。</li><li><strong>PCBC：填充密码块链接模式</strong>，也称为明文密码块链接模式（Plaintext Cipher Block Chaining），是一种可以使密文中的微小更改在解密时导致明文大部分错误的模式，并在加密的时候也具有同样的特性。</li><li><strong>CFB：密码反馈模式</strong>，可以将块密码变为自同步的流密码，类似于 CBC，CFB 的解密过程几乎就是颠倒的 CBC 的加密过程。</li><li><strong>OFB：输出反馈模式</strong>，可以将块密码变成同步的流密码，它产生密钥流的块，然后将其与明文块进行异或，得到密文。与其它流密码一样，密文中一个位的翻转会使明文中同样位置的位也产生翻转。</li><li><strong>CTR：计数器模式</strong>，也被称为 ICM 模式（Integer Counter Mode，整数计数模式）和 SIC 模式（Segmented Integer Counter），在 CTR 模式中，有一个自增的算子，这个算子用密钥加密之后的输出和明文异或的结果得到密文，相当于一次一密。这种加密方式简单快速，安全可靠，而且可以并行加密，但是在计算器不能维持很长的情况下，密钥只能使用一次。</li></ul><h4 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h4><p>块密码只能对确定长度的数据块进行处理，而消息的长度通常是可变的。因此部分模式最后一块数据在加密前需要进行填充。</p><ul><li><strong>PKCS7</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为需要填充的字节长度值。</li><li><strong>PKCS5</strong>：PKCS5 作为 PKCS7 的子集算法，概念上没有什么区别，只是在 blockSize 上固定为 8 bytes，即块大小固定为 8 字节。</li><li><strong>ZeroPadding</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为 0 。</li><li><strong>ISO10126</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充随机数值。</li><li><strong>ANSIX923</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充数字零。</li></ul><h3 id="三、对称加密（传统加密）"><a href="#三、对称加密（传统加密）" class="headerlink" title="三、对称加密（传统加密）"></a>三、<em>对称加密（传统加密）</em></h3><ul><li><p>特征：加密和解密使用同一个密钥。</p></li><li><p>加密解密过程：明文-&gt;密钥加密-&gt;密文，密文-&gt;密钥解密-&gt;明文。</p></li><li><p>解密条件：<strong>key</strong>,<strong>iv</strong>,<strong>mode</strong>,<strong>padding</strong></p></li></ul><h4 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h4><ul><li>8位密钥</li><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><h5 id="JavaScript-实现"><a href="#JavaScript-实现" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function desEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // CBC 加密模式，Pkcs7 填充方式</span><br><span class="line">        encrypted = CryptoJS.DES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function desDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // CBC 加密模式，Pkcs7 填充方式</span><br><span class="line">        decrypted = CryptoJS.DES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var desKey = &quot;6f726c64f2c2057&quot;    // 密钥</span><br><span class="line">var desIv = &quot;0123456789ABCDEF&quot;    // 初始向量</span><br><span class="line"></span><br><span class="line">var encryptedData = desEncrypt()</span><br><span class="line">var decryptedData = desDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  +ndbEkWNw2QAfIYQtwC14w==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h4 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h4><ul><li><p>特征：原理和DES几乎是一样的，只是使用3个密钥，对相同的数据执行三次加密，增强加密强度。</p></li><li><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</p></li><li><p>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p></li></ul><h5 id="JavaScript-实现-1"><a href="#JavaScript-实现-1" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function tripleDesEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // ECB 加密方式，Iso10126 填充方式</span><br><span class="line">        encrypted = CryptoJS.TripleDES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.ECB,</span><br><span class="line">            padding: CryptoJS.pad.Iso10126</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tripleDesDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(desKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(desIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // ECB 加密方式，Iso10126 填充方式</span><br><span class="line">        decrypted = CryptoJS.TripleDES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.ECB,</span><br><span class="line">            padding: CryptoJS.pad.Iso10126</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var desKey = &quot;6f726c64f2c2057c&quot;    // 密钥</span><br><span class="line">var desIv = &quot;0123456789ABCDEF&quot;    // 偏移量</span><br><span class="line"></span><br><span class="line">var encryptedData = tripleDesEncrypt()</span><br><span class="line">var decryptedData = tripleDesDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  3J0NX7x6GbewjjhoW2HKqg==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h4 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h4><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><h5 id="JavaScript-实现-2"><a href="#JavaScript-实现-2" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 引用 crypto-js 加密模块</span><br><span class="line">var CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function tripleAesEncrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(aesKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(aesIv),</span><br><span class="line">        srcs = CryptoJS.enc.Utf8.parse(text),</span><br><span class="line">        // CBC 加密方式，Pkcs7 填充方式</span><br><span class="line">        encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tripleAesDecrypt() &#123;</span><br><span class="line">    var key = CryptoJS.enc.Utf8.parse(aesKey),</span><br><span class="line">        iv = CryptoJS.enc.Utf8.parse(aesIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        // CBC 加密方式，Pkcs7 填充方式</span><br><span class="line">        decrypted = CryptoJS.AES.decrypt(srcs, key, &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line">    return decrypted.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var text = &quot;I love Python!&quot;       // 待加密对象</span><br><span class="line">var aesKey = &quot;6f726c64f2c2057c&quot;   // 密钥，16 倍数</span><br><span class="line">var aesIv = &quot;0123456789ABCDEF&quot;    // 偏移量，16 倍数</span><br><span class="line"></span><br><span class="line">var encryptedData = tripleAesEncrypt()</span><br><span class="line">var decryptedData = tripleAesDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">// 加密字符串:  dZL7TLJR786VGvuUvqYGoQ==</span><br><span class="line">// 解密字符串:  I love Python!</span><br></pre></td></tr></table></figure><h3 id="四、非对称加密RSA"><a href="#四、非对称加密RSA" class="headerlink" title="四、非对称加密RSA"></a><em>四、非对称加密RSA</em></h3><p>特征：</p><ul><li>非对称加密算法需要两个密钥：公开密钥(publickey) 和私有密(privatekey)</li><li>有字符 <code>+ / =</code>、而且比较长</li><li>如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密。</li><li>如果用私有密钥对数据进行加密，只有用对应的公开密钥才能解密。</li></ul><p>解密条件：</p><ul><li>公钥 publickey</li><li>存在位置： 后端api，js里、网页源码里</li></ul><h3 id="JavaScript-实现-3"><a href="#JavaScript-实现-3" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 引用 node-rsa 加密模块</span><br><span class="line">var NodeRSA = require(&#x27;node-rsa&#x27;);</span><br><span class="line"></span><br><span class="line">function rsaEncrypt() &#123;</span><br><span class="line">    pubKey = new NodeRSA(publicKey,&#x27;pkcs8-public&#x27;);</span><br><span class="line">    var encryptedData = pubKey.encrypt(text, &#x27;base64&#x27;);</span><br><span class="line">    return encryptedData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rsaDecrypt() &#123;</span><br><span class="line">    priKey = new NodeRSA(privatekey,&#x27;pkcs8-private&#x27;);</span><br><span class="line">    var decryptedData = priKey.decrypt(encryptedData, &#x27;utf8&#x27;);</span><br><span class="line">    return decryptedData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var key = new NodeRSA(&#123;b: 512&#125;);                    //生成512位秘钥</span><br><span class="line">var publicKey = key.exportKey(&#x27;pkcs8-public&#x27;);    //导出公钥</span><br><span class="line">var privatekey = key.exportKey(&#x27;pkcs8-private&#x27;);  //导出私钥</span><br><span class="line">var text = &quot;I love Python!&quot;</span><br><span class="line"></span><br><span class="line">var encryptedData = rsaEncrypt()</span><br><span class="line">var decryptedData = rsaDecrypt()</span><br><span class="line"></span><br><span class="line">console.log(&quot;公钥:\n&quot;, publicKey)</span><br><span class="line">console.log(&quot;私钥:\n&quot;, privatekey)</span><br><span class="line">console.log(&quot;加密字符串: &quot;, encryptedData)</span><br><span class="line">console.log(&quot;解密字符串: &quot;, decryptedData)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">公钥:</span><br><span class="line"> -----BEGIN PUBLIC KEY-----</span><br><span class="line">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAOV1BwTJSVce/QjJAro5fXG9WzOpal09</span><br><span class="line">Qtv1yuXKE81vZSNTHxW6dICwPT/kjCfC3bA5Qs6wnYBANuwD6wlAS0UCAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">私钥:</span><br><span class="line"> -----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA5XUHBMlJVx79CMkC</span><br><span class="line">ujl9cb1bM6lqXT1C2/XK5coTzW9lI1MfFbp0gLA9P+SMJ8LdsDlCzrCdgEA27APr</span><br><span class="line">CUBLRQIDAQABAkAiXwJbJC+5PioXG80tyhjRZdT4iyMkrl2Kh2oKO9f1iLaBXLya</span><br><span class="line">D0HW82wFh+cUy8GcMl9jse8DE8wd1TdORmHhAiEA/rwmWjXHVgDqcH/fqk8Ufku0</span><br><span class="line">fXvs56h5QDoh1so5vokCIQDmmL3JDW6Y7RuK2qwFbHBZtYPRFRVdn5X1oqU2FOSX</span><br><span class="line">3QIhAOVTjVN5RtNuT6Cn/jvcpZ5tmTe+8TA8w6vGqeAsfn/BAiBvKKIUEQ2HWoU0</span><br><span class="line">YkUaODPQiteIKomqIAvB5S2O7HNlYQIgWMuLUxGZbbcAmIX+YmRXuET97S7OWv+z</span><br><span class="line">WHVfb/rbXtI=</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line">加密字符串:  hHXTF1K3w55Wd6OSjVYtqxceJ5VhlySNUahel9pwKD92Ef7wIT7DYPuJRKiqz5tuHtUqujbmbZBSL0qDE/EA+A==</span><br><span class="line">解密字符串:  I love Python!</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h4 id="常用的浏览器解密模式"><a href="#常用的浏览器解密模式" class="headerlink" title="常用的浏览器解密模式"></a>常用的浏览器解密模式</h4><p>找到rsa文件，去创建同样的rsa对象。</p><p>找到加密的参数modulus，exponent直接构建</p>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%80%86%E5%90%91/">逆向</category>
      
      <category domain="https://leileigwl.github.io/tags/js%E5%8A%A0%E5%AF%86/">js加密</category>
      
      
      <comments>https://leileigwl.github.io/post/fc757312.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js环境</title>
      <link>https://leileigwl.github.io/post/aebf9b8c.html</link>
      <guid>https://leileigwl.github.io/post/aebf9b8c.html</guid>
      <pubDate>Sun, 14 May 2023 06:16:41 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;补环境&quot;&gt;&lt;a href=&quot;#补环境&quot; class=&quot;headerlink&quot; title=&quot;补环境&quot;&gt;&lt;/a&gt;补环境&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsdom = <span class="built_in">require</span>(<span class="string">&quot;jsdom&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">JSDOM</span> &#125; = jsdom;</span><br><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> <span class="title function_">JSDOM</span>(<span class="string">`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`</span>);</span><br><span class="line"><span class="variable language_">window</span> = dom.<span class="property">window</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">document</span> = dom.<span class="property">window</span>.<span class="property">document</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">document</span> = <span class="variable language_">document</span>;</span><br></pre></td></tr></table></figure><h3 id="安装jsdom和canvas"><a href="#安装jsdom和canvas" class="headerlink" title="安装jsdom和canvas"></a>安装jsdom和canvas</h3><h4 id="jsdom"><a href="#jsdom" class="headerlink" title="jsdom"></a>jsdom</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g jsdom</span><br></pre></td></tr></table></figure><h4 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g canvas</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%80%86%E5%90%91/">逆向</category>
      
      <category domain="https://leileigwl.github.io/tags/js/">js</category>
      
      <category domain="https://leileigwl.github.io/tags/v8/">v8</category>
      
      
      <comments>https://leileigwl.github.io/post/aebf9b8c.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>node 环境配置</title>
      <link>https://leileigwl.github.io/post/c4efcc40.html</link>
      <guid>https://leileigwl.github.io/post/c4efcc40.html</guid>
      <pubDate>Mon, 08 May 2023 08:35:56 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#环境</span></span><br><span class="line">D:\configuration\Node</span><br><span class="line">D:\configuration\Node\node_global\node_modules</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 还原默认源：npm config set registry https://registry.npmjs.org/</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#目录</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\configuration\Node\node_cache&quot;</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\configuration\Node\node_cache&quot;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://leileigwl.github.io/tags/%E9%85%8D%E7%BD%AE/">配置</category>
      
      <category domain="https://leileigwl.github.io/tags/node/">node</category>
      
      <category domain="https://leileigwl.github.io/tags/npm/">npm</category>
      
      
      <comments>https://leileigwl.github.io/post/c4efcc40.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
